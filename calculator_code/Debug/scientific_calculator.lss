
scientific_calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007b3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001e4  00800060  00007b3e  00007bd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003d  00800244  00800244  00007db6  2**0
                  ALLOC
  3 .stab         0000426c  00000000  00000000  00007db8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000158d  00000000  00000000  0000c024  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  0000d5b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000290  00000000  00000000  0000d7f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002e0e  00000000  00000000  0000da81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000195e  00000000  00000000  0001088f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000165f  00000000  00000000  000121ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000260  00000000  00000000  0001384c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000035c  00000000  00000000  00013aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c82  00000000  00000000  00013e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00014a8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e3       	ldi	r30, 0x3E	; 62
      68:	fb e7       	ldi	r31, 0x7B	; 123
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 34       	cpi	r26, 0x44	; 68
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 e4       	ldi	r26, 0x44	; 68
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 38       	cpi	r26, 0x81	; 129
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <main>
      8a:	0c 94 9d 3d 	jmp	0x7b3a	; 0x7b3a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__lshrdi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__lshrdi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__lshrdi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__lshrdi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	4d 81       	ldd	r20, Y+5	; 0x05
      e4:	5e 81       	ldd	r21, Y+6	; 0x06
      e6:	6f 81       	ldd	r22, Y+7	; 0x07
      e8:	78 85       	ldd	r23, Y+8	; 0x08
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__lshrdi3+0x7c>
      ee:	1d 86       	std	Y+13, r1	; 0x0d
      f0:	1e 86       	std	Y+14, r1	; 0x0e
      f2:	1f 86       	std	Y+15, r1	; 0x0f
      f4:	18 8a       	std	Y+16, r1	; 0x10
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__lshrdi3+0x76>
     100:	76 95       	lsr	r23
     102:	67 95       	ror	r22
     104:	57 95       	ror	r21
     106:	47 95       	ror	r20
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__lshrdi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__lshrdi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__lshrdi3+0x94>
     11e:	b6 95       	lsr	r27
     120:	a7 95       	ror	r26
     122:	97 95       	ror	r25
     124:	87 95       	ror	r24
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__lshrdi3+0x8c>
     12a:	8d 87       	std	Y+13, r24	; 0x0d
     12c:	9e 87       	std	Y+14, r25	; 0x0e
     12e:	af 87       	std	Y+15, r26	; 0x0f
     130:	b8 8b       	std	Y+16, r27	; 0x10
     132:	04 c0       	rjmp	.+8      	; 0x13c <__lshrdi3+0xaa>
     134:	44 0f       	add	r20, r20
     136:	55 1f       	adc	r21, r21
     138:	66 1f       	adc	r22, r22
     13a:	77 1f       	adc	r23, r23
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__lshrdi3+0xa2>
     140:	89 81       	ldd	r24, Y+1	; 0x01
     142:	9a 81       	ldd	r25, Y+2	; 0x02
     144:	ab 81       	ldd	r26, Y+3	; 0x03
     146:	bc 81       	ldd	r27, Y+4	; 0x04
     148:	04 c0       	rjmp	.+8      	; 0x152 <__lshrdi3+0xc0>
     14a:	b6 95       	lsr	r27
     14c:	a7 95       	ror	r26
     14e:	97 95       	ror	r25
     150:	87 95       	ror	r24
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__lshrdi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	49 87       	std	Y+9, r20	; 0x09
     160:	5a 87       	std	Y+10, r21	; 0x0a
     162:	6b 87       	std	Y+11, r22	; 0x0b
     164:	7c 87       	std	Y+12, r23	; 0x0c
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__ashldi3>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	df 93       	push	r29
     198:	cf 93       	push	r28
     19a:	cd b7       	in	r28, 0x3d	; 61
     19c:	de b7       	in	r29, 0x3e	; 62
     19e:	60 97       	sbiw	r28, 0x10	; 16
     1a0:	0f b6       	in	r0, 0x3f	; 63
     1a2:	f8 94       	cli
     1a4:	de bf       	out	0x3e, r29	; 62
     1a6:	0f be       	out	0x3f, r0	; 63
     1a8:	cd bf       	out	0x3d, r28	; 61
     1aa:	a8 2f       	mov	r26, r24
     1ac:	00 23       	and	r16, r16
     1ae:	09 f4       	brne	.+2      	; 0x1b2 <__ashldi3+0x22>
     1b0:	61 c0       	rjmp	.+194    	; 0x274 <__ashldi3+0xe4>
     1b2:	7e 01       	movw	r14, r28
     1b4:	08 94       	sec
     1b6:	e1 1c       	adc	r14, r1
     1b8:	f1 1c       	adc	r15, r1
     1ba:	88 e0       	ldi	r24, 0x08	; 8
     1bc:	f7 01       	movw	r30, r14
     1be:	11 92       	st	Z+, r1
     1c0:	8a 95       	dec	r24
     1c2:	e9 f7       	brne	.-6      	; 0x1be <__ashldi3+0x2e>
     1c4:	29 83       	std	Y+1, r18	; 0x01
     1c6:	3a 83       	std	Y+2, r19	; 0x02
     1c8:	4b 83       	std	Y+3, r20	; 0x03
     1ca:	5c 83       	std	Y+4, r21	; 0x04
     1cc:	6d 83       	std	Y+5, r22	; 0x05
     1ce:	7e 83       	std	Y+6, r23	; 0x06
     1d0:	af 83       	std	Y+7, r26	; 0x07
     1d2:	98 87       	std	Y+8, r25	; 0x08
     1d4:	80 e2       	ldi	r24, 0x20	; 32
     1d6:	80 1b       	sub	r24, r16
     1d8:	e8 2f       	mov	r30, r24
     1da:	ff 27       	eor	r31, r31
     1dc:	e7 fd       	sbrc	r30, 7
     1de:	f0 95       	com	r31
     1e0:	49 81       	ldd	r20, Y+1	; 0x01
     1e2:	5a 81       	ldd	r21, Y+2	; 0x02
     1e4:	6b 81       	ldd	r22, Y+3	; 0x03
     1e6:	7c 81       	ldd	r23, Y+4	; 0x04
     1e8:	18 16       	cp	r1, r24
     1ea:	84 f0       	brlt	.+32     	; 0x20c <__ashldi3+0x7c>
     1ec:	19 86       	std	Y+9, r1	; 0x09
     1ee:	1a 86       	std	Y+10, r1	; 0x0a
     1f0:	1b 86       	std	Y+11, r1	; 0x0b
     1f2:	1c 86       	std	Y+12, r1	; 0x0c
     1f4:	88 27       	eor	r24, r24
     1f6:	99 27       	eor	r25, r25
     1f8:	8e 1b       	sub	r24, r30
     1fa:	9f 0b       	sbc	r25, r31
     1fc:	04 c0       	rjmp	.+8      	; 0x206 <__ashldi3+0x76>
     1fe:	44 0f       	add	r20, r20
     200:	55 1f       	adc	r21, r21
     202:	66 1f       	adc	r22, r22
     204:	77 1f       	adc	r23, r23
     206:	8a 95       	dec	r24
     208:	d2 f7       	brpl	.-12     	; 0x1fe <__ashldi3+0x6e>
     20a:	28 c0       	rjmp	.+80     	; 0x25c <__ashldi3+0xcc>
     20c:	20 2f       	mov	r18, r16
     20e:	33 27       	eor	r19, r19
     210:	27 fd       	sbrc	r18, 7
     212:	30 95       	com	r19
     214:	db 01       	movw	r26, r22
     216:	ca 01       	movw	r24, r20
     218:	02 2e       	mov	r0, r18
     21a:	04 c0       	rjmp	.+8      	; 0x224 <__ashldi3+0x94>
     21c:	88 0f       	add	r24, r24
     21e:	99 1f       	adc	r25, r25
     220:	aa 1f       	adc	r26, r26
     222:	bb 1f       	adc	r27, r27
     224:	0a 94       	dec	r0
     226:	d2 f7       	brpl	.-12     	; 0x21c <__ashldi3+0x8c>
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	9a 87       	std	Y+10, r25	; 0x0a
     22c:	ab 87       	std	Y+11, r26	; 0x0b
     22e:	bc 87       	std	Y+12, r27	; 0x0c
     230:	04 c0       	rjmp	.+8      	; 0x23a <__ashldi3+0xaa>
     232:	76 95       	lsr	r23
     234:	67 95       	ror	r22
     236:	57 95       	ror	r21
     238:	47 95       	ror	r20
     23a:	ea 95       	dec	r30
     23c:	d2 f7       	brpl	.-12     	; 0x232 <__ashldi3+0xa2>
     23e:	8d 81       	ldd	r24, Y+5	; 0x05
     240:	9e 81       	ldd	r25, Y+6	; 0x06
     242:	af 81       	ldd	r26, Y+7	; 0x07
     244:	b8 85       	ldd	r27, Y+8	; 0x08
     246:	04 c0       	rjmp	.+8      	; 0x250 <__ashldi3+0xc0>
     248:	88 0f       	add	r24, r24
     24a:	99 1f       	adc	r25, r25
     24c:	aa 1f       	adc	r26, r26
     24e:	bb 1f       	adc	r27, r27
     250:	2a 95       	dec	r18
     252:	d2 f7       	brpl	.-12     	; 0x248 <__ashldi3+0xb8>
     254:	48 2b       	or	r20, r24
     256:	59 2b       	or	r21, r25
     258:	6a 2b       	or	r22, r26
     25a:	7b 2b       	or	r23, r27
     25c:	4d 87       	std	Y+13, r20	; 0x0d
     25e:	5e 87       	std	Y+14, r21	; 0x0e
     260:	6f 87       	std	Y+15, r22	; 0x0f
     262:	78 8b       	std	Y+16, r23	; 0x10
     264:	29 85       	ldd	r18, Y+9	; 0x09
     266:	3a 85       	ldd	r19, Y+10	; 0x0a
     268:	4b 85       	ldd	r20, Y+11	; 0x0b
     26a:	5c 85       	ldd	r21, Y+12	; 0x0c
     26c:	6d 85       	ldd	r22, Y+13	; 0x0d
     26e:	7e 85       	ldd	r23, Y+14	; 0x0e
     270:	af 85       	ldd	r26, Y+15	; 0x0f
     272:	98 89       	ldd	r25, Y+16	; 0x10
     274:	8a 2f       	mov	r24, r26
     276:	60 96       	adiw	r28, 0x10	; 16
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	f8 94       	cli
     27c:	de bf       	out	0x3e, r29	; 62
     27e:	0f be       	out	0x3f, r0	; 63
     280:	cd bf       	out	0x3d, r28	; 61
     282:	cf 91       	pop	r28
     284:	df 91       	pop	r29
     286:	0f 91       	pop	r16
     288:	ff 90       	pop	r15
     28a:	ef 90       	pop	r14
     28c:	08 95       	ret

0000028e <__fixunssfsi>:
     28e:	ef 92       	push	r14
     290:	ff 92       	push	r15
     292:	0f 93       	push	r16
     294:	1f 93       	push	r17
     296:	7b 01       	movw	r14, r22
     298:	8c 01       	movw	r16, r24
     29a:	20 e0       	ldi	r18, 0x00	; 0
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	40 e0       	ldi	r20, 0x00	; 0
     2a0:	5f e4       	ldi	r21, 0x4F	; 79
     2a2:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__gesf2>
     2a6:	88 23       	and	r24, r24
     2a8:	8c f0       	brlt	.+34     	; 0x2cc <__fixunssfsi+0x3e>
     2aa:	c8 01       	movw	r24, r16
     2ac:	b7 01       	movw	r22, r14
     2ae:	20 e0       	ldi	r18, 0x00	; 0
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	40 e0       	ldi	r20, 0x00	; 0
     2b4:	5f e4       	ldi	r21, 0x4F	; 79
     2b6:	0e 94 bf 02 	call	0x57e	; 0x57e <__subsf3>
     2ba:	0e 94 11 06 	call	0xc22	; 0xc22 <__fixsfsi>
     2be:	9b 01       	movw	r18, r22
     2c0:	ac 01       	movw	r20, r24
     2c2:	20 50       	subi	r18, 0x00	; 0
     2c4:	30 40       	sbci	r19, 0x00	; 0
     2c6:	40 40       	sbci	r20, 0x00	; 0
     2c8:	50 48       	sbci	r21, 0x80	; 128
     2ca:	06 c0       	rjmp	.+12     	; 0x2d8 <__fixunssfsi+0x4a>
     2cc:	c8 01       	movw	r24, r16
     2ce:	b7 01       	movw	r22, r14
     2d0:	0e 94 11 06 	call	0xc22	; 0xc22 <__fixsfsi>
     2d4:	9b 01       	movw	r18, r22
     2d6:	ac 01       	movw	r20, r24
     2d8:	b9 01       	movw	r22, r18
     2da:	ca 01       	movw	r24, r20
     2dc:	1f 91       	pop	r17
     2de:	0f 91       	pop	r16
     2e0:	ff 90       	pop	r15
     2e2:	ef 90       	pop	r14
     2e4:	08 95       	ret

000002e6 <_fpadd_parts>:
     2e6:	a0 e0       	ldi	r26, 0x00	; 0
     2e8:	b0 e0       	ldi	r27, 0x00	; 0
     2ea:	e9 e7       	ldi	r30, 0x79	; 121
     2ec:	f1 e0       	ldi	r31, 0x01	; 1
     2ee:	0c 94 f7 3b 	jmp	0x77ee	; 0x77ee <__prologue_saves__>
     2f2:	dc 01       	movw	r26, r24
     2f4:	2b 01       	movw	r4, r22
     2f6:	fa 01       	movw	r30, r20
     2f8:	9c 91       	ld	r25, X
     2fa:	92 30       	cpi	r25, 0x02	; 2
     2fc:	08 f4       	brcc	.+2      	; 0x300 <_fpadd_parts+0x1a>
     2fe:	39 c1       	rjmp	.+626    	; 0x572 <_fpadd_parts+0x28c>
     300:	eb 01       	movw	r28, r22
     302:	88 81       	ld	r24, Y
     304:	82 30       	cpi	r24, 0x02	; 2
     306:	08 f4       	brcc	.+2      	; 0x30a <_fpadd_parts+0x24>
     308:	33 c1       	rjmp	.+614    	; 0x570 <_fpadd_parts+0x28a>
     30a:	94 30       	cpi	r25, 0x04	; 4
     30c:	69 f4       	brne	.+26     	; 0x328 <_fpadd_parts+0x42>
     30e:	84 30       	cpi	r24, 0x04	; 4
     310:	09 f0       	breq	.+2      	; 0x314 <_fpadd_parts+0x2e>
     312:	2f c1       	rjmp	.+606    	; 0x572 <_fpadd_parts+0x28c>
     314:	11 96       	adiw	r26, 0x01	; 1
     316:	9c 91       	ld	r25, X
     318:	11 97       	sbiw	r26, 0x01	; 1
     31a:	89 81       	ldd	r24, Y+1	; 0x01
     31c:	98 17       	cp	r25, r24
     31e:	09 f4       	brne	.+2      	; 0x322 <_fpadd_parts+0x3c>
     320:	28 c1       	rjmp	.+592    	; 0x572 <_fpadd_parts+0x28c>
     322:	a3 ec       	ldi	r26, 0xC3	; 195
     324:	b0 e0       	ldi	r27, 0x00	; 0
     326:	25 c1       	rjmp	.+586    	; 0x572 <_fpadd_parts+0x28c>
     328:	84 30       	cpi	r24, 0x04	; 4
     32a:	09 f4       	brne	.+2      	; 0x32e <_fpadd_parts+0x48>
     32c:	21 c1       	rjmp	.+578    	; 0x570 <_fpadd_parts+0x28a>
     32e:	82 30       	cpi	r24, 0x02	; 2
     330:	a9 f4       	brne	.+42     	; 0x35c <_fpadd_parts+0x76>
     332:	92 30       	cpi	r25, 0x02	; 2
     334:	09 f0       	breq	.+2      	; 0x338 <_fpadd_parts+0x52>
     336:	1d c1       	rjmp	.+570    	; 0x572 <_fpadd_parts+0x28c>
     338:	9a 01       	movw	r18, r20
     33a:	ad 01       	movw	r20, r26
     33c:	88 e0       	ldi	r24, 0x08	; 8
     33e:	ea 01       	movw	r28, r20
     340:	09 90       	ld	r0, Y+
     342:	ae 01       	movw	r20, r28
     344:	e9 01       	movw	r28, r18
     346:	09 92       	st	Y+, r0
     348:	9e 01       	movw	r18, r28
     34a:	81 50       	subi	r24, 0x01	; 1
     34c:	c1 f7       	brne	.-16     	; 0x33e <_fpadd_parts+0x58>
     34e:	e2 01       	movw	r28, r4
     350:	89 81       	ldd	r24, Y+1	; 0x01
     352:	11 96       	adiw	r26, 0x01	; 1
     354:	9c 91       	ld	r25, X
     356:	89 23       	and	r24, r25
     358:	81 83       	std	Z+1, r24	; 0x01
     35a:	08 c1       	rjmp	.+528    	; 0x56c <_fpadd_parts+0x286>
     35c:	92 30       	cpi	r25, 0x02	; 2
     35e:	09 f4       	brne	.+2      	; 0x362 <_fpadd_parts+0x7c>
     360:	07 c1       	rjmp	.+526    	; 0x570 <_fpadd_parts+0x28a>
     362:	12 96       	adiw	r26, 0x02	; 2
     364:	2d 90       	ld	r2, X+
     366:	3c 90       	ld	r3, X
     368:	13 97       	sbiw	r26, 0x03	; 3
     36a:	eb 01       	movw	r28, r22
     36c:	8a 81       	ldd	r24, Y+2	; 0x02
     36e:	9b 81       	ldd	r25, Y+3	; 0x03
     370:	14 96       	adiw	r26, 0x04	; 4
     372:	ad 90       	ld	r10, X+
     374:	bd 90       	ld	r11, X+
     376:	cd 90       	ld	r12, X+
     378:	dc 90       	ld	r13, X
     37a:	17 97       	sbiw	r26, 0x07	; 7
     37c:	ec 80       	ldd	r14, Y+4	; 0x04
     37e:	fd 80       	ldd	r15, Y+5	; 0x05
     380:	0e 81       	ldd	r16, Y+6	; 0x06
     382:	1f 81       	ldd	r17, Y+7	; 0x07
     384:	91 01       	movw	r18, r2
     386:	28 1b       	sub	r18, r24
     388:	39 0b       	sbc	r19, r25
     38a:	b9 01       	movw	r22, r18
     38c:	37 ff       	sbrs	r19, 7
     38e:	04 c0       	rjmp	.+8      	; 0x398 <_fpadd_parts+0xb2>
     390:	66 27       	eor	r22, r22
     392:	77 27       	eor	r23, r23
     394:	62 1b       	sub	r22, r18
     396:	73 0b       	sbc	r23, r19
     398:	60 32       	cpi	r22, 0x20	; 32
     39a:	71 05       	cpc	r23, r1
     39c:	0c f0       	brlt	.+2      	; 0x3a0 <_fpadd_parts+0xba>
     39e:	61 c0       	rjmp	.+194    	; 0x462 <_fpadd_parts+0x17c>
     3a0:	12 16       	cp	r1, r18
     3a2:	13 06       	cpc	r1, r19
     3a4:	6c f5       	brge	.+90     	; 0x400 <_fpadd_parts+0x11a>
     3a6:	37 01       	movw	r6, r14
     3a8:	48 01       	movw	r8, r16
     3aa:	06 2e       	mov	r0, r22
     3ac:	04 c0       	rjmp	.+8      	; 0x3b6 <_fpadd_parts+0xd0>
     3ae:	96 94       	lsr	r9
     3b0:	87 94       	ror	r8
     3b2:	77 94       	ror	r7
     3b4:	67 94       	ror	r6
     3b6:	0a 94       	dec	r0
     3b8:	d2 f7       	brpl	.-12     	; 0x3ae <_fpadd_parts+0xc8>
     3ba:	21 e0       	ldi	r18, 0x01	; 1
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	40 e0       	ldi	r20, 0x00	; 0
     3c0:	50 e0       	ldi	r21, 0x00	; 0
     3c2:	04 c0       	rjmp	.+8      	; 0x3cc <_fpadd_parts+0xe6>
     3c4:	22 0f       	add	r18, r18
     3c6:	33 1f       	adc	r19, r19
     3c8:	44 1f       	adc	r20, r20
     3ca:	55 1f       	adc	r21, r21
     3cc:	6a 95       	dec	r22
     3ce:	d2 f7       	brpl	.-12     	; 0x3c4 <_fpadd_parts+0xde>
     3d0:	21 50       	subi	r18, 0x01	; 1
     3d2:	30 40       	sbci	r19, 0x00	; 0
     3d4:	40 40       	sbci	r20, 0x00	; 0
     3d6:	50 40       	sbci	r21, 0x00	; 0
     3d8:	2e 21       	and	r18, r14
     3da:	3f 21       	and	r19, r15
     3dc:	40 23       	and	r20, r16
     3de:	51 23       	and	r21, r17
     3e0:	21 15       	cp	r18, r1
     3e2:	31 05       	cpc	r19, r1
     3e4:	41 05       	cpc	r20, r1
     3e6:	51 05       	cpc	r21, r1
     3e8:	21 f0       	breq	.+8      	; 0x3f2 <_fpadd_parts+0x10c>
     3ea:	21 e0       	ldi	r18, 0x01	; 1
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	40 e0       	ldi	r20, 0x00	; 0
     3f0:	50 e0       	ldi	r21, 0x00	; 0
     3f2:	79 01       	movw	r14, r18
     3f4:	8a 01       	movw	r16, r20
     3f6:	e6 28       	or	r14, r6
     3f8:	f7 28       	or	r15, r7
     3fa:	08 29       	or	r16, r8
     3fc:	19 29       	or	r17, r9
     3fe:	3c c0       	rjmp	.+120    	; 0x478 <_fpadd_parts+0x192>
     400:	23 2b       	or	r18, r19
     402:	d1 f1       	breq	.+116    	; 0x478 <_fpadd_parts+0x192>
     404:	26 0e       	add	r2, r22
     406:	37 1e       	adc	r3, r23
     408:	35 01       	movw	r6, r10
     40a:	46 01       	movw	r8, r12
     40c:	06 2e       	mov	r0, r22
     40e:	04 c0       	rjmp	.+8      	; 0x418 <_fpadd_parts+0x132>
     410:	96 94       	lsr	r9
     412:	87 94       	ror	r8
     414:	77 94       	ror	r7
     416:	67 94       	ror	r6
     418:	0a 94       	dec	r0
     41a:	d2 f7       	brpl	.-12     	; 0x410 <_fpadd_parts+0x12a>
     41c:	21 e0       	ldi	r18, 0x01	; 1
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	40 e0       	ldi	r20, 0x00	; 0
     422:	50 e0       	ldi	r21, 0x00	; 0
     424:	04 c0       	rjmp	.+8      	; 0x42e <_fpadd_parts+0x148>
     426:	22 0f       	add	r18, r18
     428:	33 1f       	adc	r19, r19
     42a:	44 1f       	adc	r20, r20
     42c:	55 1f       	adc	r21, r21
     42e:	6a 95       	dec	r22
     430:	d2 f7       	brpl	.-12     	; 0x426 <_fpadd_parts+0x140>
     432:	21 50       	subi	r18, 0x01	; 1
     434:	30 40       	sbci	r19, 0x00	; 0
     436:	40 40       	sbci	r20, 0x00	; 0
     438:	50 40       	sbci	r21, 0x00	; 0
     43a:	2a 21       	and	r18, r10
     43c:	3b 21       	and	r19, r11
     43e:	4c 21       	and	r20, r12
     440:	5d 21       	and	r21, r13
     442:	21 15       	cp	r18, r1
     444:	31 05       	cpc	r19, r1
     446:	41 05       	cpc	r20, r1
     448:	51 05       	cpc	r21, r1
     44a:	21 f0       	breq	.+8      	; 0x454 <_fpadd_parts+0x16e>
     44c:	21 e0       	ldi	r18, 0x01	; 1
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	40 e0       	ldi	r20, 0x00	; 0
     452:	50 e0       	ldi	r21, 0x00	; 0
     454:	59 01       	movw	r10, r18
     456:	6a 01       	movw	r12, r20
     458:	a6 28       	or	r10, r6
     45a:	b7 28       	or	r11, r7
     45c:	c8 28       	or	r12, r8
     45e:	d9 28       	or	r13, r9
     460:	0b c0       	rjmp	.+22     	; 0x478 <_fpadd_parts+0x192>
     462:	82 15       	cp	r24, r2
     464:	93 05       	cpc	r25, r3
     466:	2c f0       	brlt	.+10     	; 0x472 <_fpadd_parts+0x18c>
     468:	1c 01       	movw	r2, r24
     46a:	aa 24       	eor	r10, r10
     46c:	bb 24       	eor	r11, r11
     46e:	65 01       	movw	r12, r10
     470:	03 c0       	rjmp	.+6      	; 0x478 <_fpadd_parts+0x192>
     472:	ee 24       	eor	r14, r14
     474:	ff 24       	eor	r15, r15
     476:	87 01       	movw	r16, r14
     478:	11 96       	adiw	r26, 0x01	; 1
     47a:	9c 91       	ld	r25, X
     47c:	d2 01       	movw	r26, r4
     47e:	11 96       	adiw	r26, 0x01	; 1
     480:	8c 91       	ld	r24, X
     482:	98 17       	cp	r25, r24
     484:	09 f4       	brne	.+2      	; 0x488 <_fpadd_parts+0x1a2>
     486:	45 c0       	rjmp	.+138    	; 0x512 <_fpadd_parts+0x22c>
     488:	99 23       	and	r25, r25
     48a:	39 f0       	breq	.+14     	; 0x49a <_fpadd_parts+0x1b4>
     48c:	a8 01       	movw	r20, r16
     48e:	97 01       	movw	r18, r14
     490:	2a 19       	sub	r18, r10
     492:	3b 09       	sbc	r19, r11
     494:	4c 09       	sbc	r20, r12
     496:	5d 09       	sbc	r21, r13
     498:	06 c0       	rjmp	.+12     	; 0x4a6 <_fpadd_parts+0x1c0>
     49a:	a6 01       	movw	r20, r12
     49c:	95 01       	movw	r18, r10
     49e:	2e 19       	sub	r18, r14
     4a0:	3f 09       	sbc	r19, r15
     4a2:	40 0b       	sbc	r20, r16
     4a4:	51 0b       	sbc	r21, r17
     4a6:	57 fd       	sbrc	r21, 7
     4a8:	08 c0       	rjmp	.+16     	; 0x4ba <_fpadd_parts+0x1d4>
     4aa:	11 82       	std	Z+1, r1	; 0x01
     4ac:	33 82       	std	Z+3, r3	; 0x03
     4ae:	22 82       	std	Z+2, r2	; 0x02
     4b0:	24 83       	std	Z+4, r18	; 0x04
     4b2:	35 83       	std	Z+5, r19	; 0x05
     4b4:	46 83       	std	Z+6, r20	; 0x06
     4b6:	57 83       	std	Z+7, r21	; 0x07
     4b8:	1d c0       	rjmp	.+58     	; 0x4f4 <_fpadd_parts+0x20e>
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	81 83       	std	Z+1, r24	; 0x01
     4be:	33 82       	std	Z+3, r3	; 0x03
     4c0:	22 82       	std	Z+2, r2	; 0x02
     4c2:	88 27       	eor	r24, r24
     4c4:	99 27       	eor	r25, r25
     4c6:	dc 01       	movw	r26, r24
     4c8:	82 1b       	sub	r24, r18
     4ca:	93 0b       	sbc	r25, r19
     4cc:	a4 0b       	sbc	r26, r20
     4ce:	b5 0b       	sbc	r27, r21
     4d0:	84 83       	std	Z+4, r24	; 0x04
     4d2:	95 83       	std	Z+5, r25	; 0x05
     4d4:	a6 83       	std	Z+6, r26	; 0x06
     4d6:	b7 83       	std	Z+7, r27	; 0x07
     4d8:	0d c0       	rjmp	.+26     	; 0x4f4 <_fpadd_parts+0x20e>
     4da:	22 0f       	add	r18, r18
     4dc:	33 1f       	adc	r19, r19
     4de:	44 1f       	adc	r20, r20
     4e0:	55 1f       	adc	r21, r21
     4e2:	24 83       	std	Z+4, r18	; 0x04
     4e4:	35 83       	std	Z+5, r19	; 0x05
     4e6:	46 83       	std	Z+6, r20	; 0x06
     4e8:	57 83       	std	Z+7, r21	; 0x07
     4ea:	82 81       	ldd	r24, Z+2	; 0x02
     4ec:	93 81       	ldd	r25, Z+3	; 0x03
     4ee:	01 97       	sbiw	r24, 0x01	; 1
     4f0:	93 83       	std	Z+3, r25	; 0x03
     4f2:	82 83       	std	Z+2, r24	; 0x02
     4f4:	24 81       	ldd	r18, Z+4	; 0x04
     4f6:	35 81       	ldd	r19, Z+5	; 0x05
     4f8:	46 81       	ldd	r20, Z+6	; 0x06
     4fa:	57 81       	ldd	r21, Z+7	; 0x07
     4fc:	da 01       	movw	r26, r20
     4fe:	c9 01       	movw	r24, r18
     500:	01 97       	sbiw	r24, 0x01	; 1
     502:	a1 09       	sbc	r26, r1
     504:	b1 09       	sbc	r27, r1
     506:	8f 5f       	subi	r24, 0xFF	; 255
     508:	9f 4f       	sbci	r25, 0xFF	; 255
     50a:	af 4f       	sbci	r26, 0xFF	; 255
     50c:	bf 43       	sbci	r27, 0x3F	; 63
     50e:	28 f3       	brcs	.-54     	; 0x4da <_fpadd_parts+0x1f4>
     510:	0b c0       	rjmp	.+22     	; 0x528 <_fpadd_parts+0x242>
     512:	91 83       	std	Z+1, r25	; 0x01
     514:	33 82       	std	Z+3, r3	; 0x03
     516:	22 82       	std	Z+2, r2	; 0x02
     518:	ea 0c       	add	r14, r10
     51a:	fb 1c       	adc	r15, r11
     51c:	0c 1d       	adc	r16, r12
     51e:	1d 1d       	adc	r17, r13
     520:	e4 82       	std	Z+4, r14	; 0x04
     522:	f5 82       	std	Z+5, r15	; 0x05
     524:	06 83       	std	Z+6, r16	; 0x06
     526:	17 83       	std	Z+7, r17	; 0x07
     528:	83 e0       	ldi	r24, 0x03	; 3
     52a:	80 83       	st	Z, r24
     52c:	24 81       	ldd	r18, Z+4	; 0x04
     52e:	35 81       	ldd	r19, Z+5	; 0x05
     530:	46 81       	ldd	r20, Z+6	; 0x06
     532:	57 81       	ldd	r21, Z+7	; 0x07
     534:	57 ff       	sbrs	r21, 7
     536:	1a c0       	rjmp	.+52     	; 0x56c <_fpadd_parts+0x286>
     538:	c9 01       	movw	r24, r18
     53a:	aa 27       	eor	r26, r26
     53c:	97 fd       	sbrc	r25, 7
     53e:	a0 95       	com	r26
     540:	ba 2f       	mov	r27, r26
     542:	81 70       	andi	r24, 0x01	; 1
     544:	90 70       	andi	r25, 0x00	; 0
     546:	a0 70       	andi	r26, 0x00	; 0
     548:	b0 70       	andi	r27, 0x00	; 0
     54a:	56 95       	lsr	r21
     54c:	47 95       	ror	r20
     54e:	37 95       	ror	r19
     550:	27 95       	ror	r18
     552:	82 2b       	or	r24, r18
     554:	93 2b       	or	r25, r19
     556:	a4 2b       	or	r26, r20
     558:	b5 2b       	or	r27, r21
     55a:	84 83       	std	Z+4, r24	; 0x04
     55c:	95 83       	std	Z+5, r25	; 0x05
     55e:	a6 83       	std	Z+6, r26	; 0x06
     560:	b7 83       	std	Z+7, r27	; 0x07
     562:	82 81       	ldd	r24, Z+2	; 0x02
     564:	93 81       	ldd	r25, Z+3	; 0x03
     566:	01 96       	adiw	r24, 0x01	; 1
     568:	93 83       	std	Z+3, r25	; 0x03
     56a:	82 83       	std	Z+2, r24	; 0x02
     56c:	df 01       	movw	r26, r30
     56e:	01 c0       	rjmp	.+2      	; 0x572 <_fpadd_parts+0x28c>
     570:	d2 01       	movw	r26, r4
     572:	cd 01       	movw	r24, r26
     574:	cd b7       	in	r28, 0x3d	; 61
     576:	de b7       	in	r29, 0x3e	; 62
     578:	e2 e1       	ldi	r30, 0x12	; 18
     57a:	0c 94 13 3c 	jmp	0x7826	; 0x7826 <__epilogue_restores__>

0000057e <__subsf3>:
     57e:	a0 e2       	ldi	r26, 0x20	; 32
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	e5 ec       	ldi	r30, 0xC5	; 197
     584:	f2 e0       	ldi	r31, 0x02	; 2
     586:	0c 94 03 3c 	jmp	0x7806	; 0x7806 <__prologue_saves__+0x18>
     58a:	69 83       	std	Y+1, r22	; 0x01
     58c:	7a 83       	std	Y+2, r23	; 0x02
     58e:	8b 83       	std	Y+3, r24	; 0x03
     590:	9c 83       	std	Y+4, r25	; 0x04
     592:	2d 83       	std	Y+5, r18	; 0x05
     594:	3e 83       	std	Y+6, r19	; 0x06
     596:	4f 83       	std	Y+7, r20	; 0x07
     598:	58 87       	std	Y+8, r21	; 0x08
     59a:	e9 e0       	ldi	r30, 0x09	; 9
     59c:	ee 2e       	mov	r14, r30
     59e:	f1 2c       	mov	r15, r1
     5a0:	ec 0e       	add	r14, r28
     5a2:	fd 1e       	adc	r15, r29
     5a4:	ce 01       	movw	r24, r28
     5a6:	01 96       	adiw	r24, 0x01	; 1
     5a8:	b7 01       	movw	r22, r14
     5aa:	0e 94 02 08 	call	0x1004	; 0x1004 <__unpack_f>
     5ae:	8e 01       	movw	r16, r28
     5b0:	0f 5e       	subi	r16, 0xEF	; 239
     5b2:	1f 4f       	sbci	r17, 0xFF	; 255
     5b4:	ce 01       	movw	r24, r28
     5b6:	05 96       	adiw	r24, 0x05	; 5
     5b8:	b8 01       	movw	r22, r16
     5ba:	0e 94 02 08 	call	0x1004	; 0x1004 <__unpack_f>
     5be:	8a 89       	ldd	r24, Y+18	; 0x12
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	89 27       	eor	r24, r25
     5c4:	8a 8b       	std	Y+18, r24	; 0x12
     5c6:	c7 01       	movw	r24, r14
     5c8:	b8 01       	movw	r22, r16
     5ca:	ae 01       	movw	r20, r28
     5cc:	47 5e       	subi	r20, 0xE7	; 231
     5ce:	5f 4f       	sbci	r21, 0xFF	; 255
     5d0:	0e 94 73 01 	call	0x2e6	; 0x2e6 <_fpadd_parts>
     5d4:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__pack_f>
     5d8:	a0 96       	adiw	r28, 0x20	; 32
     5da:	e6 e0       	ldi	r30, 0x06	; 6
     5dc:	0c 94 1f 3c 	jmp	0x783e	; 0x783e <__epilogue_restores__+0x18>

000005e0 <__addsf3>:
     5e0:	a0 e2       	ldi	r26, 0x20	; 32
     5e2:	b0 e0       	ldi	r27, 0x00	; 0
     5e4:	e6 ef       	ldi	r30, 0xF6	; 246
     5e6:	f2 e0       	ldi	r31, 0x02	; 2
     5e8:	0c 94 03 3c 	jmp	0x7806	; 0x7806 <__prologue_saves__+0x18>
     5ec:	69 83       	std	Y+1, r22	; 0x01
     5ee:	7a 83       	std	Y+2, r23	; 0x02
     5f0:	8b 83       	std	Y+3, r24	; 0x03
     5f2:	9c 83       	std	Y+4, r25	; 0x04
     5f4:	2d 83       	std	Y+5, r18	; 0x05
     5f6:	3e 83       	std	Y+6, r19	; 0x06
     5f8:	4f 83       	std	Y+7, r20	; 0x07
     5fa:	58 87       	std	Y+8, r21	; 0x08
     5fc:	f9 e0       	ldi	r31, 0x09	; 9
     5fe:	ef 2e       	mov	r14, r31
     600:	f1 2c       	mov	r15, r1
     602:	ec 0e       	add	r14, r28
     604:	fd 1e       	adc	r15, r29
     606:	ce 01       	movw	r24, r28
     608:	01 96       	adiw	r24, 0x01	; 1
     60a:	b7 01       	movw	r22, r14
     60c:	0e 94 02 08 	call	0x1004	; 0x1004 <__unpack_f>
     610:	8e 01       	movw	r16, r28
     612:	0f 5e       	subi	r16, 0xEF	; 239
     614:	1f 4f       	sbci	r17, 0xFF	; 255
     616:	ce 01       	movw	r24, r28
     618:	05 96       	adiw	r24, 0x05	; 5
     61a:	b8 01       	movw	r22, r16
     61c:	0e 94 02 08 	call	0x1004	; 0x1004 <__unpack_f>
     620:	c7 01       	movw	r24, r14
     622:	b8 01       	movw	r22, r16
     624:	ae 01       	movw	r20, r28
     626:	47 5e       	subi	r20, 0xE7	; 231
     628:	5f 4f       	sbci	r21, 0xFF	; 255
     62a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <_fpadd_parts>
     62e:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__pack_f>
     632:	a0 96       	adiw	r28, 0x20	; 32
     634:	e6 e0       	ldi	r30, 0x06	; 6
     636:	0c 94 1f 3c 	jmp	0x783e	; 0x783e <__epilogue_restores__+0x18>

0000063a <__mulsf3>:
     63a:	a0 e2       	ldi	r26, 0x20	; 32
     63c:	b0 e0       	ldi	r27, 0x00	; 0
     63e:	e3 e2       	ldi	r30, 0x23	; 35
     640:	f3 e0       	ldi	r31, 0x03	; 3
     642:	0c 94 f7 3b 	jmp	0x77ee	; 0x77ee <__prologue_saves__>
     646:	69 83       	std	Y+1, r22	; 0x01
     648:	7a 83       	std	Y+2, r23	; 0x02
     64a:	8b 83       	std	Y+3, r24	; 0x03
     64c:	9c 83       	std	Y+4, r25	; 0x04
     64e:	2d 83       	std	Y+5, r18	; 0x05
     650:	3e 83       	std	Y+6, r19	; 0x06
     652:	4f 83       	std	Y+7, r20	; 0x07
     654:	58 87       	std	Y+8, r21	; 0x08
     656:	ce 01       	movw	r24, r28
     658:	01 96       	adiw	r24, 0x01	; 1
     65a:	be 01       	movw	r22, r28
     65c:	67 5f       	subi	r22, 0xF7	; 247
     65e:	7f 4f       	sbci	r23, 0xFF	; 255
     660:	0e 94 02 08 	call	0x1004	; 0x1004 <__unpack_f>
     664:	ce 01       	movw	r24, r28
     666:	05 96       	adiw	r24, 0x05	; 5
     668:	be 01       	movw	r22, r28
     66a:	6f 5e       	subi	r22, 0xEF	; 239
     66c:	7f 4f       	sbci	r23, 0xFF	; 255
     66e:	0e 94 02 08 	call	0x1004	; 0x1004 <__unpack_f>
     672:	99 85       	ldd	r25, Y+9	; 0x09
     674:	92 30       	cpi	r25, 0x02	; 2
     676:	88 f0       	brcs	.+34     	; 0x69a <__mulsf3+0x60>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	c8 f0       	brcs	.+50     	; 0x6b0 <__mulsf3+0x76>
     67e:	94 30       	cpi	r25, 0x04	; 4
     680:	19 f4       	brne	.+6      	; 0x688 <__mulsf3+0x4e>
     682:	82 30       	cpi	r24, 0x02	; 2
     684:	51 f4       	brne	.+20     	; 0x69a <__mulsf3+0x60>
     686:	04 c0       	rjmp	.+8      	; 0x690 <__mulsf3+0x56>
     688:	84 30       	cpi	r24, 0x04	; 4
     68a:	29 f4       	brne	.+10     	; 0x696 <__mulsf3+0x5c>
     68c:	92 30       	cpi	r25, 0x02	; 2
     68e:	81 f4       	brne	.+32     	; 0x6b0 <__mulsf3+0x76>
     690:	83 ec       	ldi	r24, 0xC3	; 195
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	c6 c0       	rjmp	.+396    	; 0x822 <__mulsf3+0x1e8>
     696:	92 30       	cpi	r25, 0x02	; 2
     698:	49 f4       	brne	.+18     	; 0x6ac <__mulsf3+0x72>
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	9a 85       	ldd	r25, Y+10	; 0x0a
     69e:	8a 89       	ldd	r24, Y+18	; 0x12
     6a0:	98 13       	cpse	r25, r24
     6a2:	21 e0       	ldi	r18, 0x01	; 1
     6a4:	2a 87       	std	Y+10, r18	; 0x0a
     6a6:	ce 01       	movw	r24, r28
     6a8:	09 96       	adiw	r24, 0x09	; 9
     6aa:	bb c0       	rjmp	.+374    	; 0x822 <__mulsf3+0x1e8>
     6ac:	82 30       	cpi	r24, 0x02	; 2
     6ae:	49 f4       	brne	.+18     	; 0x6c2 <__mulsf3+0x88>
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	9a 85       	ldd	r25, Y+10	; 0x0a
     6b4:	8a 89       	ldd	r24, Y+18	; 0x12
     6b6:	98 13       	cpse	r25, r24
     6b8:	21 e0       	ldi	r18, 0x01	; 1
     6ba:	2a 8b       	std	Y+18, r18	; 0x12
     6bc:	ce 01       	movw	r24, r28
     6be:	41 96       	adiw	r24, 0x11	; 17
     6c0:	b0 c0       	rjmp	.+352    	; 0x822 <__mulsf3+0x1e8>
     6c2:	2d 84       	ldd	r2, Y+13	; 0x0d
     6c4:	3e 84       	ldd	r3, Y+14	; 0x0e
     6c6:	4f 84       	ldd	r4, Y+15	; 0x0f
     6c8:	58 88       	ldd	r5, Y+16	; 0x10
     6ca:	6d 88       	ldd	r6, Y+21	; 0x15
     6cc:	7e 88       	ldd	r7, Y+22	; 0x16
     6ce:	8f 88       	ldd	r8, Y+23	; 0x17
     6d0:	98 8c       	ldd	r9, Y+24	; 0x18
     6d2:	ee 24       	eor	r14, r14
     6d4:	ff 24       	eor	r15, r15
     6d6:	87 01       	movw	r16, r14
     6d8:	aa 24       	eor	r10, r10
     6da:	bb 24       	eor	r11, r11
     6dc:	65 01       	movw	r12, r10
     6de:	40 e0       	ldi	r20, 0x00	; 0
     6e0:	50 e0       	ldi	r21, 0x00	; 0
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	70 e0       	ldi	r23, 0x00	; 0
     6e6:	e0 e0       	ldi	r30, 0x00	; 0
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	c1 01       	movw	r24, r2
     6ec:	81 70       	andi	r24, 0x01	; 1
     6ee:	90 70       	andi	r25, 0x00	; 0
     6f0:	89 2b       	or	r24, r25
     6f2:	e9 f0       	breq	.+58     	; 0x72e <__mulsf3+0xf4>
     6f4:	e6 0c       	add	r14, r6
     6f6:	f7 1c       	adc	r15, r7
     6f8:	08 1d       	adc	r16, r8
     6fa:	19 1d       	adc	r17, r9
     6fc:	9a 01       	movw	r18, r20
     6fe:	ab 01       	movw	r20, r22
     700:	2a 0d       	add	r18, r10
     702:	3b 1d       	adc	r19, r11
     704:	4c 1d       	adc	r20, r12
     706:	5d 1d       	adc	r21, r13
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	a0 e0       	ldi	r26, 0x00	; 0
     70e:	b0 e0       	ldi	r27, 0x00	; 0
     710:	e6 14       	cp	r14, r6
     712:	f7 04       	cpc	r15, r7
     714:	08 05       	cpc	r16, r8
     716:	19 05       	cpc	r17, r9
     718:	20 f4       	brcc	.+8      	; 0x722 <__mulsf3+0xe8>
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	a0 e0       	ldi	r26, 0x00	; 0
     720:	b0 e0       	ldi	r27, 0x00	; 0
     722:	ba 01       	movw	r22, r20
     724:	a9 01       	movw	r20, r18
     726:	48 0f       	add	r20, r24
     728:	59 1f       	adc	r21, r25
     72a:	6a 1f       	adc	r22, r26
     72c:	7b 1f       	adc	r23, r27
     72e:	aa 0c       	add	r10, r10
     730:	bb 1c       	adc	r11, r11
     732:	cc 1c       	adc	r12, r12
     734:	dd 1c       	adc	r13, r13
     736:	97 fe       	sbrs	r9, 7
     738:	08 c0       	rjmp	.+16     	; 0x74a <__mulsf3+0x110>
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	a0 e0       	ldi	r26, 0x00	; 0
     740:	b0 e0       	ldi	r27, 0x00	; 0
     742:	a8 2a       	or	r10, r24
     744:	b9 2a       	or	r11, r25
     746:	ca 2a       	or	r12, r26
     748:	db 2a       	or	r13, r27
     74a:	31 96       	adiw	r30, 0x01	; 1
     74c:	e0 32       	cpi	r30, 0x20	; 32
     74e:	f1 05       	cpc	r31, r1
     750:	49 f0       	breq	.+18     	; 0x764 <__mulsf3+0x12a>
     752:	66 0c       	add	r6, r6
     754:	77 1c       	adc	r7, r7
     756:	88 1c       	adc	r8, r8
     758:	99 1c       	adc	r9, r9
     75a:	56 94       	lsr	r5
     75c:	47 94       	ror	r4
     75e:	37 94       	ror	r3
     760:	27 94       	ror	r2
     762:	c3 cf       	rjmp	.-122    	; 0x6ea <__mulsf3+0xb0>
     764:	fa 85       	ldd	r31, Y+10	; 0x0a
     766:	ea 89       	ldd	r30, Y+18	; 0x12
     768:	2b 89       	ldd	r18, Y+19	; 0x13
     76a:	3c 89       	ldd	r19, Y+20	; 0x14
     76c:	8b 85       	ldd	r24, Y+11	; 0x0b
     76e:	9c 85       	ldd	r25, Y+12	; 0x0c
     770:	28 0f       	add	r18, r24
     772:	39 1f       	adc	r19, r25
     774:	2e 5f       	subi	r18, 0xFE	; 254
     776:	3f 4f       	sbci	r19, 0xFF	; 255
     778:	17 c0       	rjmp	.+46     	; 0x7a8 <__mulsf3+0x16e>
     77a:	ca 01       	movw	r24, r20
     77c:	81 70       	andi	r24, 0x01	; 1
     77e:	90 70       	andi	r25, 0x00	; 0
     780:	89 2b       	or	r24, r25
     782:	61 f0       	breq	.+24     	; 0x79c <__mulsf3+0x162>
     784:	16 95       	lsr	r17
     786:	07 95       	ror	r16
     788:	f7 94       	ror	r15
     78a:	e7 94       	ror	r14
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	a0 e0       	ldi	r26, 0x00	; 0
     792:	b0 e8       	ldi	r27, 0x80	; 128
     794:	e8 2a       	or	r14, r24
     796:	f9 2a       	or	r15, r25
     798:	0a 2b       	or	r16, r26
     79a:	1b 2b       	or	r17, r27
     79c:	76 95       	lsr	r23
     79e:	67 95       	ror	r22
     7a0:	57 95       	ror	r21
     7a2:	47 95       	ror	r20
     7a4:	2f 5f       	subi	r18, 0xFF	; 255
     7a6:	3f 4f       	sbci	r19, 0xFF	; 255
     7a8:	77 fd       	sbrc	r23, 7
     7aa:	e7 cf       	rjmp	.-50     	; 0x77a <__mulsf3+0x140>
     7ac:	0c c0       	rjmp	.+24     	; 0x7c6 <__mulsf3+0x18c>
     7ae:	44 0f       	add	r20, r20
     7b0:	55 1f       	adc	r21, r21
     7b2:	66 1f       	adc	r22, r22
     7b4:	77 1f       	adc	r23, r23
     7b6:	17 fd       	sbrc	r17, 7
     7b8:	41 60       	ori	r20, 0x01	; 1
     7ba:	ee 0c       	add	r14, r14
     7bc:	ff 1c       	adc	r15, r15
     7be:	00 1f       	adc	r16, r16
     7c0:	11 1f       	adc	r17, r17
     7c2:	21 50       	subi	r18, 0x01	; 1
     7c4:	30 40       	sbci	r19, 0x00	; 0
     7c6:	40 30       	cpi	r20, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	59 07       	cpc	r21, r25
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	69 07       	cpc	r22, r25
     7d0:	90 e4       	ldi	r25, 0x40	; 64
     7d2:	79 07       	cpc	r23, r25
     7d4:	60 f3       	brcs	.-40     	; 0x7ae <__mulsf3+0x174>
     7d6:	2b 8f       	std	Y+27, r18	; 0x1b
     7d8:	3c 8f       	std	Y+28, r19	; 0x1c
     7da:	db 01       	movw	r26, r22
     7dc:	ca 01       	movw	r24, r20
     7de:	8f 77       	andi	r24, 0x7F	; 127
     7e0:	90 70       	andi	r25, 0x00	; 0
     7e2:	a0 70       	andi	r26, 0x00	; 0
     7e4:	b0 70       	andi	r27, 0x00	; 0
     7e6:	80 34       	cpi	r24, 0x40	; 64
     7e8:	91 05       	cpc	r25, r1
     7ea:	a1 05       	cpc	r26, r1
     7ec:	b1 05       	cpc	r27, r1
     7ee:	61 f4       	brne	.+24     	; 0x808 <__mulsf3+0x1ce>
     7f0:	47 fd       	sbrc	r20, 7
     7f2:	0a c0       	rjmp	.+20     	; 0x808 <__mulsf3+0x1ce>
     7f4:	e1 14       	cp	r14, r1
     7f6:	f1 04       	cpc	r15, r1
     7f8:	01 05       	cpc	r16, r1
     7fa:	11 05       	cpc	r17, r1
     7fc:	29 f0       	breq	.+10     	; 0x808 <__mulsf3+0x1ce>
     7fe:	40 5c       	subi	r20, 0xC0	; 192
     800:	5f 4f       	sbci	r21, 0xFF	; 255
     802:	6f 4f       	sbci	r22, 0xFF	; 255
     804:	7f 4f       	sbci	r23, 0xFF	; 255
     806:	40 78       	andi	r20, 0x80	; 128
     808:	1a 8e       	std	Y+26, r1	; 0x1a
     80a:	fe 17       	cp	r31, r30
     80c:	11 f0       	breq	.+4      	; 0x812 <__mulsf3+0x1d8>
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	8a 8f       	std	Y+26, r24	; 0x1a
     812:	4d 8f       	std	Y+29, r20	; 0x1d
     814:	5e 8f       	std	Y+30, r21	; 0x1e
     816:	6f 8f       	std	Y+31, r22	; 0x1f
     818:	78 a3       	std	Y+32, r23	; 0x20
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 8f       	std	Y+25, r24	; 0x19
     81e:	ce 01       	movw	r24, r28
     820:	49 96       	adiw	r24, 0x19	; 25
     822:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__pack_f>
     826:	a0 96       	adiw	r28, 0x20	; 32
     828:	e2 e1       	ldi	r30, 0x12	; 18
     82a:	0c 94 13 3c 	jmp	0x7826	; 0x7826 <__epilogue_restores__>

0000082e <__divsf3>:
     82e:	a8 e1       	ldi	r26, 0x18	; 24
     830:	b0 e0       	ldi	r27, 0x00	; 0
     832:	ed e1       	ldi	r30, 0x1D	; 29
     834:	f4 e0       	ldi	r31, 0x04	; 4
     836:	0c 94 ff 3b 	jmp	0x77fe	; 0x77fe <__prologue_saves__+0x10>
     83a:	69 83       	std	Y+1, r22	; 0x01
     83c:	7a 83       	std	Y+2, r23	; 0x02
     83e:	8b 83       	std	Y+3, r24	; 0x03
     840:	9c 83       	std	Y+4, r25	; 0x04
     842:	2d 83       	std	Y+5, r18	; 0x05
     844:	3e 83       	std	Y+6, r19	; 0x06
     846:	4f 83       	std	Y+7, r20	; 0x07
     848:	58 87       	std	Y+8, r21	; 0x08
     84a:	b9 e0       	ldi	r27, 0x09	; 9
     84c:	eb 2e       	mov	r14, r27
     84e:	f1 2c       	mov	r15, r1
     850:	ec 0e       	add	r14, r28
     852:	fd 1e       	adc	r15, r29
     854:	ce 01       	movw	r24, r28
     856:	01 96       	adiw	r24, 0x01	; 1
     858:	b7 01       	movw	r22, r14
     85a:	0e 94 02 08 	call	0x1004	; 0x1004 <__unpack_f>
     85e:	8e 01       	movw	r16, r28
     860:	0f 5e       	subi	r16, 0xEF	; 239
     862:	1f 4f       	sbci	r17, 0xFF	; 255
     864:	ce 01       	movw	r24, r28
     866:	05 96       	adiw	r24, 0x05	; 5
     868:	b8 01       	movw	r22, r16
     86a:	0e 94 02 08 	call	0x1004	; 0x1004 <__unpack_f>
     86e:	29 85       	ldd	r18, Y+9	; 0x09
     870:	22 30       	cpi	r18, 0x02	; 2
     872:	08 f4       	brcc	.+2      	; 0x876 <__stack+0x17>
     874:	7e c0       	rjmp	.+252    	; 0x972 <__stack+0x113>
     876:	39 89       	ldd	r19, Y+17	; 0x11
     878:	32 30       	cpi	r19, 0x02	; 2
     87a:	10 f4       	brcc	.+4      	; 0x880 <__stack+0x21>
     87c:	b8 01       	movw	r22, r16
     87e:	7c c0       	rjmp	.+248    	; 0x978 <__stack+0x119>
     880:	8a 85       	ldd	r24, Y+10	; 0x0a
     882:	9a 89       	ldd	r25, Y+18	; 0x12
     884:	89 27       	eor	r24, r25
     886:	8a 87       	std	Y+10, r24	; 0x0a
     888:	24 30       	cpi	r18, 0x04	; 4
     88a:	11 f0       	breq	.+4      	; 0x890 <__stack+0x31>
     88c:	22 30       	cpi	r18, 0x02	; 2
     88e:	31 f4       	brne	.+12     	; 0x89c <__stack+0x3d>
     890:	23 17       	cp	r18, r19
     892:	09 f0       	breq	.+2      	; 0x896 <__stack+0x37>
     894:	6e c0       	rjmp	.+220    	; 0x972 <__stack+0x113>
     896:	63 ec       	ldi	r22, 0xC3	; 195
     898:	70 e0       	ldi	r23, 0x00	; 0
     89a:	6e c0       	rjmp	.+220    	; 0x978 <__stack+0x119>
     89c:	34 30       	cpi	r19, 0x04	; 4
     89e:	39 f4       	brne	.+14     	; 0x8ae <__stack+0x4f>
     8a0:	1d 86       	std	Y+13, r1	; 0x0d
     8a2:	1e 86       	std	Y+14, r1	; 0x0e
     8a4:	1f 86       	std	Y+15, r1	; 0x0f
     8a6:	18 8a       	std	Y+16, r1	; 0x10
     8a8:	1c 86       	std	Y+12, r1	; 0x0c
     8aa:	1b 86       	std	Y+11, r1	; 0x0b
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__stack+0x57>
     8ae:	32 30       	cpi	r19, 0x02	; 2
     8b0:	21 f4       	brne	.+8      	; 0x8ba <__stack+0x5b>
     8b2:	84 e0       	ldi	r24, 0x04	; 4
     8b4:	89 87       	std	Y+9, r24	; 0x09
     8b6:	b7 01       	movw	r22, r14
     8b8:	5f c0       	rjmp	.+190    	; 0x978 <__stack+0x119>
     8ba:	2b 85       	ldd	r18, Y+11	; 0x0b
     8bc:	3c 85       	ldd	r19, Y+12	; 0x0c
     8be:	8b 89       	ldd	r24, Y+19	; 0x13
     8c0:	9c 89       	ldd	r25, Y+20	; 0x14
     8c2:	28 1b       	sub	r18, r24
     8c4:	39 0b       	sbc	r19, r25
     8c6:	3c 87       	std	Y+12, r19	; 0x0c
     8c8:	2b 87       	std	Y+11, r18	; 0x0b
     8ca:	ed 84       	ldd	r14, Y+13	; 0x0d
     8cc:	fe 84       	ldd	r15, Y+14	; 0x0e
     8ce:	0f 85       	ldd	r16, Y+15	; 0x0f
     8d0:	18 89       	ldd	r17, Y+16	; 0x10
     8d2:	ad 88       	ldd	r10, Y+21	; 0x15
     8d4:	be 88       	ldd	r11, Y+22	; 0x16
     8d6:	cf 88       	ldd	r12, Y+23	; 0x17
     8d8:	d8 8c       	ldd	r13, Y+24	; 0x18
     8da:	ea 14       	cp	r14, r10
     8dc:	fb 04       	cpc	r15, r11
     8de:	0c 05       	cpc	r16, r12
     8e0:	1d 05       	cpc	r17, r13
     8e2:	40 f4       	brcc	.+16     	; 0x8f4 <__stack+0x95>
     8e4:	ee 0c       	add	r14, r14
     8e6:	ff 1c       	adc	r15, r15
     8e8:	00 1f       	adc	r16, r16
     8ea:	11 1f       	adc	r17, r17
     8ec:	21 50       	subi	r18, 0x01	; 1
     8ee:	30 40       	sbci	r19, 0x00	; 0
     8f0:	3c 87       	std	Y+12, r19	; 0x0c
     8f2:	2b 87       	std	Y+11, r18	; 0x0b
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	40 e0       	ldi	r20, 0x00	; 0
     8fa:	50 e0       	ldi	r21, 0x00	; 0
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e4       	ldi	r27, 0x40	; 64
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	70 e0       	ldi	r23, 0x00	; 0
     908:	ea 14       	cp	r14, r10
     90a:	fb 04       	cpc	r15, r11
     90c:	0c 05       	cpc	r16, r12
     90e:	1d 05       	cpc	r17, r13
     910:	40 f0       	brcs	.+16     	; 0x922 <__stack+0xc3>
     912:	28 2b       	or	r18, r24
     914:	39 2b       	or	r19, r25
     916:	4a 2b       	or	r20, r26
     918:	5b 2b       	or	r21, r27
     91a:	ea 18       	sub	r14, r10
     91c:	fb 08       	sbc	r15, r11
     91e:	0c 09       	sbc	r16, r12
     920:	1d 09       	sbc	r17, r13
     922:	b6 95       	lsr	r27
     924:	a7 95       	ror	r26
     926:	97 95       	ror	r25
     928:	87 95       	ror	r24
     92a:	ee 0c       	add	r14, r14
     92c:	ff 1c       	adc	r15, r15
     92e:	00 1f       	adc	r16, r16
     930:	11 1f       	adc	r17, r17
     932:	6f 5f       	subi	r22, 0xFF	; 255
     934:	7f 4f       	sbci	r23, 0xFF	; 255
     936:	6f 31       	cpi	r22, 0x1F	; 31
     938:	71 05       	cpc	r23, r1
     93a:	31 f7       	brne	.-52     	; 0x908 <__stack+0xa9>
     93c:	da 01       	movw	r26, r20
     93e:	c9 01       	movw	r24, r18
     940:	8f 77       	andi	r24, 0x7F	; 127
     942:	90 70       	andi	r25, 0x00	; 0
     944:	a0 70       	andi	r26, 0x00	; 0
     946:	b0 70       	andi	r27, 0x00	; 0
     948:	80 34       	cpi	r24, 0x40	; 64
     94a:	91 05       	cpc	r25, r1
     94c:	a1 05       	cpc	r26, r1
     94e:	b1 05       	cpc	r27, r1
     950:	61 f4       	brne	.+24     	; 0x96a <__stack+0x10b>
     952:	27 fd       	sbrc	r18, 7
     954:	0a c0       	rjmp	.+20     	; 0x96a <__stack+0x10b>
     956:	e1 14       	cp	r14, r1
     958:	f1 04       	cpc	r15, r1
     95a:	01 05       	cpc	r16, r1
     95c:	11 05       	cpc	r17, r1
     95e:	29 f0       	breq	.+10     	; 0x96a <__stack+0x10b>
     960:	20 5c       	subi	r18, 0xC0	; 192
     962:	3f 4f       	sbci	r19, 0xFF	; 255
     964:	4f 4f       	sbci	r20, 0xFF	; 255
     966:	5f 4f       	sbci	r21, 0xFF	; 255
     968:	20 78       	andi	r18, 0x80	; 128
     96a:	2d 87       	std	Y+13, r18	; 0x0d
     96c:	3e 87       	std	Y+14, r19	; 0x0e
     96e:	4f 87       	std	Y+15, r20	; 0x0f
     970:	58 8b       	std	Y+16, r21	; 0x10
     972:	be 01       	movw	r22, r28
     974:	67 5f       	subi	r22, 0xF7	; 247
     976:	7f 4f       	sbci	r23, 0xFF	; 255
     978:	cb 01       	movw	r24, r22
     97a:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__pack_f>
     97e:	68 96       	adiw	r28, 0x18	; 24
     980:	ea e0       	ldi	r30, 0x0A	; 10
     982:	0c 94 1b 3c 	jmp	0x7836	; 0x7836 <__epilogue_restores__+0x10>

00000986 <__eqsf2>:
     986:	a8 e1       	ldi	r26, 0x18	; 24
     988:	b0 e0       	ldi	r27, 0x00	; 0
     98a:	e9 ec       	ldi	r30, 0xC9	; 201
     98c:	f4 e0       	ldi	r31, 0x04	; 4
     98e:	0c 94 03 3c 	jmp	0x7806	; 0x7806 <__prologue_saves__+0x18>
     992:	69 83       	std	Y+1, r22	; 0x01
     994:	7a 83       	std	Y+2, r23	; 0x02
     996:	8b 83       	std	Y+3, r24	; 0x03
     998:	9c 83       	std	Y+4, r25	; 0x04
     99a:	2d 83       	std	Y+5, r18	; 0x05
     99c:	3e 83       	std	Y+6, r19	; 0x06
     99e:	4f 83       	std	Y+7, r20	; 0x07
     9a0:	58 87       	std	Y+8, r21	; 0x08
     9a2:	89 e0       	ldi	r24, 0x09	; 9
     9a4:	e8 2e       	mov	r14, r24
     9a6:	f1 2c       	mov	r15, r1
     9a8:	ec 0e       	add	r14, r28
     9aa:	fd 1e       	adc	r15, r29
     9ac:	ce 01       	movw	r24, r28
     9ae:	01 96       	adiw	r24, 0x01	; 1
     9b0:	b7 01       	movw	r22, r14
     9b2:	0e 94 02 08 	call	0x1004	; 0x1004 <__unpack_f>
     9b6:	8e 01       	movw	r16, r28
     9b8:	0f 5e       	subi	r16, 0xEF	; 239
     9ba:	1f 4f       	sbci	r17, 0xFF	; 255
     9bc:	ce 01       	movw	r24, r28
     9be:	05 96       	adiw	r24, 0x05	; 5
     9c0:	b8 01       	movw	r22, r16
     9c2:	0e 94 02 08 	call	0x1004	; 0x1004 <__unpack_f>
     9c6:	89 85       	ldd	r24, Y+9	; 0x09
     9c8:	82 30       	cpi	r24, 0x02	; 2
     9ca:	40 f0       	brcs	.+16     	; 0x9dc <__eqsf2+0x56>
     9cc:	89 89       	ldd	r24, Y+17	; 0x11
     9ce:	82 30       	cpi	r24, 0x02	; 2
     9d0:	28 f0       	brcs	.+10     	; 0x9dc <__eqsf2+0x56>
     9d2:	c7 01       	movw	r24, r14
     9d4:	b8 01       	movw	r22, r16
     9d6:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <__fpcmp_parts_f>
     9da:	01 c0       	rjmp	.+2      	; 0x9de <__eqsf2+0x58>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	68 96       	adiw	r28, 0x18	; 24
     9e0:	e6 e0       	ldi	r30, 0x06	; 6
     9e2:	0c 94 1f 3c 	jmp	0x783e	; 0x783e <__epilogue_restores__+0x18>

000009e6 <__nesf2>:
     9e6:	a8 e1       	ldi	r26, 0x18	; 24
     9e8:	b0 e0       	ldi	r27, 0x00	; 0
     9ea:	e9 ef       	ldi	r30, 0xF9	; 249
     9ec:	f4 e0       	ldi	r31, 0x04	; 4
     9ee:	0c 94 03 3c 	jmp	0x7806	; 0x7806 <__prologue_saves__+0x18>
     9f2:	69 83       	std	Y+1, r22	; 0x01
     9f4:	7a 83       	std	Y+2, r23	; 0x02
     9f6:	8b 83       	std	Y+3, r24	; 0x03
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	2d 83       	std	Y+5, r18	; 0x05
     9fc:	3e 83       	std	Y+6, r19	; 0x06
     9fe:	4f 83       	std	Y+7, r20	; 0x07
     a00:	58 87       	std	Y+8, r21	; 0x08
     a02:	89 e0       	ldi	r24, 0x09	; 9
     a04:	e8 2e       	mov	r14, r24
     a06:	f1 2c       	mov	r15, r1
     a08:	ec 0e       	add	r14, r28
     a0a:	fd 1e       	adc	r15, r29
     a0c:	ce 01       	movw	r24, r28
     a0e:	01 96       	adiw	r24, 0x01	; 1
     a10:	b7 01       	movw	r22, r14
     a12:	0e 94 02 08 	call	0x1004	; 0x1004 <__unpack_f>
     a16:	8e 01       	movw	r16, r28
     a18:	0f 5e       	subi	r16, 0xEF	; 239
     a1a:	1f 4f       	sbci	r17, 0xFF	; 255
     a1c:	ce 01       	movw	r24, r28
     a1e:	05 96       	adiw	r24, 0x05	; 5
     a20:	b8 01       	movw	r22, r16
     a22:	0e 94 02 08 	call	0x1004	; 0x1004 <__unpack_f>
     a26:	89 85       	ldd	r24, Y+9	; 0x09
     a28:	82 30       	cpi	r24, 0x02	; 2
     a2a:	40 f0       	brcs	.+16     	; 0xa3c <__nesf2+0x56>
     a2c:	89 89       	ldd	r24, Y+17	; 0x11
     a2e:	82 30       	cpi	r24, 0x02	; 2
     a30:	28 f0       	brcs	.+10     	; 0xa3c <__nesf2+0x56>
     a32:	c7 01       	movw	r24, r14
     a34:	b8 01       	movw	r22, r16
     a36:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <__fpcmp_parts_f>
     a3a:	01 c0       	rjmp	.+2      	; 0xa3e <__nesf2+0x58>
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	68 96       	adiw	r28, 0x18	; 24
     a40:	e6 e0       	ldi	r30, 0x06	; 6
     a42:	0c 94 1f 3c 	jmp	0x783e	; 0x783e <__epilogue_restores__+0x18>

00000a46 <__gtsf2>:
     a46:	a8 e1       	ldi	r26, 0x18	; 24
     a48:	b0 e0       	ldi	r27, 0x00	; 0
     a4a:	e9 e2       	ldi	r30, 0x29	; 41
     a4c:	f5 e0       	ldi	r31, 0x05	; 5
     a4e:	0c 94 03 3c 	jmp	0x7806	; 0x7806 <__prologue_saves__+0x18>
     a52:	69 83       	std	Y+1, r22	; 0x01
     a54:	7a 83       	std	Y+2, r23	; 0x02
     a56:	8b 83       	std	Y+3, r24	; 0x03
     a58:	9c 83       	std	Y+4, r25	; 0x04
     a5a:	2d 83       	std	Y+5, r18	; 0x05
     a5c:	3e 83       	std	Y+6, r19	; 0x06
     a5e:	4f 83       	std	Y+7, r20	; 0x07
     a60:	58 87       	std	Y+8, r21	; 0x08
     a62:	89 e0       	ldi	r24, 0x09	; 9
     a64:	e8 2e       	mov	r14, r24
     a66:	f1 2c       	mov	r15, r1
     a68:	ec 0e       	add	r14, r28
     a6a:	fd 1e       	adc	r15, r29
     a6c:	ce 01       	movw	r24, r28
     a6e:	01 96       	adiw	r24, 0x01	; 1
     a70:	b7 01       	movw	r22, r14
     a72:	0e 94 02 08 	call	0x1004	; 0x1004 <__unpack_f>
     a76:	8e 01       	movw	r16, r28
     a78:	0f 5e       	subi	r16, 0xEF	; 239
     a7a:	1f 4f       	sbci	r17, 0xFF	; 255
     a7c:	ce 01       	movw	r24, r28
     a7e:	05 96       	adiw	r24, 0x05	; 5
     a80:	b8 01       	movw	r22, r16
     a82:	0e 94 02 08 	call	0x1004	; 0x1004 <__unpack_f>
     a86:	89 85       	ldd	r24, Y+9	; 0x09
     a88:	82 30       	cpi	r24, 0x02	; 2
     a8a:	40 f0       	brcs	.+16     	; 0xa9c <__gtsf2+0x56>
     a8c:	89 89       	ldd	r24, Y+17	; 0x11
     a8e:	82 30       	cpi	r24, 0x02	; 2
     a90:	28 f0       	brcs	.+10     	; 0xa9c <__gtsf2+0x56>
     a92:	c7 01       	movw	r24, r14
     a94:	b8 01       	movw	r22, r16
     a96:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <__fpcmp_parts_f>
     a9a:	01 c0       	rjmp	.+2      	; 0xa9e <__gtsf2+0x58>
     a9c:	8f ef       	ldi	r24, 0xFF	; 255
     a9e:	68 96       	adiw	r28, 0x18	; 24
     aa0:	e6 e0       	ldi	r30, 0x06	; 6
     aa2:	0c 94 1f 3c 	jmp	0x783e	; 0x783e <__epilogue_restores__+0x18>

00000aa6 <__gesf2>:
     aa6:	a8 e1       	ldi	r26, 0x18	; 24
     aa8:	b0 e0       	ldi	r27, 0x00	; 0
     aaa:	e9 e5       	ldi	r30, 0x59	; 89
     aac:	f5 e0       	ldi	r31, 0x05	; 5
     aae:	0c 94 03 3c 	jmp	0x7806	; 0x7806 <__prologue_saves__+0x18>
     ab2:	69 83       	std	Y+1, r22	; 0x01
     ab4:	7a 83       	std	Y+2, r23	; 0x02
     ab6:	8b 83       	std	Y+3, r24	; 0x03
     ab8:	9c 83       	std	Y+4, r25	; 0x04
     aba:	2d 83       	std	Y+5, r18	; 0x05
     abc:	3e 83       	std	Y+6, r19	; 0x06
     abe:	4f 83       	std	Y+7, r20	; 0x07
     ac0:	58 87       	std	Y+8, r21	; 0x08
     ac2:	89 e0       	ldi	r24, 0x09	; 9
     ac4:	e8 2e       	mov	r14, r24
     ac6:	f1 2c       	mov	r15, r1
     ac8:	ec 0e       	add	r14, r28
     aca:	fd 1e       	adc	r15, r29
     acc:	ce 01       	movw	r24, r28
     ace:	01 96       	adiw	r24, 0x01	; 1
     ad0:	b7 01       	movw	r22, r14
     ad2:	0e 94 02 08 	call	0x1004	; 0x1004 <__unpack_f>
     ad6:	8e 01       	movw	r16, r28
     ad8:	0f 5e       	subi	r16, 0xEF	; 239
     ada:	1f 4f       	sbci	r17, 0xFF	; 255
     adc:	ce 01       	movw	r24, r28
     ade:	05 96       	adiw	r24, 0x05	; 5
     ae0:	b8 01       	movw	r22, r16
     ae2:	0e 94 02 08 	call	0x1004	; 0x1004 <__unpack_f>
     ae6:	89 85       	ldd	r24, Y+9	; 0x09
     ae8:	82 30       	cpi	r24, 0x02	; 2
     aea:	40 f0       	brcs	.+16     	; 0xafc <__gesf2+0x56>
     aec:	89 89       	ldd	r24, Y+17	; 0x11
     aee:	82 30       	cpi	r24, 0x02	; 2
     af0:	28 f0       	brcs	.+10     	; 0xafc <__gesf2+0x56>
     af2:	c7 01       	movw	r24, r14
     af4:	b8 01       	movw	r22, r16
     af6:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <__fpcmp_parts_f>
     afa:	01 c0       	rjmp	.+2      	; 0xafe <__gesf2+0x58>
     afc:	8f ef       	ldi	r24, 0xFF	; 255
     afe:	68 96       	adiw	r28, 0x18	; 24
     b00:	e6 e0       	ldi	r30, 0x06	; 6
     b02:	0c 94 1f 3c 	jmp	0x783e	; 0x783e <__epilogue_restores__+0x18>

00000b06 <__ltsf2>:
     b06:	a8 e1       	ldi	r26, 0x18	; 24
     b08:	b0 e0       	ldi	r27, 0x00	; 0
     b0a:	e9 e8       	ldi	r30, 0x89	; 137
     b0c:	f5 e0       	ldi	r31, 0x05	; 5
     b0e:	0c 94 03 3c 	jmp	0x7806	; 0x7806 <__prologue_saves__+0x18>
     b12:	69 83       	std	Y+1, r22	; 0x01
     b14:	7a 83       	std	Y+2, r23	; 0x02
     b16:	8b 83       	std	Y+3, r24	; 0x03
     b18:	9c 83       	std	Y+4, r25	; 0x04
     b1a:	2d 83       	std	Y+5, r18	; 0x05
     b1c:	3e 83       	std	Y+6, r19	; 0x06
     b1e:	4f 83       	std	Y+7, r20	; 0x07
     b20:	58 87       	std	Y+8, r21	; 0x08
     b22:	89 e0       	ldi	r24, 0x09	; 9
     b24:	e8 2e       	mov	r14, r24
     b26:	f1 2c       	mov	r15, r1
     b28:	ec 0e       	add	r14, r28
     b2a:	fd 1e       	adc	r15, r29
     b2c:	ce 01       	movw	r24, r28
     b2e:	01 96       	adiw	r24, 0x01	; 1
     b30:	b7 01       	movw	r22, r14
     b32:	0e 94 02 08 	call	0x1004	; 0x1004 <__unpack_f>
     b36:	8e 01       	movw	r16, r28
     b38:	0f 5e       	subi	r16, 0xEF	; 239
     b3a:	1f 4f       	sbci	r17, 0xFF	; 255
     b3c:	ce 01       	movw	r24, r28
     b3e:	05 96       	adiw	r24, 0x05	; 5
     b40:	b8 01       	movw	r22, r16
     b42:	0e 94 02 08 	call	0x1004	; 0x1004 <__unpack_f>
     b46:	89 85       	ldd	r24, Y+9	; 0x09
     b48:	82 30       	cpi	r24, 0x02	; 2
     b4a:	40 f0       	brcs	.+16     	; 0xb5c <__ltsf2+0x56>
     b4c:	89 89       	ldd	r24, Y+17	; 0x11
     b4e:	82 30       	cpi	r24, 0x02	; 2
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__ltsf2+0x56>
     b52:	c7 01       	movw	r24, r14
     b54:	b8 01       	movw	r22, r16
     b56:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <__fpcmp_parts_f>
     b5a:	01 c0       	rjmp	.+2      	; 0xb5e <__ltsf2+0x58>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	68 96       	adiw	r28, 0x18	; 24
     b60:	e6 e0       	ldi	r30, 0x06	; 6
     b62:	0c 94 1f 3c 	jmp	0x783e	; 0x783e <__epilogue_restores__+0x18>

00000b66 <__floatsisf>:
     b66:	a8 e0       	ldi	r26, 0x08	; 8
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	e9 eb       	ldi	r30, 0xB9	; 185
     b6c:	f5 e0       	ldi	r31, 0x05	; 5
     b6e:	0c 94 00 3c 	jmp	0x7800	; 0x7800 <__prologue_saves__+0x12>
     b72:	9b 01       	movw	r18, r22
     b74:	ac 01       	movw	r20, r24
     b76:	83 e0       	ldi	r24, 0x03	; 3
     b78:	89 83       	std	Y+1, r24	; 0x01
     b7a:	da 01       	movw	r26, r20
     b7c:	c9 01       	movw	r24, r18
     b7e:	88 27       	eor	r24, r24
     b80:	b7 fd       	sbrc	r27, 7
     b82:	83 95       	inc	r24
     b84:	99 27       	eor	r25, r25
     b86:	aa 27       	eor	r26, r26
     b88:	bb 27       	eor	r27, r27
     b8a:	b8 2e       	mov	r11, r24
     b8c:	21 15       	cp	r18, r1
     b8e:	31 05       	cpc	r19, r1
     b90:	41 05       	cpc	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	19 f4       	brne	.+6      	; 0xb9c <__floatsisf+0x36>
     b96:	82 e0       	ldi	r24, 0x02	; 2
     b98:	89 83       	std	Y+1, r24	; 0x01
     b9a:	3a c0       	rjmp	.+116    	; 0xc10 <__floatsisf+0xaa>
     b9c:	88 23       	and	r24, r24
     b9e:	a9 f0       	breq	.+42     	; 0xbca <__floatsisf+0x64>
     ba0:	20 30       	cpi	r18, 0x00	; 0
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	38 07       	cpc	r19, r24
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	48 07       	cpc	r20, r24
     baa:	80 e8       	ldi	r24, 0x80	; 128
     bac:	58 07       	cpc	r21, r24
     bae:	29 f4       	brne	.+10     	; 0xbba <__floatsisf+0x54>
     bb0:	60 e0       	ldi	r22, 0x00	; 0
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	9f ec       	ldi	r25, 0xCF	; 207
     bb8:	30 c0       	rjmp	.+96     	; 0xc1a <__floatsisf+0xb4>
     bba:	ee 24       	eor	r14, r14
     bbc:	ff 24       	eor	r15, r15
     bbe:	87 01       	movw	r16, r14
     bc0:	e2 1a       	sub	r14, r18
     bc2:	f3 0a       	sbc	r15, r19
     bc4:	04 0b       	sbc	r16, r20
     bc6:	15 0b       	sbc	r17, r21
     bc8:	02 c0       	rjmp	.+4      	; 0xbce <__floatsisf+0x68>
     bca:	79 01       	movw	r14, r18
     bcc:	8a 01       	movw	r16, r20
     bce:	8e e1       	ldi	r24, 0x1E	; 30
     bd0:	c8 2e       	mov	r12, r24
     bd2:	d1 2c       	mov	r13, r1
     bd4:	dc 82       	std	Y+4, r13	; 0x04
     bd6:	cb 82       	std	Y+3, r12	; 0x03
     bd8:	ed 82       	std	Y+5, r14	; 0x05
     bda:	fe 82       	std	Y+6, r15	; 0x06
     bdc:	0f 83       	std	Y+7, r16	; 0x07
     bde:	18 87       	std	Y+8, r17	; 0x08
     be0:	c8 01       	movw	r24, r16
     be2:	b7 01       	movw	r22, r14
     be4:	0e 94 de 06 	call	0xdbc	; 0xdbc <__clzsi2>
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	18 16       	cp	r1, r24
     bec:	19 06       	cpc	r1, r25
     bee:	84 f4       	brge	.+32     	; 0xc10 <__floatsisf+0xaa>
     bf0:	08 2e       	mov	r0, r24
     bf2:	04 c0       	rjmp	.+8      	; 0xbfc <__floatsisf+0x96>
     bf4:	ee 0c       	add	r14, r14
     bf6:	ff 1c       	adc	r15, r15
     bf8:	00 1f       	adc	r16, r16
     bfa:	11 1f       	adc	r17, r17
     bfc:	0a 94       	dec	r0
     bfe:	d2 f7       	brpl	.-12     	; 0xbf4 <__floatsisf+0x8e>
     c00:	ed 82       	std	Y+5, r14	; 0x05
     c02:	fe 82       	std	Y+6, r15	; 0x06
     c04:	0f 83       	std	Y+7, r16	; 0x07
     c06:	18 87       	std	Y+8, r17	; 0x08
     c08:	c8 1a       	sub	r12, r24
     c0a:	d9 0a       	sbc	r13, r25
     c0c:	dc 82       	std	Y+4, r13	; 0x04
     c0e:	cb 82       	std	Y+3, r12	; 0x03
     c10:	ba 82       	std	Y+2, r11	; 0x02
     c12:	ce 01       	movw	r24, r28
     c14:	01 96       	adiw	r24, 0x01	; 1
     c16:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__pack_f>
     c1a:	28 96       	adiw	r28, 0x08	; 8
     c1c:	e9 e0       	ldi	r30, 0x09	; 9
     c1e:	0c 94 1c 3c 	jmp	0x7838	; 0x7838 <__epilogue_restores__+0x12>

00000c22 <__fixsfsi>:
     c22:	ac e0       	ldi	r26, 0x0C	; 12
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	e7 e1       	ldi	r30, 0x17	; 23
     c28:	f6 e0       	ldi	r31, 0x06	; 6
     c2a:	0c 94 07 3c 	jmp	0x780e	; 0x780e <__prologue_saves__+0x20>
     c2e:	69 83       	std	Y+1, r22	; 0x01
     c30:	7a 83       	std	Y+2, r23	; 0x02
     c32:	8b 83       	std	Y+3, r24	; 0x03
     c34:	9c 83       	std	Y+4, r25	; 0x04
     c36:	ce 01       	movw	r24, r28
     c38:	01 96       	adiw	r24, 0x01	; 1
     c3a:	be 01       	movw	r22, r28
     c3c:	6b 5f       	subi	r22, 0xFB	; 251
     c3e:	7f 4f       	sbci	r23, 0xFF	; 255
     c40:	0e 94 02 08 	call	0x1004	; 0x1004 <__unpack_f>
     c44:	8d 81       	ldd	r24, Y+5	; 0x05
     c46:	82 30       	cpi	r24, 0x02	; 2
     c48:	61 f1       	breq	.+88     	; 0xca2 <__fixsfsi+0x80>
     c4a:	82 30       	cpi	r24, 0x02	; 2
     c4c:	50 f1       	brcs	.+84     	; 0xca2 <__fixsfsi+0x80>
     c4e:	84 30       	cpi	r24, 0x04	; 4
     c50:	21 f4       	brne	.+8      	; 0xc5a <__fixsfsi+0x38>
     c52:	8e 81       	ldd	r24, Y+6	; 0x06
     c54:	88 23       	and	r24, r24
     c56:	51 f1       	breq	.+84     	; 0xcac <__fixsfsi+0x8a>
     c58:	2e c0       	rjmp	.+92     	; 0xcb6 <__fixsfsi+0x94>
     c5a:	2f 81       	ldd	r18, Y+7	; 0x07
     c5c:	38 85       	ldd	r19, Y+8	; 0x08
     c5e:	37 fd       	sbrc	r19, 7
     c60:	20 c0       	rjmp	.+64     	; 0xca2 <__fixsfsi+0x80>
     c62:	6e 81       	ldd	r22, Y+6	; 0x06
     c64:	2f 31       	cpi	r18, 0x1F	; 31
     c66:	31 05       	cpc	r19, r1
     c68:	1c f0       	brlt	.+6      	; 0xc70 <__fixsfsi+0x4e>
     c6a:	66 23       	and	r22, r22
     c6c:	f9 f0       	breq	.+62     	; 0xcac <__fixsfsi+0x8a>
     c6e:	23 c0       	rjmp	.+70     	; 0xcb6 <__fixsfsi+0x94>
     c70:	8e e1       	ldi	r24, 0x1E	; 30
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	82 1b       	sub	r24, r18
     c76:	93 0b       	sbc	r25, r19
     c78:	29 85       	ldd	r18, Y+9	; 0x09
     c7a:	3a 85       	ldd	r19, Y+10	; 0x0a
     c7c:	4b 85       	ldd	r20, Y+11	; 0x0b
     c7e:	5c 85       	ldd	r21, Y+12	; 0x0c
     c80:	04 c0       	rjmp	.+8      	; 0xc8a <__fixsfsi+0x68>
     c82:	56 95       	lsr	r21
     c84:	47 95       	ror	r20
     c86:	37 95       	ror	r19
     c88:	27 95       	ror	r18
     c8a:	8a 95       	dec	r24
     c8c:	d2 f7       	brpl	.-12     	; 0xc82 <__fixsfsi+0x60>
     c8e:	66 23       	and	r22, r22
     c90:	b1 f0       	breq	.+44     	; 0xcbe <__fixsfsi+0x9c>
     c92:	50 95       	com	r21
     c94:	40 95       	com	r20
     c96:	30 95       	com	r19
     c98:	21 95       	neg	r18
     c9a:	3f 4f       	sbci	r19, 0xFF	; 255
     c9c:	4f 4f       	sbci	r20, 0xFF	; 255
     c9e:	5f 4f       	sbci	r21, 0xFF	; 255
     ca0:	0e c0       	rjmp	.+28     	; 0xcbe <__fixsfsi+0x9c>
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	50 e0       	ldi	r21, 0x00	; 0
     caa:	09 c0       	rjmp	.+18     	; 0xcbe <__fixsfsi+0x9c>
     cac:	2f ef       	ldi	r18, 0xFF	; 255
     cae:	3f ef       	ldi	r19, 0xFF	; 255
     cb0:	4f ef       	ldi	r20, 0xFF	; 255
     cb2:	5f e7       	ldi	r21, 0x7F	; 127
     cb4:	04 c0       	rjmp	.+8      	; 0xcbe <__fixsfsi+0x9c>
     cb6:	20 e0       	ldi	r18, 0x00	; 0
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	40 e0       	ldi	r20, 0x00	; 0
     cbc:	50 e8       	ldi	r21, 0x80	; 128
     cbe:	b9 01       	movw	r22, r18
     cc0:	ca 01       	movw	r24, r20
     cc2:	2c 96       	adiw	r28, 0x0c	; 12
     cc4:	e2 e0       	ldi	r30, 0x02	; 2
     cc6:	0c 94 23 3c 	jmp	0x7846	; 0x7846 <__epilogue_restores__+0x20>

00000cca <__floatunsisf>:
     cca:	a8 e0       	ldi	r26, 0x08	; 8
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	eb e6       	ldi	r30, 0x6B	; 107
     cd0:	f6 e0       	ldi	r31, 0x06	; 6
     cd2:	0c 94 ff 3b 	jmp	0x77fe	; 0x77fe <__prologue_saves__+0x10>
     cd6:	7b 01       	movw	r14, r22
     cd8:	8c 01       	movw	r16, r24
     cda:	61 15       	cp	r22, r1
     cdc:	71 05       	cpc	r23, r1
     cde:	81 05       	cpc	r24, r1
     ce0:	91 05       	cpc	r25, r1
     ce2:	19 f4       	brne	.+6      	; 0xcea <__floatunsisf+0x20>
     ce4:	82 e0       	ldi	r24, 0x02	; 2
     ce6:	89 83       	std	Y+1, r24	; 0x01
     ce8:	60 c0       	rjmp	.+192    	; 0xdaa <__floatunsisf+0xe0>
     cea:	83 e0       	ldi	r24, 0x03	; 3
     cec:	89 83       	std	Y+1, r24	; 0x01
     cee:	8e e1       	ldi	r24, 0x1E	; 30
     cf0:	c8 2e       	mov	r12, r24
     cf2:	d1 2c       	mov	r13, r1
     cf4:	dc 82       	std	Y+4, r13	; 0x04
     cf6:	cb 82       	std	Y+3, r12	; 0x03
     cf8:	ed 82       	std	Y+5, r14	; 0x05
     cfa:	fe 82       	std	Y+6, r15	; 0x06
     cfc:	0f 83       	std	Y+7, r16	; 0x07
     cfe:	18 87       	std	Y+8, r17	; 0x08
     d00:	c8 01       	movw	r24, r16
     d02:	b7 01       	movw	r22, r14
     d04:	0e 94 de 06 	call	0xdbc	; 0xdbc <__clzsi2>
     d08:	fc 01       	movw	r30, r24
     d0a:	31 97       	sbiw	r30, 0x01	; 1
     d0c:	f7 ff       	sbrs	r31, 7
     d0e:	3b c0       	rjmp	.+118    	; 0xd86 <__floatunsisf+0xbc>
     d10:	22 27       	eor	r18, r18
     d12:	33 27       	eor	r19, r19
     d14:	2e 1b       	sub	r18, r30
     d16:	3f 0b       	sbc	r19, r31
     d18:	57 01       	movw	r10, r14
     d1a:	68 01       	movw	r12, r16
     d1c:	02 2e       	mov	r0, r18
     d1e:	04 c0       	rjmp	.+8      	; 0xd28 <__floatunsisf+0x5e>
     d20:	d6 94       	lsr	r13
     d22:	c7 94       	ror	r12
     d24:	b7 94       	ror	r11
     d26:	a7 94       	ror	r10
     d28:	0a 94       	dec	r0
     d2a:	d2 f7       	brpl	.-12     	; 0xd20 <__floatunsisf+0x56>
     d2c:	40 e0       	ldi	r20, 0x00	; 0
     d2e:	50 e0       	ldi	r21, 0x00	; 0
     d30:	60 e0       	ldi	r22, 0x00	; 0
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	a0 e0       	ldi	r26, 0x00	; 0
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	04 c0       	rjmp	.+8      	; 0xd46 <__floatunsisf+0x7c>
     d3e:	88 0f       	add	r24, r24
     d40:	99 1f       	adc	r25, r25
     d42:	aa 1f       	adc	r26, r26
     d44:	bb 1f       	adc	r27, r27
     d46:	2a 95       	dec	r18
     d48:	d2 f7       	brpl	.-12     	; 0xd3e <__floatunsisf+0x74>
     d4a:	01 97       	sbiw	r24, 0x01	; 1
     d4c:	a1 09       	sbc	r26, r1
     d4e:	b1 09       	sbc	r27, r1
     d50:	8e 21       	and	r24, r14
     d52:	9f 21       	and	r25, r15
     d54:	a0 23       	and	r26, r16
     d56:	b1 23       	and	r27, r17
     d58:	00 97       	sbiw	r24, 0x00	; 0
     d5a:	a1 05       	cpc	r26, r1
     d5c:	b1 05       	cpc	r27, r1
     d5e:	21 f0       	breq	.+8      	; 0xd68 <__floatunsisf+0x9e>
     d60:	41 e0       	ldi	r20, 0x01	; 1
     d62:	50 e0       	ldi	r21, 0x00	; 0
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	4a 29       	or	r20, r10
     d6a:	5b 29       	or	r21, r11
     d6c:	6c 29       	or	r22, r12
     d6e:	7d 29       	or	r23, r13
     d70:	4d 83       	std	Y+5, r20	; 0x05
     d72:	5e 83       	std	Y+6, r21	; 0x06
     d74:	6f 83       	std	Y+7, r22	; 0x07
     d76:	78 87       	std	Y+8, r23	; 0x08
     d78:	8e e1       	ldi	r24, 0x1E	; 30
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	8e 1b       	sub	r24, r30
     d7e:	9f 0b       	sbc	r25, r31
     d80:	9c 83       	std	Y+4, r25	; 0x04
     d82:	8b 83       	std	Y+3, r24	; 0x03
     d84:	12 c0       	rjmp	.+36     	; 0xdaa <__floatunsisf+0xe0>
     d86:	30 97       	sbiw	r30, 0x00	; 0
     d88:	81 f0       	breq	.+32     	; 0xdaa <__floatunsisf+0xe0>
     d8a:	0e 2e       	mov	r0, r30
     d8c:	04 c0       	rjmp	.+8      	; 0xd96 <__floatunsisf+0xcc>
     d8e:	ee 0c       	add	r14, r14
     d90:	ff 1c       	adc	r15, r15
     d92:	00 1f       	adc	r16, r16
     d94:	11 1f       	adc	r17, r17
     d96:	0a 94       	dec	r0
     d98:	d2 f7       	brpl	.-12     	; 0xd8e <__floatunsisf+0xc4>
     d9a:	ed 82       	std	Y+5, r14	; 0x05
     d9c:	fe 82       	std	Y+6, r15	; 0x06
     d9e:	0f 83       	std	Y+7, r16	; 0x07
     da0:	18 87       	std	Y+8, r17	; 0x08
     da2:	ce 1a       	sub	r12, r30
     da4:	df 0a       	sbc	r13, r31
     da6:	dc 82       	std	Y+4, r13	; 0x04
     da8:	cb 82       	std	Y+3, r12	; 0x03
     daa:	1a 82       	std	Y+2, r1	; 0x02
     dac:	ce 01       	movw	r24, r28
     dae:	01 96       	adiw	r24, 0x01	; 1
     db0:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__pack_f>
     db4:	28 96       	adiw	r28, 0x08	; 8
     db6:	ea e0       	ldi	r30, 0x0A	; 10
     db8:	0c 94 1b 3c 	jmp	0x7836	; 0x7836 <__epilogue_restores__+0x10>

00000dbc <__clzsi2>:
     dbc:	ef 92       	push	r14
     dbe:	ff 92       	push	r15
     dc0:	0f 93       	push	r16
     dc2:	1f 93       	push	r17
     dc4:	7b 01       	movw	r14, r22
     dc6:	8c 01       	movw	r16, r24
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	e8 16       	cp	r14, r24
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	f8 06       	cpc	r15, r24
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	08 07       	cpc	r16, r24
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	18 07       	cpc	r17, r24
     dd8:	88 f4       	brcc	.+34     	; 0xdfc <__clzsi2+0x40>
     dda:	8f ef       	ldi	r24, 0xFF	; 255
     ddc:	e8 16       	cp	r14, r24
     dde:	f1 04       	cpc	r15, r1
     de0:	01 05       	cpc	r16, r1
     de2:	11 05       	cpc	r17, r1
     de4:	31 f0       	breq	.+12     	; 0xdf2 <__clzsi2+0x36>
     de6:	28 f0       	brcs	.+10     	; 0xdf2 <__clzsi2+0x36>
     de8:	88 e0       	ldi	r24, 0x08	; 8
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	a0 e0       	ldi	r26, 0x00	; 0
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	17 c0       	rjmp	.+46     	; 0xe20 <__clzsi2+0x64>
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	a0 e0       	ldi	r26, 0x00	; 0
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	12 c0       	rjmp	.+36     	; 0xe20 <__clzsi2+0x64>
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	e8 16       	cp	r14, r24
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	f8 06       	cpc	r15, r24
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	08 07       	cpc	r16, r24
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	18 07       	cpc	r17, r24
     e0c:	28 f0       	brcs	.+10     	; 0xe18 <__clzsi2+0x5c>
     e0e:	88 e1       	ldi	r24, 0x18	; 24
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	a0 e0       	ldi	r26, 0x00	; 0
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	04 c0       	rjmp	.+8      	; 0xe20 <__clzsi2+0x64>
     e18:	80 e1       	ldi	r24, 0x10	; 16
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	a0 e0       	ldi	r26, 0x00	; 0
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	20 e2       	ldi	r18, 0x20	; 32
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	40 e0       	ldi	r20, 0x00	; 0
     e26:	50 e0       	ldi	r21, 0x00	; 0
     e28:	28 1b       	sub	r18, r24
     e2a:	39 0b       	sbc	r19, r25
     e2c:	4a 0b       	sbc	r20, r26
     e2e:	5b 0b       	sbc	r21, r27
     e30:	04 c0       	rjmp	.+8      	; 0xe3a <__clzsi2+0x7e>
     e32:	16 95       	lsr	r17
     e34:	07 95       	ror	r16
     e36:	f7 94       	ror	r15
     e38:	e7 94       	ror	r14
     e3a:	8a 95       	dec	r24
     e3c:	d2 f7       	brpl	.-12     	; 0xe32 <__clzsi2+0x76>
     e3e:	f7 01       	movw	r30, r14
     e40:	e5 53       	subi	r30, 0x35	; 53
     e42:	ff 4f       	sbci	r31, 0xFF	; 255
     e44:	80 81       	ld	r24, Z
     e46:	28 1b       	sub	r18, r24
     e48:	31 09       	sbc	r19, r1
     e4a:	41 09       	sbc	r20, r1
     e4c:	51 09       	sbc	r21, r1
     e4e:	c9 01       	movw	r24, r18
     e50:	1f 91       	pop	r17
     e52:	0f 91       	pop	r16
     e54:	ff 90       	pop	r15
     e56:	ef 90       	pop	r14
     e58:	08 95       	ret

00000e5a <__pack_f>:
     e5a:	df 92       	push	r13
     e5c:	ef 92       	push	r14
     e5e:	ff 92       	push	r15
     e60:	0f 93       	push	r16
     e62:	1f 93       	push	r17
     e64:	fc 01       	movw	r30, r24
     e66:	e4 80       	ldd	r14, Z+4	; 0x04
     e68:	f5 80       	ldd	r15, Z+5	; 0x05
     e6a:	06 81       	ldd	r16, Z+6	; 0x06
     e6c:	17 81       	ldd	r17, Z+7	; 0x07
     e6e:	d1 80       	ldd	r13, Z+1	; 0x01
     e70:	80 81       	ld	r24, Z
     e72:	82 30       	cpi	r24, 0x02	; 2
     e74:	48 f4       	brcc	.+18     	; 0xe88 <__pack_f+0x2e>
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	a0 e1       	ldi	r26, 0x10	; 16
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e8 2a       	or	r14, r24
     e80:	f9 2a       	or	r15, r25
     e82:	0a 2b       	or	r16, r26
     e84:	1b 2b       	or	r17, r27
     e86:	a5 c0       	rjmp	.+330    	; 0xfd2 <__pack_f+0x178>
     e88:	84 30       	cpi	r24, 0x04	; 4
     e8a:	09 f4       	brne	.+2      	; 0xe8e <__pack_f+0x34>
     e8c:	9f c0       	rjmp	.+318    	; 0xfcc <__pack_f+0x172>
     e8e:	82 30       	cpi	r24, 0x02	; 2
     e90:	21 f4       	brne	.+8      	; 0xe9a <__pack_f+0x40>
     e92:	ee 24       	eor	r14, r14
     e94:	ff 24       	eor	r15, r15
     e96:	87 01       	movw	r16, r14
     e98:	05 c0       	rjmp	.+10     	; 0xea4 <__pack_f+0x4a>
     e9a:	e1 14       	cp	r14, r1
     e9c:	f1 04       	cpc	r15, r1
     e9e:	01 05       	cpc	r16, r1
     ea0:	11 05       	cpc	r17, r1
     ea2:	19 f4       	brne	.+6      	; 0xeaa <__pack_f+0x50>
     ea4:	e0 e0       	ldi	r30, 0x00	; 0
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	96 c0       	rjmp	.+300    	; 0xfd6 <__pack_f+0x17c>
     eaa:	62 81       	ldd	r22, Z+2	; 0x02
     eac:	73 81       	ldd	r23, Z+3	; 0x03
     eae:	9f ef       	ldi	r25, 0xFF	; 255
     eb0:	62 38       	cpi	r22, 0x82	; 130
     eb2:	79 07       	cpc	r23, r25
     eb4:	0c f0       	brlt	.+2      	; 0xeb8 <__pack_f+0x5e>
     eb6:	5b c0       	rjmp	.+182    	; 0xf6e <__pack_f+0x114>
     eb8:	22 e8       	ldi	r18, 0x82	; 130
     eba:	3f ef       	ldi	r19, 0xFF	; 255
     ebc:	26 1b       	sub	r18, r22
     ebe:	37 0b       	sbc	r19, r23
     ec0:	2a 31       	cpi	r18, 0x1A	; 26
     ec2:	31 05       	cpc	r19, r1
     ec4:	2c f0       	brlt	.+10     	; 0xed0 <__pack_f+0x76>
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	40 e0       	ldi	r20, 0x00	; 0
     ecc:	50 e0       	ldi	r21, 0x00	; 0
     ece:	2a c0       	rjmp	.+84     	; 0xf24 <__pack_f+0xca>
     ed0:	b8 01       	movw	r22, r16
     ed2:	a7 01       	movw	r20, r14
     ed4:	02 2e       	mov	r0, r18
     ed6:	04 c0       	rjmp	.+8      	; 0xee0 <__pack_f+0x86>
     ed8:	76 95       	lsr	r23
     eda:	67 95       	ror	r22
     edc:	57 95       	ror	r21
     ede:	47 95       	ror	r20
     ee0:	0a 94       	dec	r0
     ee2:	d2 f7       	brpl	.-12     	; 0xed8 <__pack_f+0x7e>
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	a0 e0       	ldi	r26, 0x00	; 0
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	04 c0       	rjmp	.+8      	; 0xef6 <__pack_f+0x9c>
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	aa 1f       	adc	r26, r26
     ef4:	bb 1f       	adc	r27, r27
     ef6:	2a 95       	dec	r18
     ef8:	d2 f7       	brpl	.-12     	; 0xeee <__pack_f+0x94>
     efa:	01 97       	sbiw	r24, 0x01	; 1
     efc:	a1 09       	sbc	r26, r1
     efe:	b1 09       	sbc	r27, r1
     f00:	8e 21       	and	r24, r14
     f02:	9f 21       	and	r25, r15
     f04:	a0 23       	and	r26, r16
     f06:	b1 23       	and	r27, r17
     f08:	00 97       	sbiw	r24, 0x00	; 0
     f0a:	a1 05       	cpc	r26, r1
     f0c:	b1 05       	cpc	r27, r1
     f0e:	21 f0       	breq	.+8      	; 0xf18 <__pack_f+0xbe>
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	a0 e0       	ldi	r26, 0x00	; 0
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	9a 01       	movw	r18, r20
     f1a:	ab 01       	movw	r20, r22
     f1c:	28 2b       	or	r18, r24
     f1e:	39 2b       	or	r19, r25
     f20:	4a 2b       	or	r20, r26
     f22:	5b 2b       	or	r21, r27
     f24:	da 01       	movw	r26, r20
     f26:	c9 01       	movw	r24, r18
     f28:	8f 77       	andi	r24, 0x7F	; 127
     f2a:	90 70       	andi	r25, 0x00	; 0
     f2c:	a0 70       	andi	r26, 0x00	; 0
     f2e:	b0 70       	andi	r27, 0x00	; 0
     f30:	80 34       	cpi	r24, 0x40	; 64
     f32:	91 05       	cpc	r25, r1
     f34:	a1 05       	cpc	r26, r1
     f36:	b1 05       	cpc	r27, r1
     f38:	39 f4       	brne	.+14     	; 0xf48 <__pack_f+0xee>
     f3a:	27 ff       	sbrs	r18, 7
     f3c:	09 c0       	rjmp	.+18     	; 0xf50 <__pack_f+0xf6>
     f3e:	20 5c       	subi	r18, 0xC0	; 192
     f40:	3f 4f       	sbci	r19, 0xFF	; 255
     f42:	4f 4f       	sbci	r20, 0xFF	; 255
     f44:	5f 4f       	sbci	r21, 0xFF	; 255
     f46:	04 c0       	rjmp	.+8      	; 0xf50 <__pack_f+0xf6>
     f48:	21 5c       	subi	r18, 0xC1	; 193
     f4a:	3f 4f       	sbci	r19, 0xFF	; 255
     f4c:	4f 4f       	sbci	r20, 0xFF	; 255
     f4e:	5f 4f       	sbci	r21, 0xFF	; 255
     f50:	e0 e0       	ldi	r30, 0x00	; 0
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	20 30       	cpi	r18, 0x00	; 0
     f56:	a0 e0       	ldi	r26, 0x00	; 0
     f58:	3a 07       	cpc	r19, r26
     f5a:	a0 e0       	ldi	r26, 0x00	; 0
     f5c:	4a 07       	cpc	r20, r26
     f5e:	a0 e4       	ldi	r26, 0x40	; 64
     f60:	5a 07       	cpc	r21, r26
     f62:	10 f0       	brcs	.+4      	; 0xf68 <__pack_f+0x10e>
     f64:	e1 e0       	ldi	r30, 0x01	; 1
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	79 01       	movw	r14, r18
     f6a:	8a 01       	movw	r16, r20
     f6c:	27 c0       	rjmp	.+78     	; 0xfbc <__pack_f+0x162>
     f6e:	60 38       	cpi	r22, 0x80	; 128
     f70:	71 05       	cpc	r23, r1
     f72:	64 f5       	brge	.+88     	; 0xfcc <__pack_f+0x172>
     f74:	fb 01       	movw	r30, r22
     f76:	e1 58       	subi	r30, 0x81	; 129
     f78:	ff 4f       	sbci	r31, 0xFF	; 255
     f7a:	d8 01       	movw	r26, r16
     f7c:	c7 01       	movw	r24, r14
     f7e:	8f 77       	andi	r24, 0x7F	; 127
     f80:	90 70       	andi	r25, 0x00	; 0
     f82:	a0 70       	andi	r26, 0x00	; 0
     f84:	b0 70       	andi	r27, 0x00	; 0
     f86:	80 34       	cpi	r24, 0x40	; 64
     f88:	91 05       	cpc	r25, r1
     f8a:	a1 05       	cpc	r26, r1
     f8c:	b1 05       	cpc	r27, r1
     f8e:	39 f4       	brne	.+14     	; 0xf9e <__pack_f+0x144>
     f90:	e7 fe       	sbrs	r14, 7
     f92:	0d c0       	rjmp	.+26     	; 0xfae <__pack_f+0x154>
     f94:	80 e4       	ldi	r24, 0x40	; 64
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a0 e0       	ldi	r26, 0x00	; 0
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	04 c0       	rjmp	.+8      	; 0xfa6 <__pack_f+0x14c>
     f9e:	8f e3       	ldi	r24, 0x3F	; 63
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	a0 e0       	ldi	r26, 0x00	; 0
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e8 0e       	add	r14, r24
     fa8:	f9 1e       	adc	r15, r25
     faa:	0a 1f       	adc	r16, r26
     fac:	1b 1f       	adc	r17, r27
     fae:	17 ff       	sbrs	r17, 7
     fb0:	05 c0       	rjmp	.+10     	; 0xfbc <__pack_f+0x162>
     fb2:	16 95       	lsr	r17
     fb4:	07 95       	ror	r16
     fb6:	f7 94       	ror	r15
     fb8:	e7 94       	ror	r14
     fba:	31 96       	adiw	r30, 0x01	; 1
     fbc:	87 e0       	ldi	r24, 0x07	; 7
     fbe:	16 95       	lsr	r17
     fc0:	07 95       	ror	r16
     fc2:	f7 94       	ror	r15
     fc4:	e7 94       	ror	r14
     fc6:	8a 95       	dec	r24
     fc8:	d1 f7       	brne	.-12     	; 0xfbe <__pack_f+0x164>
     fca:	05 c0       	rjmp	.+10     	; 0xfd6 <__pack_f+0x17c>
     fcc:	ee 24       	eor	r14, r14
     fce:	ff 24       	eor	r15, r15
     fd0:	87 01       	movw	r16, r14
     fd2:	ef ef       	ldi	r30, 0xFF	; 255
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	6e 2f       	mov	r22, r30
     fd8:	67 95       	ror	r22
     fda:	66 27       	eor	r22, r22
     fdc:	67 95       	ror	r22
     fde:	90 2f       	mov	r25, r16
     fe0:	9f 77       	andi	r25, 0x7F	; 127
     fe2:	d7 94       	ror	r13
     fe4:	dd 24       	eor	r13, r13
     fe6:	d7 94       	ror	r13
     fe8:	8e 2f       	mov	r24, r30
     fea:	86 95       	lsr	r24
     fec:	49 2f       	mov	r20, r25
     fee:	46 2b       	or	r20, r22
     ff0:	58 2f       	mov	r21, r24
     ff2:	5d 29       	or	r21, r13
     ff4:	b7 01       	movw	r22, r14
     ff6:	ca 01       	movw	r24, r20
     ff8:	1f 91       	pop	r17
     ffa:	0f 91       	pop	r16
     ffc:	ff 90       	pop	r15
     ffe:	ef 90       	pop	r14
    1000:	df 90       	pop	r13
    1002:	08 95       	ret

00001004 <__unpack_f>:
    1004:	fc 01       	movw	r30, r24
    1006:	db 01       	movw	r26, r22
    1008:	40 81       	ld	r20, Z
    100a:	51 81       	ldd	r21, Z+1	; 0x01
    100c:	22 81       	ldd	r18, Z+2	; 0x02
    100e:	62 2f       	mov	r22, r18
    1010:	6f 77       	andi	r22, 0x7F	; 127
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	22 1f       	adc	r18, r18
    1016:	22 27       	eor	r18, r18
    1018:	22 1f       	adc	r18, r18
    101a:	93 81       	ldd	r25, Z+3	; 0x03
    101c:	89 2f       	mov	r24, r25
    101e:	88 0f       	add	r24, r24
    1020:	82 2b       	or	r24, r18
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	99 1f       	adc	r25, r25
    1028:	99 27       	eor	r25, r25
    102a:	99 1f       	adc	r25, r25
    102c:	11 96       	adiw	r26, 0x01	; 1
    102e:	9c 93       	st	X, r25
    1030:	11 97       	sbiw	r26, 0x01	; 1
    1032:	21 15       	cp	r18, r1
    1034:	31 05       	cpc	r19, r1
    1036:	a9 f5       	brne	.+106    	; 0x10a2 <__unpack_f+0x9e>
    1038:	41 15       	cp	r20, r1
    103a:	51 05       	cpc	r21, r1
    103c:	61 05       	cpc	r22, r1
    103e:	71 05       	cpc	r23, r1
    1040:	11 f4       	brne	.+4      	; 0x1046 <__unpack_f+0x42>
    1042:	82 e0       	ldi	r24, 0x02	; 2
    1044:	37 c0       	rjmp	.+110    	; 0x10b4 <__unpack_f+0xb0>
    1046:	82 e8       	ldi	r24, 0x82	; 130
    1048:	9f ef       	ldi	r25, 0xFF	; 255
    104a:	13 96       	adiw	r26, 0x03	; 3
    104c:	9c 93       	st	X, r25
    104e:	8e 93       	st	-X, r24
    1050:	12 97       	sbiw	r26, 0x02	; 2
    1052:	9a 01       	movw	r18, r20
    1054:	ab 01       	movw	r20, r22
    1056:	67 e0       	ldi	r22, 0x07	; 7
    1058:	22 0f       	add	r18, r18
    105a:	33 1f       	adc	r19, r19
    105c:	44 1f       	adc	r20, r20
    105e:	55 1f       	adc	r21, r21
    1060:	6a 95       	dec	r22
    1062:	d1 f7       	brne	.-12     	; 0x1058 <__unpack_f+0x54>
    1064:	83 e0       	ldi	r24, 0x03	; 3
    1066:	8c 93       	st	X, r24
    1068:	0d c0       	rjmp	.+26     	; 0x1084 <__unpack_f+0x80>
    106a:	22 0f       	add	r18, r18
    106c:	33 1f       	adc	r19, r19
    106e:	44 1f       	adc	r20, r20
    1070:	55 1f       	adc	r21, r21
    1072:	12 96       	adiw	r26, 0x02	; 2
    1074:	8d 91       	ld	r24, X+
    1076:	9c 91       	ld	r25, X
    1078:	13 97       	sbiw	r26, 0x03	; 3
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	13 96       	adiw	r26, 0x03	; 3
    107e:	9c 93       	st	X, r25
    1080:	8e 93       	st	-X, r24
    1082:	12 97       	sbiw	r26, 0x02	; 2
    1084:	20 30       	cpi	r18, 0x00	; 0
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	38 07       	cpc	r19, r24
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	48 07       	cpc	r20, r24
    108e:	80 e4       	ldi	r24, 0x40	; 64
    1090:	58 07       	cpc	r21, r24
    1092:	58 f3       	brcs	.-42     	; 0x106a <__unpack_f+0x66>
    1094:	14 96       	adiw	r26, 0x04	; 4
    1096:	2d 93       	st	X+, r18
    1098:	3d 93       	st	X+, r19
    109a:	4d 93       	st	X+, r20
    109c:	5c 93       	st	X, r21
    109e:	17 97       	sbiw	r26, 0x07	; 7
    10a0:	08 95       	ret
    10a2:	2f 3f       	cpi	r18, 0xFF	; 255
    10a4:	31 05       	cpc	r19, r1
    10a6:	79 f4       	brne	.+30     	; 0x10c6 <__unpack_f+0xc2>
    10a8:	41 15       	cp	r20, r1
    10aa:	51 05       	cpc	r21, r1
    10ac:	61 05       	cpc	r22, r1
    10ae:	71 05       	cpc	r23, r1
    10b0:	19 f4       	brne	.+6      	; 0x10b8 <__unpack_f+0xb4>
    10b2:	84 e0       	ldi	r24, 0x04	; 4
    10b4:	8c 93       	st	X, r24
    10b6:	08 95       	ret
    10b8:	64 ff       	sbrs	r22, 4
    10ba:	03 c0       	rjmp	.+6      	; 0x10c2 <__unpack_f+0xbe>
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	8c 93       	st	X, r24
    10c0:	12 c0       	rjmp	.+36     	; 0x10e6 <__unpack_f+0xe2>
    10c2:	1c 92       	st	X, r1
    10c4:	10 c0       	rjmp	.+32     	; 0x10e6 <__unpack_f+0xe2>
    10c6:	2f 57       	subi	r18, 0x7F	; 127
    10c8:	30 40       	sbci	r19, 0x00	; 0
    10ca:	13 96       	adiw	r26, 0x03	; 3
    10cc:	3c 93       	st	X, r19
    10ce:	2e 93       	st	-X, r18
    10d0:	12 97       	sbiw	r26, 0x02	; 2
    10d2:	83 e0       	ldi	r24, 0x03	; 3
    10d4:	8c 93       	st	X, r24
    10d6:	87 e0       	ldi	r24, 0x07	; 7
    10d8:	44 0f       	add	r20, r20
    10da:	55 1f       	adc	r21, r21
    10dc:	66 1f       	adc	r22, r22
    10de:	77 1f       	adc	r23, r23
    10e0:	8a 95       	dec	r24
    10e2:	d1 f7       	brne	.-12     	; 0x10d8 <__unpack_f+0xd4>
    10e4:	70 64       	ori	r23, 0x40	; 64
    10e6:	14 96       	adiw	r26, 0x04	; 4
    10e8:	4d 93       	st	X+, r20
    10ea:	5d 93       	st	X+, r21
    10ec:	6d 93       	st	X+, r22
    10ee:	7c 93       	st	X, r23
    10f0:	17 97       	sbiw	r26, 0x07	; 7
    10f2:	08 95       	ret

000010f4 <__fpcmp_parts_f>:
    10f4:	1f 93       	push	r17
    10f6:	dc 01       	movw	r26, r24
    10f8:	fb 01       	movw	r30, r22
    10fa:	9c 91       	ld	r25, X
    10fc:	92 30       	cpi	r25, 0x02	; 2
    10fe:	08 f4       	brcc	.+2      	; 0x1102 <__fpcmp_parts_f+0xe>
    1100:	47 c0       	rjmp	.+142    	; 0x1190 <__fpcmp_parts_f+0x9c>
    1102:	80 81       	ld	r24, Z
    1104:	82 30       	cpi	r24, 0x02	; 2
    1106:	08 f4       	brcc	.+2      	; 0x110a <__fpcmp_parts_f+0x16>
    1108:	43 c0       	rjmp	.+134    	; 0x1190 <__fpcmp_parts_f+0x9c>
    110a:	94 30       	cpi	r25, 0x04	; 4
    110c:	51 f4       	brne	.+20     	; 0x1122 <__fpcmp_parts_f+0x2e>
    110e:	11 96       	adiw	r26, 0x01	; 1
    1110:	1c 91       	ld	r17, X
    1112:	84 30       	cpi	r24, 0x04	; 4
    1114:	99 f5       	brne	.+102    	; 0x117c <__fpcmp_parts_f+0x88>
    1116:	81 81       	ldd	r24, Z+1	; 0x01
    1118:	68 2f       	mov	r22, r24
    111a:	70 e0       	ldi	r23, 0x00	; 0
    111c:	61 1b       	sub	r22, r17
    111e:	71 09       	sbc	r23, r1
    1120:	3f c0       	rjmp	.+126    	; 0x11a0 <__fpcmp_parts_f+0xac>
    1122:	84 30       	cpi	r24, 0x04	; 4
    1124:	21 f0       	breq	.+8      	; 0x112e <__fpcmp_parts_f+0x3a>
    1126:	92 30       	cpi	r25, 0x02	; 2
    1128:	31 f4       	brne	.+12     	; 0x1136 <__fpcmp_parts_f+0x42>
    112a:	82 30       	cpi	r24, 0x02	; 2
    112c:	b9 f1       	breq	.+110    	; 0x119c <__fpcmp_parts_f+0xa8>
    112e:	81 81       	ldd	r24, Z+1	; 0x01
    1130:	88 23       	and	r24, r24
    1132:	89 f1       	breq	.+98     	; 0x1196 <__fpcmp_parts_f+0xa2>
    1134:	2d c0       	rjmp	.+90     	; 0x1190 <__fpcmp_parts_f+0x9c>
    1136:	11 96       	adiw	r26, 0x01	; 1
    1138:	1c 91       	ld	r17, X
    113a:	11 97       	sbiw	r26, 0x01	; 1
    113c:	82 30       	cpi	r24, 0x02	; 2
    113e:	f1 f0       	breq	.+60     	; 0x117c <__fpcmp_parts_f+0x88>
    1140:	81 81       	ldd	r24, Z+1	; 0x01
    1142:	18 17       	cp	r17, r24
    1144:	d9 f4       	brne	.+54     	; 0x117c <__fpcmp_parts_f+0x88>
    1146:	12 96       	adiw	r26, 0x02	; 2
    1148:	2d 91       	ld	r18, X+
    114a:	3c 91       	ld	r19, X
    114c:	13 97       	sbiw	r26, 0x03	; 3
    114e:	82 81       	ldd	r24, Z+2	; 0x02
    1150:	93 81       	ldd	r25, Z+3	; 0x03
    1152:	82 17       	cp	r24, r18
    1154:	93 07       	cpc	r25, r19
    1156:	94 f0       	brlt	.+36     	; 0x117c <__fpcmp_parts_f+0x88>
    1158:	28 17       	cp	r18, r24
    115a:	39 07       	cpc	r19, r25
    115c:	bc f0       	brlt	.+46     	; 0x118c <__fpcmp_parts_f+0x98>
    115e:	14 96       	adiw	r26, 0x04	; 4
    1160:	8d 91       	ld	r24, X+
    1162:	9d 91       	ld	r25, X+
    1164:	0d 90       	ld	r0, X+
    1166:	bc 91       	ld	r27, X
    1168:	a0 2d       	mov	r26, r0
    116a:	24 81       	ldd	r18, Z+4	; 0x04
    116c:	35 81       	ldd	r19, Z+5	; 0x05
    116e:	46 81       	ldd	r20, Z+6	; 0x06
    1170:	57 81       	ldd	r21, Z+7	; 0x07
    1172:	28 17       	cp	r18, r24
    1174:	39 07       	cpc	r19, r25
    1176:	4a 07       	cpc	r20, r26
    1178:	5b 07       	cpc	r21, r27
    117a:	18 f4       	brcc	.+6      	; 0x1182 <__fpcmp_parts_f+0x8e>
    117c:	11 23       	and	r17, r17
    117e:	41 f0       	breq	.+16     	; 0x1190 <__fpcmp_parts_f+0x9c>
    1180:	0a c0       	rjmp	.+20     	; 0x1196 <__fpcmp_parts_f+0xa2>
    1182:	82 17       	cp	r24, r18
    1184:	93 07       	cpc	r25, r19
    1186:	a4 07       	cpc	r26, r20
    1188:	b5 07       	cpc	r27, r21
    118a:	40 f4       	brcc	.+16     	; 0x119c <__fpcmp_parts_f+0xa8>
    118c:	11 23       	and	r17, r17
    118e:	19 f0       	breq	.+6      	; 0x1196 <__fpcmp_parts_f+0xa2>
    1190:	61 e0       	ldi	r22, 0x01	; 1
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	05 c0       	rjmp	.+10     	; 0x11a0 <__fpcmp_parts_f+0xac>
    1196:	6f ef       	ldi	r22, 0xFF	; 255
    1198:	7f ef       	ldi	r23, 0xFF	; 255
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <__fpcmp_parts_f+0xac>
    119c:	60 e0       	ldi	r22, 0x00	; 0
    119e:	70 e0       	ldi	r23, 0x00	; 0
    11a0:	cb 01       	movw	r24, r22
    11a2:	1f 91       	pop	r17
    11a4:	08 95       	ret

000011a6 <Local_Clear>:
f32 Global_f32mode = 1;
u8  Global_u8Shift=0;
s8 y;

void Local_Clear(void)
{
    11a6:	df 93       	push	r29
    11a8:	cf 93       	push	r28
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
	Global_f32Num = 0;
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	a0 e0       	ldi	r26, 0x00	; 0
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	80 93 6e 02 	sts	0x026E, r24
    11ba:	90 93 6f 02 	sts	0x026F, r25
    11be:	a0 93 70 02 	sts	0x0270, r26
    11c2:	b0 93 71 02 	sts	0x0271, r27
	Global_u8Cnt=1;
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	80 93 f0 01 	sts	0x01F0, r24
	Local_u8It1 =0;
    11cc:	10 92 6c 02 	sts	0x026C, r1
	Local_u8It2 =0;
    11d0:	10 92 6d 02 	sts	0x026D, r1
	Global_u8ShiftCnt = 0;
    11d4:	10 92 78 02 	sts	0x0278, r1
	Global_u16FLAGS = 2;
    11d8:	82 e0       	ldi	r24, 0x02	; 2
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	90 93 f2 01 	sts	0x01F2, r25
    11e0:	80 93 f1 01 	sts	0x01F1, r24
	Global_u16HYP = 0;
    11e4:	10 92 73 02 	sts	0x0273, r1
    11e8:	10 92 72 02 	sts	0x0272, r1
	Global_u8Shift=0;
    11ec:	10 92 79 02 	sts	0x0279, r1
}
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <main>:


int main()
{
    11f6:	cf 92       	push	r12
    11f8:	df 92       	push	r13
    11fa:	ef 92       	push	r14
    11fc:	ff 92       	push	r15
    11fe:	0f 93       	push	r16
    1200:	1f 93       	push	r17
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	00 d0       	rcall	.+0      	; 0x1208 <main+0x12>
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
	LCD_enuInit();
    120c:	0e 94 ae 30 	call	0x615c	; 0x615c <LCD_enuInit>
	Keypad_enuInit();
    1210:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <Keypad_enuInit>


	while(1)
	{
		Global_u8PressedKey = NOT_PRESSED;
    1214:	8f ef       	ldi	r24, 0xFF	; 255
    1216:	80 93 ef 01 	sts	0x01EF, r24
    121a:	1b c0       	rjmp	.+54     	; 0x1252 <main+0x5c>

		while(Global_u8PressedKey == NOT_PRESSED)
		{
			Keypad_enuGetPressedKey(&Global_u8PressedKey);
    121c:	8f ee       	ldi	r24, 0xEF	; 239
    121e:	91 e0       	ldi	r25, 0x01	; 1
    1220:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <Keypad_enuGetPressedKey>
			if(Get_bit(Global_u16FLAGS,must_clear) && Global_u8PressedKey != 'c' && Global_u8PressedKey != 'q' && Global_u8PressedKey != 'x' )
    1224:	80 91 f1 01 	lds	r24, 0x01F1
    1228:	90 91 f2 01 	lds	r25, 0x01F2
    122c:	80 70       	andi	r24, 0x00	; 0
    122e:	90 72       	andi	r25, 0x20	; 32
    1230:	00 97       	sbiw	r24, 0x00	; 0
    1232:	79 f0       	breq	.+30     	; 0x1252 <main+0x5c>
    1234:	80 91 ef 01 	lds	r24, 0x01EF
    1238:	83 36       	cpi	r24, 0x63	; 99
    123a:	59 f0       	breq	.+22     	; 0x1252 <main+0x5c>
    123c:	80 91 ef 01 	lds	r24, 0x01EF
    1240:	81 37       	cpi	r24, 0x71	; 113
    1242:	39 f0       	breq	.+14     	; 0x1252 <main+0x5c>
    1244:	80 91 ef 01 	lds	r24, 0x01EF
    1248:	88 37       	cpi	r24, 0x78	; 120
    124a:	19 f0       	breq	.+6      	; 0x1252 <main+0x5c>
			{
				Global_u8PressedKey = NOT_PRESSED;
    124c:	8f ef       	ldi	r24, 0xFF	; 255
    124e:	80 93 ef 01 	sts	0x01EF, r24

	while(1)
	{
		Global_u8PressedKey = NOT_PRESSED;

		while(Global_u8PressedKey == NOT_PRESSED)
    1252:	80 91 ef 01 	lds	r24, 0x01EF
    1256:	8f 3f       	cpi	r24, 0xFF	; 255
    1258:	09 f3       	breq	.-62     	; 0x121c <main+0x26>
			if(Get_bit(Global_u16FLAGS,must_clear) && Global_u8PressedKey != 'c' && Global_u8PressedKey != 'q' && Global_u8PressedKey != 'x' )
			{
				Global_u8PressedKey = NOT_PRESSED;
			}
		}
		Clr_bit(Global_u16FLAGS,must_clear);
    125a:	80 91 f1 01 	lds	r24, 0x01F1
    125e:	90 91 f2 01 	lds	r25, 0x01F2
    1262:	9f 7d       	andi	r25, 0xDF	; 223
    1264:	90 93 f2 01 	sts	0x01F2, r25
    1268:	80 93 f1 01 	sts	0x01F1, r24

		if(Global_u8PressedKey == '!') LCD_enuDisplayString("sqrt("), Global_u8Shift+=5;
    126c:	80 91 ef 01 	lds	r24, 0x01EF
    1270:	81 32       	cpi	r24, 0x21	; 33
    1272:	51 f4       	brne	.+20     	; 0x1288 <main+0x92>
    1274:	80 e6       	ldi	r24, 0x60	; 96
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
    127c:	80 91 79 02 	lds	r24, 0x0279
    1280:	8b 5f       	subi	r24, 0xFB	; 251
    1282:	80 93 79 02 	sts	0x0279, r24
    1286:	a1 c0       	rjmp	.+322    	; 0x13ca <main+0x1d4>
		else if (Global_u8PressedKey == 's') LCD_enuDisplayString("sin("), Global_u8Shift+=4;
    1288:	80 91 ef 01 	lds	r24, 0x01EF
    128c:	83 37       	cpi	r24, 0x73	; 115
    128e:	51 f4       	brne	.+20     	; 0x12a4 <main+0xae>
    1290:	86 e6       	ldi	r24, 0x66	; 102
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
    1298:	80 91 79 02 	lds	r24, 0x0279
    129c:	8c 5f       	subi	r24, 0xFC	; 252
    129e:	80 93 79 02 	sts	0x0279, r24
    12a2:	93 c0       	rjmp	.+294    	; 0x13ca <main+0x1d4>
		else if (Global_u8PressedKey == 'C') LCD_enuDisplayString("cos("), Global_u8Shift+=4;
    12a4:	80 91 ef 01 	lds	r24, 0x01EF
    12a8:	83 34       	cpi	r24, 0x43	; 67
    12aa:	51 f4       	brne	.+20     	; 0x12c0 <main+0xca>
    12ac:	8b e6       	ldi	r24, 0x6B	; 107
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
    12b4:	80 91 79 02 	lds	r24, 0x0279
    12b8:	8c 5f       	subi	r24, 0xFC	; 252
    12ba:	80 93 79 02 	sts	0x0279, r24
    12be:	85 c0       	rjmp	.+266    	; 0x13ca <main+0x1d4>
		else if (Global_u8PressedKey == 't') LCD_enuDisplayString("tan("), Global_u8Shift+=4;
    12c0:	80 91 ef 01 	lds	r24, 0x01EF
    12c4:	84 37       	cpi	r24, 0x74	; 116
    12c6:	51 f4       	brne	.+20     	; 0x12dc <main+0xe6>
    12c8:	80 e7       	ldi	r24, 0x70	; 112
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
    12d0:	80 91 79 02 	lds	r24, 0x0279
    12d4:	8c 5f       	subi	r24, 0xFC	; 252
    12d6:	80 93 79 02 	sts	0x0279, r24
    12da:	77 c0       	rjmp	.+238    	; 0x13ca <main+0x1d4>
		else if (Global_u8PressedKey == '^') LCD_enuDisplayString("(e^"), Global_u8Shift+=3;
    12dc:	80 91 ef 01 	lds	r24, 0x01EF
    12e0:	8e 35       	cpi	r24, 0x5E	; 94
    12e2:	51 f4       	brne	.+20     	; 0x12f8 <main+0x102>
    12e4:	85 e7       	ldi	r24, 0x75	; 117
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
    12ec:	80 91 79 02 	lds	r24, 0x0279
    12f0:	8d 5f       	subi	r24, 0xFD	; 253
    12f2:	80 93 79 02 	sts	0x0279, r24
    12f6:	69 c0       	rjmp	.+210    	; 0x13ca <main+0x1d4>

		else if (Global_u8PressedKey == 'y') LCD_enuDisplayString("asin("), Global_u8Shift+=5;
    12f8:	80 91 ef 01 	lds	r24, 0x01EF
    12fc:	89 37       	cpi	r24, 0x79	; 121
    12fe:	51 f4       	brne	.+20     	; 0x1314 <main+0x11e>
    1300:	89 e7       	ldi	r24, 0x79	; 121
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
    1308:	80 91 79 02 	lds	r24, 0x0279
    130c:	8b 5f       	subi	r24, 0xFB	; 251
    130e:	80 93 79 02 	sts	0x0279, r24
    1312:	5b c0       	rjmp	.+182    	; 0x13ca <main+0x1d4>
		else if (Global_u8PressedKey == '[') LCD_enuDisplayString("acos("), Global_u8Shift+=5;
    1314:	80 91 ef 01 	lds	r24, 0x01EF
    1318:	8b 35       	cpi	r24, 0x5B	; 91
    131a:	51 f4       	brne	.+20     	; 0x1330 <main+0x13a>
    131c:	8f e7       	ldi	r24, 0x7F	; 127
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
    1324:	80 91 79 02 	lds	r24, 0x0279
    1328:	8b 5f       	subi	r24, 0xFB	; 251
    132a:	80 93 79 02 	sts	0x0279, r24
    132e:	4d c0       	rjmp	.+154    	; 0x13ca <main+0x1d4>
		else if (Global_u8PressedKey == 'v') LCD_enuDisplayString("atan("), Global_u8Shift+=5;
    1330:	80 91 ef 01 	lds	r24, 0x01EF
    1334:	86 37       	cpi	r24, 0x76	; 118
    1336:	51 f4       	brne	.+20     	; 0x134c <main+0x156>
    1338:	85 e8       	ldi	r24, 0x85	; 133
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
    1340:	80 91 79 02 	lds	r24, 0x0279
    1344:	8b 5f       	subi	r24, 0xFB	; 251
    1346:	80 93 79 02 	sts	0x0279, r24
    134a:	3f c0       	rjmp	.+126    	; 0x13ca <main+0x1d4>

		else if (Global_u8PressedKey == 'w') LCD_enuDisplayString("sinh("), Global_u8Shift+=5;
    134c:	80 91 ef 01 	lds	r24, 0x01EF
    1350:	87 37       	cpi	r24, 0x77	; 119
    1352:	51 f4       	brne	.+20     	; 0x1368 <main+0x172>
    1354:	8b e8       	ldi	r24, 0x8B	; 139
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
    135c:	80 91 79 02 	lds	r24, 0x0279
    1360:	8b 5f       	subi	r24, 0xFB	; 251
    1362:	80 93 79 02 	sts	0x0279, r24
    1366:	31 c0       	rjmp	.+98     	; 0x13ca <main+0x1d4>
		else if (Global_u8PressedKey == 'u') LCD_enuDisplayString("cosh("), Global_u8Shift+=5;
    1368:	80 91 ef 01 	lds	r24, 0x01EF
    136c:	85 37       	cpi	r24, 0x75	; 117
    136e:	51 f4       	brne	.+20     	; 0x1384 <main+0x18e>
    1370:	81 e9       	ldi	r24, 0x91	; 145
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
    1378:	80 91 79 02 	lds	r24, 0x0279
    137c:	8b 5f       	subi	r24, 0xFB	; 251
    137e:	80 93 79 02 	sts	0x0279, r24
    1382:	23 c0       	rjmp	.+70     	; 0x13ca <main+0x1d4>
		else if (Global_u8PressedKey == 'p') LCD_enuDisplayString("tanh("), Global_u8Shift+=5;
    1384:	80 91 ef 01 	lds	r24, 0x01EF
    1388:	80 37       	cpi	r24, 0x70	; 112
    138a:	51 f4       	brne	.+20     	; 0x13a0 <main+0x1aa>
    138c:	87 e9       	ldi	r24, 0x97	; 151
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
    1394:	80 91 79 02 	lds	r24, 0x0279
    1398:	8b 5f       	subi	r24, 0xFB	; 251
    139a:	80 93 79 02 	sts	0x0279, r24
    139e:	15 c0       	rjmp	.+42     	; 0x13ca <main+0x1d4>
		else if((Global_u8PressedKey >= '0' && Global_u8PressedKey<='9') || Global_u8PressedKey == '.')
    13a0:	80 91 ef 01 	lds	r24, 0x01EF
    13a4:	80 33       	cpi	r24, 0x30	; 48
    13a6:	20 f0       	brcs	.+8      	; 0x13b0 <main+0x1ba>
    13a8:	80 91 ef 01 	lds	r24, 0x01EF
    13ac:	8a 33       	cpi	r24, 0x3A	; 58
    13ae:	20 f0       	brcs	.+8      	; 0x13b8 <main+0x1c2>
    13b0:	80 91 ef 01 	lds	r24, 0x01EF
    13b4:	8e 32       	cpi	r24, 0x2E	; 46
    13b6:	49 f4       	brne	.+18     	; 0x13ca <main+0x1d4>
			LCD_enuSendChar(Global_u8PressedKey), Global_u8Shift++;
    13b8:	80 91 ef 01 	lds	r24, 0x01EF
    13bc:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    13c0:	80 91 79 02 	lds	r24, 0x0279
    13c4:	8f 5f       	subi	r24, 0xFF	; 255
    13c6:	80 93 79 02 	sts	0x0279, r24

		if((Global_u8PressedKey >= '0' && Global_u8PressedKey<='9') || Global_u8PressedKey == '.' || Global_u8PressedKey == 'e' || Global_u8PressedKey == '&' )
    13ca:	80 91 ef 01 	lds	r24, 0x01EF
    13ce:	80 33       	cpi	r24, 0x30	; 48
    13d0:	20 f0       	brcs	.+8      	; 0x13da <main+0x1e4>
    13d2:	80 91 ef 01 	lds	r24, 0x01EF
    13d6:	8a 33       	cpi	r24, 0x3A	; 58
    13d8:	68 f0       	brcs	.+26     	; 0x13f4 <main+0x1fe>
    13da:	80 91 ef 01 	lds	r24, 0x01EF
    13de:	8e 32       	cpi	r24, 0x2E	; 46
    13e0:	49 f0       	breq	.+18     	; 0x13f4 <main+0x1fe>
    13e2:	80 91 ef 01 	lds	r24, 0x01EF
    13e6:	85 36       	cpi	r24, 0x65	; 101
    13e8:	29 f0       	breq	.+10     	; 0x13f4 <main+0x1fe>
    13ea:	80 91 ef 01 	lds	r24, 0x01EF
    13ee:	86 32       	cpi	r24, 0x26	; 38
    13f0:	09 f0       	breq	.+2      	; 0x13f4 <main+0x1fe>
    13f2:	f7 c1       	rjmp	.+1006   	; 0x17e2 <main+0x5ec>
		{
			if(Global_u8Shift>16)
    13f4:	80 91 79 02 	lds	r24, 0x0279
    13f8:	81 31       	cpi	r24, 0x11	; 17
    13fa:	f8 f0       	brcs	.+62     	; 0x143a <main+0x244>
			{
				for(k=0;k<(Global_u8Shift-16); ++k)
    13fc:	10 92 7c 02 	sts	0x027C, r1
    1400:	0d c0       	rjmp	.+26     	; 0x141c <main+0x226>
				{
					LCD_enuSendCommand(0x18);
    1402:	88 e1       	ldi	r24, 0x18	; 24
    1404:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <LCD_enuSendCommand>
					Global_u8ShiftCnt++;
    1408:	80 91 78 02 	lds	r24, 0x0278
    140c:	8f 5f       	subi	r24, 0xFF	; 255
    140e:	80 93 78 02 	sts	0x0278, r24

		if((Global_u8PressedKey >= '0' && Global_u8PressedKey<='9') || Global_u8PressedKey == '.' || Global_u8PressedKey == 'e' || Global_u8PressedKey == '&' )
		{
			if(Global_u8Shift>16)
			{
				for(k=0;k<(Global_u8Shift-16); ++k)
    1412:	80 91 7c 02 	lds	r24, 0x027C
    1416:	8f 5f       	subi	r24, 0xFF	; 255
    1418:	80 93 7c 02 	sts	0x027C, r24
    141c:	80 91 7c 02 	lds	r24, 0x027C
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	80 91 79 02 	lds	r24, 0x0279
    1428:	88 2f       	mov	r24, r24
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	40 97       	sbiw	r24, 0x10	; 16
    142e:	28 17       	cp	r18, r24
    1430:	39 07       	cpc	r19, r25
    1432:	3c f3       	brlt	.-50     	; 0x1402 <main+0x20c>
				{
					LCD_enuSendCommand(0x18);
					Global_u8ShiftCnt++;
				}
				Global_u8Shift=16;
    1434:	80 e1       	ldi	r24, 0x10	; 16
    1436:	80 93 79 02 	sts	0x0279, r24
			}
			// take the numbers ( operands, angels, powers.....)

			if(Global_u8PressedKey == '.')
    143a:	80 91 ef 01 	lds	r24, 0x01EF
    143e:	8e 32       	cpi	r24, 0x2E	; 46
    1440:	51 f4       	brne	.+20     	; 0x1456 <main+0x260>
			{
				Set_bit(Global_u16FLAGS,dot);
    1442:	80 91 f1 01 	lds	r24, 0x01F1
    1446:	90 91 f2 01 	lds	r25, 0x01F2
    144a:	92 60       	ori	r25, 0x02	; 2
    144c:	90 93 f2 01 	sts	0x01F2, r25
    1450:	80 93 f1 01 	sts	0x01F1, r24
    1454:	df ce       	rjmp	.-578    	; 0x1214 <main+0x1e>
				continue;
			}
			Set_bit(Global_u16FLAGS,last_is_num) ;
    1456:	80 91 f1 01 	lds	r24, 0x01F1
    145a:	90 91 f2 01 	lds	r25, 0x01F2
    145e:	88 60       	ori	r24, 0x08	; 8
    1460:	90 93 f2 01 	sts	0x01F2, r25
    1464:	80 93 f1 01 	sts	0x01F1, r24
			Clr_bit(Global_u16FLAGS,first);
    1468:	80 91 f1 01 	lds	r24, 0x01F1
    146c:	90 91 f2 01 	lds	r25, 0x01F2
    1470:	8d 7f       	andi	r24, 0xFD	; 253
    1472:	90 93 f2 01 	sts	0x01F2, r25
    1476:	80 93 f1 01 	sts	0x01F1, r24
			Clr_bit(Global_u16FLAGS,last_is_tri);
    147a:	80 91 f1 01 	lds	r24, 0x01F1
    147e:	90 91 f2 01 	lds	r25, 0x01F2
    1482:	97 7f       	andi	r25, 0xF7	; 247
    1484:	90 93 f2 01 	sts	0x01F2, r25
    1488:	80 93 f1 01 	sts	0x01F1, r24

			if(Global_u8PressedKey == 'e')
    148c:	80 91 ef 01 	lds	r24, 0x01EF
    1490:	85 36       	cpi	r24, 0x65	; 101
    1492:	b1 f4       	brne	.+44     	; 0x14c0 <main+0x2ca>
			{
				Global_f32Num = M_PI;
    1494:	8b ed       	ldi	r24, 0xDB	; 219
    1496:	9f e0       	ldi	r25, 0x0F	; 15
    1498:	a9 e4       	ldi	r26, 0x49	; 73
    149a:	b0 e4       	ldi	r27, 0x40	; 64
    149c:	80 93 6e 02 	sts	0x026E, r24
    14a0:	90 93 6f 02 	sts	0x026F, r25
    14a4:	a0 93 70 02 	sts	0x0270, r26
    14a8:	b0 93 71 02 	sts	0x0271, r27
				//LCD_enuWriteNumber(M_PI);
				Global_u8Shift+=2;
    14ac:	80 91 79 02 	lds	r24, 0x0279
    14b0:	8e 5f       	subi	r24, 0xFE	; 254
    14b2:	80 93 79 02 	sts	0x0279, r24
				LCD_enuDisplayString("PI");
    14b6:	8d e9       	ldi	r24, 0x9D	; 157
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
    14be:	aa ce       	rjmp	.-684    	; 0x1214 <main+0x1e>
				continue;
			}
			else if (Global_u8PressedKey == '&'){
    14c0:	80 91 ef 01 	lds	r24, 0x01EF
    14c4:	86 32       	cpi	r24, 0x26	; 38
    14c6:	d1 f4       	brne	.+52     	; 0x14fc <main+0x306>
				Global_f32Num = Global_f32Ans;
    14c8:	80 91 74 02 	lds	r24, 0x0274
    14cc:	90 91 75 02 	lds	r25, 0x0275
    14d0:	a0 91 76 02 	lds	r26, 0x0276
    14d4:	b0 91 77 02 	lds	r27, 0x0277
    14d8:	80 93 6e 02 	sts	0x026E, r24
    14dc:	90 93 6f 02 	sts	0x026F, r25
    14e0:	a0 93 70 02 	sts	0x0270, r26
    14e4:	b0 93 71 02 	sts	0x0271, r27
				LCD_enuDisplayString("Ans");
    14e8:	80 ea       	ldi	r24, 0xA0	; 160
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
				Global_u8Shift+=3;
    14f0:	80 91 79 02 	lds	r24, 0x0279
    14f4:	8d 5f       	subi	r24, 0xFD	; 253
    14f6:	80 93 79 02 	sts	0x0279, r24
    14fa:	8c ce       	rjmp	.-744    	; 0x1214 <main+0x1e>
				continue;
			}
			if(Get_bit(Global_u16FLAGS,negative))
    14fc:	80 91 f1 01 	lds	r24, 0x01F1
    1500:	90 91 f2 01 	lds	r25, 0x01F2
    1504:	81 70       	andi	r24, 0x01	; 1
    1506:	90 70       	andi	r25, 0x00	; 0
    1508:	88 23       	and	r24, r24
    150a:	09 f4       	brne	.+2      	; 0x150e <main+0x318>
    150c:	d9 c0       	rjmp	.+434    	; 0x16c0 <main+0x4ca>
			{
				if( Get_bit(Global_u16FLAGS,dot) )
    150e:	80 91 f1 01 	lds	r24, 0x01F1
    1512:	90 91 f2 01 	lds	r25, 0x01F2
    1516:	80 70       	andi	r24, 0x00	; 0
    1518:	92 70       	andi	r25, 0x02	; 2
    151a:	00 97       	sbiw	r24, 0x00	; 0
    151c:	09 f4       	brne	.+2      	; 0x1520 <main+0x32a>
    151e:	7a c0       	rjmp	.+244    	; 0x1614 <main+0x41e>
				{
					Global_f32Num = Global_f32Num - ((f32)(Global_u8PressedKey-'0')  / (Global_u8Cnt*10.0));
    1520:	80 91 ef 01 	lds	r24, 0x01EF
    1524:	88 2f       	mov	r24, r24
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	c0 97       	sbiw	r24, 0x30	; 48
    152a:	aa 27       	eor	r26, r26
    152c:	97 fd       	sbrc	r25, 7
    152e:	a0 95       	com	r26
    1530:	ba 2f       	mov	r27, r26
    1532:	bc 01       	movw	r22, r24
    1534:	cd 01       	movw	r24, r26
    1536:	0e 94 b3 05 	call	0xb66	; 0xb66 <__floatsisf>
    153a:	7b 01       	movw	r14, r22
    153c:	8c 01       	movw	r16, r24
    153e:	80 91 f0 01 	lds	r24, 0x01F0
    1542:	88 2f       	mov	r24, r24
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	aa 27       	eor	r26, r26
    1548:	97 fd       	sbrc	r25, 7
    154a:	a0 95       	com	r26
    154c:	ba 2f       	mov	r27, r26
    154e:	bc 01       	movw	r22, r24
    1550:	cd 01       	movw	r24, r26
    1552:	0e 94 b3 05 	call	0xb66	; 0xb66 <__floatsisf>
    1556:	dc 01       	movw	r26, r24
    1558:	cb 01       	movw	r24, r22
    155a:	bc 01       	movw	r22, r24
    155c:	cd 01       	movw	r24, r26
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	40 e2       	ldi	r20, 0x20	; 32
    1564:	51 ec       	ldi	r21, 0xC1	; 193
    1566:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    156a:	dc 01       	movw	r26, r24
    156c:	cb 01       	movw	r24, r22
    156e:	9c 01       	movw	r18, r24
    1570:	ad 01       	movw	r20, r26
    1572:	c8 01       	movw	r24, r16
    1574:	b7 01       	movw	r22, r14
    1576:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	20 91 6e 02 	lds	r18, 0x026E
    1582:	30 91 6f 02 	lds	r19, 0x026F
    1586:	40 91 70 02 	lds	r20, 0x0270
    158a:	50 91 71 02 	lds	r21, 0x0271
    158e:	bc 01       	movw	r22, r24
    1590:	cd 01       	movw	r24, r26
    1592:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__addsf3>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	80 93 6e 02 	sts	0x026E, r24
    159e:	90 93 6f 02 	sts	0x026F, r25
    15a2:	a0 93 70 02 	sts	0x0270, r26
    15a6:	b0 93 71 02 	sts	0x0271, r27
					Global_u8Cnt*=10;
    15aa:	80 91 f0 01 	lds	r24, 0x01F0
    15ae:	88 2f       	mov	r24, r24
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	9c 01       	movw	r18, r24
    15b4:	22 0f       	add	r18, r18
    15b6:	33 1f       	adc	r19, r19
    15b8:	c9 01       	movw	r24, r18
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	88 0f       	add	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	82 0f       	add	r24, r18
    15c4:	93 1f       	adc	r25, r19
    15c6:	80 93 f0 01 	sts	0x01F0, r24

					if(Global_f32Num > 0) Global_f32Num*=-1;
    15ca:	80 91 6e 02 	lds	r24, 0x026E
    15ce:	90 91 6f 02 	lds	r25, 0x026F
    15d2:	a0 91 70 02 	lds	r26, 0x0270
    15d6:	b0 91 71 02 	lds	r27, 0x0271
    15da:	bc 01       	movw	r22, r24
    15dc:	cd 01       	movw	r24, r26
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e0       	ldi	r20, 0x00	; 0
    15e4:	50 e0       	ldi	r21, 0x00	; 0
    15e6:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    15ea:	18 16       	cp	r1, r24
    15ec:	0c f0       	brlt	.+2      	; 0x15f0 <main+0x3fa>
    15ee:	12 ce       	rjmp	.-988    	; 0x1214 <main+0x1e>
    15f0:	80 91 6e 02 	lds	r24, 0x026E
    15f4:	90 91 6f 02 	lds	r25, 0x026F
    15f8:	a0 91 70 02 	lds	r26, 0x0270
    15fc:	b0 91 71 02 	lds	r27, 0x0271
    1600:	b0 58       	subi	r27, 0x80	; 128
    1602:	80 93 6e 02 	sts	0x026E, r24
    1606:	90 93 6f 02 	sts	0x026F, r25
    160a:	a0 93 70 02 	sts	0x0270, r26
    160e:	b0 93 71 02 	sts	0x0271, r27
    1612:	00 ce       	rjmp	.-1024   	; 0x1214 <main+0x1e>
				}
				else
				{
					Global_f32Num = Global_f32Num*10 - (Global_u8PressedKey-'0');
    1614:	80 91 6e 02 	lds	r24, 0x026E
    1618:	90 91 6f 02 	lds	r25, 0x026F
    161c:	a0 91 70 02 	lds	r26, 0x0270
    1620:	b0 91 71 02 	lds	r27, 0x0271
    1624:	bc 01       	movw	r22, r24
    1626:	cd 01       	movw	r24, r26
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	40 e2       	ldi	r20, 0x20	; 32
    162e:	51 e4       	ldi	r21, 0x41	; 65
    1630:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	7c 01       	movw	r14, r24
    163a:	8d 01       	movw	r16, r26
    163c:	80 91 ef 01 	lds	r24, 0x01EF
    1640:	88 2f       	mov	r24, r24
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	c0 97       	sbiw	r24, 0x30	; 48
    1646:	aa 27       	eor	r26, r26
    1648:	97 fd       	sbrc	r25, 7
    164a:	a0 95       	com	r26
    164c:	ba 2f       	mov	r27, r26
    164e:	bc 01       	movw	r22, r24
    1650:	cd 01       	movw	r24, r26
    1652:	0e 94 b3 05 	call	0xb66	; 0xb66 <__floatsisf>
    1656:	9b 01       	movw	r18, r22
    1658:	ac 01       	movw	r20, r24
    165a:	c8 01       	movw	r24, r16
    165c:	b7 01       	movw	r22, r14
    165e:	0e 94 bf 02 	call	0x57e	; 0x57e <__subsf3>
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22
    1666:	80 93 6e 02 	sts	0x026E, r24
    166a:	90 93 6f 02 	sts	0x026F, r25
    166e:	a0 93 70 02 	sts	0x0270, r26
    1672:	b0 93 71 02 	sts	0x0271, r27

					if(Global_f32Num > 0) Global_f32Num*=-1;
    1676:	80 91 6e 02 	lds	r24, 0x026E
    167a:	90 91 6f 02 	lds	r25, 0x026F
    167e:	a0 91 70 02 	lds	r26, 0x0270
    1682:	b0 91 71 02 	lds	r27, 0x0271
    1686:	bc 01       	movw	r22, r24
    1688:	cd 01       	movw	r24, r26
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	40 e0       	ldi	r20, 0x00	; 0
    1690:	50 e0       	ldi	r21, 0x00	; 0
    1692:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    1696:	18 16       	cp	r1, r24
    1698:	0c f0       	brlt	.+2      	; 0x169c <main+0x4a6>
    169a:	bc cd       	rjmp	.-1160   	; 0x1214 <main+0x1e>
    169c:	80 91 6e 02 	lds	r24, 0x026E
    16a0:	90 91 6f 02 	lds	r25, 0x026F
    16a4:	a0 91 70 02 	lds	r26, 0x0270
    16a8:	b0 91 71 02 	lds	r27, 0x0271
    16ac:	b0 58       	subi	r27, 0x80	; 128
    16ae:	80 93 6e 02 	sts	0x026E, r24
    16b2:	90 93 6f 02 	sts	0x026F, r25
    16b6:	a0 93 70 02 	sts	0x0270, r26
    16ba:	b0 93 71 02 	sts	0x0271, r27
    16be:	aa cd       	rjmp	.-1196   	; 0x1214 <main+0x1e>
				}

			}
			else
			{
				if( Get_bit(Global_u16FLAGS,dot) )
    16c0:	80 91 f1 01 	lds	r24, 0x01F1
    16c4:	90 91 f2 01 	lds	r25, 0x01F2
    16c8:	80 70       	andi	r24, 0x00	; 0
    16ca:	92 70       	andi	r25, 0x02	; 2
    16cc:	00 97       	sbiw	r24, 0x00	; 0
    16ce:	09 f4       	brne	.+2      	; 0x16d2 <main+0x4dc>
    16d0:	56 c0       	rjmp	.+172    	; 0x177e <main+0x588>
				{
					Global_f32Num = Global_f32Num + ((f32)(Global_u8PressedKey-'0')  / (Global_u8Cnt*10.0));
    16d2:	80 91 ef 01 	lds	r24, 0x01EF
    16d6:	88 2f       	mov	r24, r24
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	c0 97       	sbiw	r24, 0x30	; 48
    16dc:	aa 27       	eor	r26, r26
    16de:	97 fd       	sbrc	r25, 7
    16e0:	a0 95       	com	r26
    16e2:	ba 2f       	mov	r27, r26
    16e4:	bc 01       	movw	r22, r24
    16e6:	cd 01       	movw	r24, r26
    16e8:	0e 94 b3 05 	call	0xb66	; 0xb66 <__floatsisf>
    16ec:	7b 01       	movw	r14, r22
    16ee:	8c 01       	movw	r16, r24
    16f0:	80 91 f0 01 	lds	r24, 0x01F0
    16f4:	88 2f       	mov	r24, r24
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	aa 27       	eor	r26, r26
    16fa:	97 fd       	sbrc	r25, 7
    16fc:	a0 95       	com	r26
    16fe:	ba 2f       	mov	r27, r26
    1700:	bc 01       	movw	r22, r24
    1702:	cd 01       	movw	r24, r26
    1704:	0e 94 b3 05 	call	0xb66	; 0xb66 <__floatsisf>
    1708:	dc 01       	movw	r26, r24
    170a:	cb 01       	movw	r24, r22
    170c:	bc 01       	movw	r22, r24
    170e:	cd 01       	movw	r24, r26
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	40 e2       	ldi	r20, 0x20	; 32
    1716:	51 e4       	ldi	r21, 0x41	; 65
    1718:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	9c 01       	movw	r18, r24
    1722:	ad 01       	movw	r20, r26
    1724:	c8 01       	movw	r24, r16
    1726:	b7 01       	movw	r22, r14
    1728:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	20 91 6e 02 	lds	r18, 0x026E
    1734:	30 91 6f 02 	lds	r19, 0x026F
    1738:	40 91 70 02 	lds	r20, 0x0270
    173c:	50 91 71 02 	lds	r21, 0x0271
    1740:	bc 01       	movw	r22, r24
    1742:	cd 01       	movw	r24, r26
    1744:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__addsf3>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	80 93 6e 02 	sts	0x026E, r24
    1750:	90 93 6f 02 	sts	0x026F, r25
    1754:	a0 93 70 02 	sts	0x0270, r26
    1758:	b0 93 71 02 	sts	0x0271, r27
					Global_u8Cnt*=10;
    175c:	80 91 f0 01 	lds	r24, 0x01F0
    1760:	88 2f       	mov	r24, r24
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	9c 01       	movw	r18, r24
    1766:	22 0f       	add	r18, r18
    1768:	33 1f       	adc	r19, r19
    176a:	c9 01       	movw	r24, r18
    176c:	88 0f       	add	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	88 0f       	add	r24, r24
    1772:	99 1f       	adc	r25, r25
    1774:	82 0f       	add	r24, r18
    1776:	93 1f       	adc	r25, r19
    1778:	80 93 f0 01 	sts	0x01F0, r24
    177c:	4b cd       	rjmp	.-1386   	; 0x1214 <main+0x1e>
				}
				else
				{
					Global_f32Num = Global_f32Num*10 + (Global_u8PressedKey-'0');
    177e:	80 91 6e 02 	lds	r24, 0x026E
    1782:	90 91 6f 02 	lds	r25, 0x026F
    1786:	a0 91 70 02 	lds	r26, 0x0270
    178a:	b0 91 71 02 	lds	r27, 0x0271
    178e:	bc 01       	movw	r22, r24
    1790:	cd 01       	movw	r24, r26
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	40 e2       	ldi	r20, 0x20	; 32
    1798:	51 e4       	ldi	r21, 0x41	; 65
    179a:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	7c 01       	movw	r14, r24
    17a4:	8d 01       	movw	r16, r26
    17a6:	80 91 ef 01 	lds	r24, 0x01EF
    17aa:	88 2f       	mov	r24, r24
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	c0 97       	sbiw	r24, 0x30	; 48
    17b0:	aa 27       	eor	r26, r26
    17b2:	97 fd       	sbrc	r25, 7
    17b4:	a0 95       	com	r26
    17b6:	ba 2f       	mov	r27, r26
    17b8:	bc 01       	movw	r22, r24
    17ba:	cd 01       	movw	r24, r26
    17bc:	0e 94 b3 05 	call	0xb66	; 0xb66 <__floatsisf>
    17c0:	9b 01       	movw	r18, r22
    17c2:	ac 01       	movw	r20, r24
    17c4:	c8 01       	movw	r24, r16
    17c6:	b7 01       	movw	r22, r14
    17c8:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__addsf3>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	80 93 6e 02 	sts	0x026E, r24
    17d4:	90 93 6f 02 	sts	0x026F, r25
    17d8:	a0 93 70 02 	sts	0x0270, r26
    17dc:	b0 93 71 02 	sts	0x0271, r27
    17e0:	19 cd       	rjmp	.-1486   	; 0x1214 <main+0x1e>
				}
			}

		}
		else if(Global_u8PressedKey == '=') // calculating the result
    17e2:	80 91 ef 01 	lds	r24, 0x01EF
    17e6:	8d 33       	cpi	r24, 0x3D	; 61
    17e8:	09 f0       	breq	.+2      	; 0x17ec <main+0x5f6>
    17ea:	2c c7       	rjmp	.+3672   	; 0x2644 <main+0x144e>
		{

			if( Get_bit(Global_u16FLAGS,last_is_num) && !Get_bit(Global_u16FLAGS,first_is_op) && !Get_bit(Global_u16FLAGS,error) )
    17ec:	80 91 f1 01 	lds	r24, 0x01F1
    17f0:	90 91 f2 01 	lds	r25, 0x01F2
    17f4:	88 70       	andi	r24, 0x08	; 8
    17f6:	90 70       	andi	r25, 0x00	; 0
    17f8:	00 97       	sbiw	r24, 0x00	; 0
    17fa:	09 f4       	brne	.+2      	; 0x17fe <main+0x608>
    17fc:	19 c7       	rjmp	.+3634   	; 0x2630 <main+0x143a>
    17fe:	80 91 f1 01 	lds	r24, 0x01F1
    1802:	90 91 f2 01 	lds	r25, 0x01F2
    1806:	80 71       	andi	r24, 0x10	; 16
    1808:	90 70       	andi	r25, 0x00	; 0
    180a:	00 97       	sbiw	r24, 0x00	; 0
    180c:	09 f0       	breq	.+2      	; 0x1810 <main+0x61a>
    180e:	10 c7       	rjmp	.+3616   	; 0x2630 <main+0x143a>
    1810:	80 91 f1 01 	lds	r24, 0x01F1
    1814:	90 91 f2 01 	lds	r25, 0x01F2
    1818:	84 70       	andi	r24, 0x04	; 4
    181a:	90 70       	andi	r25, 0x00	; 0
    181c:	00 97       	sbiw	r24, 0x00	; 0
    181e:	09 f0       	breq	.+2      	; 0x1822 <main+0x62c>
    1820:	07 c7       	rjmp	.+3598   	; 0x2630 <main+0x143a>
			{

				if(Get_bit(Global_u16FLAGS,Sin))
    1822:	80 91 f1 01 	lds	r24, 0x01F1
    1826:	90 91 f2 01 	lds	r25, 0x01F2
    182a:	80 74       	andi	r24, 0x40	; 64
    182c:	90 70       	andi	r25, 0x00	; 0
    182e:	00 97       	sbiw	r24, 0x00	; 0
    1830:	09 f4       	brne	.+2      	; 0x1834 <main+0x63e>
    1832:	46 c0       	rjmp	.+140    	; 0x18c0 <main+0x6ca>
				{
					Global_Af32Operands[Local_u8It1] = _sin(Global_f32Num*(M_PI/180.0)*(1/Global_f32mode));
    1834:	80 91 6c 02 	lds	r24, 0x026C
    1838:	c8 2e       	mov	r12, r24
    183a:	dd 24       	eor	r13, r13
    183c:	80 91 6e 02 	lds	r24, 0x026E
    1840:	90 91 6f 02 	lds	r25, 0x026F
    1844:	a0 91 70 02 	lds	r26, 0x0270
    1848:	b0 91 71 02 	lds	r27, 0x0271
    184c:	bc 01       	movw	r22, r24
    184e:	cd 01       	movw	r24, r26
    1850:	25 e3       	ldi	r18, 0x35	; 53
    1852:	3a ef       	ldi	r19, 0xFA	; 250
    1854:	4e e8       	ldi	r20, 0x8E	; 142
    1856:	5c e3       	ldi	r21, 0x3C	; 60
    1858:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	7c 01       	movw	r14, r24
    1862:	8d 01       	movw	r16, r26
    1864:	20 91 f3 01 	lds	r18, 0x01F3
    1868:	30 91 f4 01 	lds	r19, 0x01F4
    186c:	40 91 f5 01 	lds	r20, 0x01F5
    1870:	50 91 f6 01 	lds	r21, 0x01F6
    1874:	60 e0       	ldi	r22, 0x00	; 0
    1876:	70 e0       	ldi	r23, 0x00	; 0
    1878:	80 e8       	ldi	r24, 0x80	; 128
    187a:	9f e3       	ldi	r25, 0x3F	; 63
    187c:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	9c 01       	movw	r18, r24
    1886:	ad 01       	movw	r20, r26
    1888:	c8 01       	movw	r24, r16
    188a:	b7 01       	movw	r22, r14
    188c:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    1890:	dc 01       	movw	r26, r24
    1892:	cb 01       	movw	r24, r22
    1894:	bc 01       	movw	r22, r24
    1896:	cd 01       	movw	r24, r26
    1898:	0e 94 3c 23 	call	0x4678	; 0x4678 <_sin>
    189c:	9b 01       	movw	r18, r22
    189e:	ac 01       	movw	r20, r24
    18a0:	c6 01       	movw	r24, r12
    18a2:	88 0f       	add	r24, r24
    18a4:	99 1f       	adc	r25, r25
    18a6:	88 0f       	add	r24, r24
    18a8:	99 1f       	adc	r25, r25
    18aa:	fc 01       	movw	r30, r24
    18ac:	ec 5b       	subi	r30, 0xBC	; 188
    18ae:	fd 4f       	sbci	r31, 0xFD	; 253
    18b0:	20 83       	st	Z, r18
    18b2:	31 83       	std	Z+1, r19	; 0x01
    18b4:	42 83       	std	Z+2, r20	; 0x02
    18b6:	53 83       	std	Z+3, r21	; 0x03
					LCD_enuSendChar(')');
    18b8:	89 e2       	ldi	r24, 0x29	; 41
    18ba:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    18be:	9d c3       	rjmp	.+1850   	; 0x1ffa <main+0xe04>
				}
				else if(Get_bit(Global_u16FLAGS,Cos ))
    18c0:	80 91 f1 01 	lds	r24, 0x01F1
    18c4:	90 91 f2 01 	lds	r25, 0x01F2
    18c8:	80 78       	andi	r24, 0x80	; 128
    18ca:	90 70       	andi	r25, 0x00	; 0
    18cc:	00 97       	sbiw	r24, 0x00	; 0
    18ce:	09 f4       	brne	.+2      	; 0x18d2 <main+0x6dc>
    18d0:	46 c0       	rjmp	.+140    	; 0x195e <main+0x768>
				{
					Global_Af32Operands[Local_u8It1] = _cos(Global_f32Num*(M_PI/180.0)*(1/Global_f32mode));
    18d2:	80 91 6c 02 	lds	r24, 0x026C
    18d6:	c8 2e       	mov	r12, r24
    18d8:	dd 24       	eor	r13, r13
    18da:	80 91 6e 02 	lds	r24, 0x026E
    18de:	90 91 6f 02 	lds	r25, 0x026F
    18e2:	a0 91 70 02 	lds	r26, 0x0270
    18e6:	b0 91 71 02 	lds	r27, 0x0271
    18ea:	bc 01       	movw	r22, r24
    18ec:	cd 01       	movw	r24, r26
    18ee:	25 e3       	ldi	r18, 0x35	; 53
    18f0:	3a ef       	ldi	r19, 0xFA	; 250
    18f2:	4e e8       	ldi	r20, 0x8E	; 142
    18f4:	5c e3       	ldi	r21, 0x3C	; 60
    18f6:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	7c 01       	movw	r14, r24
    1900:	8d 01       	movw	r16, r26
    1902:	20 91 f3 01 	lds	r18, 0x01F3
    1906:	30 91 f4 01 	lds	r19, 0x01F4
    190a:	40 91 f5 01 	lds	r20, 0x01F5
    190e:	50 91 f6 01 	lds	r21, 0x01F6
    1912:	60 e0       	ldi	r22, 0x00	; 0
    1914:	70 e0       	ldi	r23, 0x00	; 0
    1916:	80 e8       	ldi	r24, 0x80	; 128
    1918:	9f e3       	ldi	r25, 0x3F	; 63
    191a:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	9c 01       	movw	r18, r24
    1924:	ad 01       	movw	r20, r26
    1926:	c8 01       	movw	r24, r16
    1928:	b7 01       	movw	r22, r14
    192a:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	bc 01       	movw	r22, r24
    1934:	cd 01       	movw	r24, r26
    1936:	0e 94 a2 21 	call	0x4344	; 0x4344 <_cos>
    193a:	9b 01       	movw	r18, r22
    193c:	ac 01       	movw	r20, r24
    193e:	c6 01       	movw	r24, r12
    1940:	88 0f       	add	r24, r24
    1942:	99 1f       	adc	r25, r25
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	fc 01       	movw	r30, r24
    194a:	ec 5b       	subi	r30, 0xBC	; 188
    194c:	fd 4f       	sbci	r31, 0xFD	; 253
    194e:	20 83       	st	Z, r18
    1950:	31 83       	std	Z+1, r19	; 0x01
    1952:	42 83       	std	Z+2, r20	; 0x02
    1954:	53 83       	std	Z+3, r21	; 0x03
					LCD_enuSendChar(')');
    1956:	89 e2       	ldi	r24, 0x29	; 41
    1958:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    195c:	4e c3       	rjmp	.+1692   	; 0x1ffa <main+0xe04>
				}
				else if(Get_bit(Global_u16FLAGS,Sqrt))
    195e:	80 91 f1 01 	lds	r24, 0x01F1
    1962:	90 91 f2 01 	lds	r25, 0x01F2
    1966:	80 72       	andi	r24, 0x20	; 32
    1968:	90 70       	andi	r25, 0x00	; 0
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	09 f4       	brne	.+2      	; 0x1970 <main+0x77a>
    196e:	3d c0       	rjmp	.+122    	; 0x19ea <main+0x7f4>
				{
					if(Global_f32Num < 0)
    1970:	80 91 6e 02 	lds	r24, 0x026E
    1974:	90 91 6f 02 	lds	r25, 0x026F
    1978:	a0 91 70 02 	lds	r26, 0x0270
    197c:	b0 91 71 02 	lds	r27, 0x0271
    1980:	bc 01       	movw	r22, r24
    1982:	cd 01       	movw	r24, r26
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 e0       	ldi	r20, 0x00	; 0
    198a:	50 e0       	ldi	r21, 0x00	; 0
    198c:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    1990:	88 23       	and	r24, r24
    1992:	4c f4       	brge	.+18     	; 0x19a6 <main+0x7b0>
					{
						Set_bit(Global_u16FLAGS, error);
    1994:	80 91 f1 01 	lds	r24, 0x01F1
    1998:	90 91 f2 01 	lds	r25, 0x01F2
    199c:	84 60       	ori	r24, 0x04	; 4
    199e:	90 93 f2 01 	sts	0x01F2, r25
    19a2:	80 93 f1 01 	sts	0x01F1, r24
					}
					Global_Af32Operands[Local_u8It1] = _sqrt(Global_f32Num);
    19a6:	80 91 6c 02 	lds	r24, 0x026C
    19aa:	08 2f       	mov	r16, r24
    19ac:	10 e0       	ldi	r17, 0x00	; 0
    19ae:	80 91 6e 02 	lds	r24, 0x026E
    19b2:	90 91 6f 02 	lds	r25, 0x026F
    19b6:	a0 91 70 02 	lds	r26, 0x0270
    19ba:	b0 91 71 02 	lds	r27, 0x0271
    19be:	bc 01       	movw	r22, r24
    19c0:	cd 01       	movw	r24, r26
    19c2:	0e 94 7d 24 	call	0x48fa	; 0x48fa <_sqrt>
    19c6:	9b 01       	movw	r18, r22
    19c8:	ac 01       	movw	r20, r24
    19ca:	c8 01       	movw	r24, r16
    19cc:	88 0f       	add	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	88 0f       	add	r24, r24
    19d2:	99 1f       	adc	r25, r25
    19d4:	fc 01       	movw	r30, r24
    19d6:	ec 5b       	subi	r30, 0xBC	; 188
    19d8:	fd 4f       	sbci	r31, 0xFD	; 253
    19da:	20 83       	st	Z, r18
    19dc:	31 83       	std	Z+1, r19	; 0x01
    19de:	42 83       	std	Z+2, r20	; 0x02
    19e0:	53 83       	std	Z+3, r21	; 0x03
					LCD_enuSendChar(')');
    19e2:	89 e2       	ldi	r24, 0x29	; 41
    19e4:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    19e8:	08 c3       	rjmp	.+1552   	; 0x1ffa <main+0xe04>
				}
				else if(Get_bit(Global_u16FLAGS,Tan))
    19ea:	80 91 f1 01 	lds	r24, 0x01F1
    19ee:	90 91 f2 01 	lds	r25, 0x01F2
    19f2:	80 70       	andi	r24, 0x00	; 0
    19f4:	91 70       	andi	r25, 0x01	; 1
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	09 f4       	brne	.+2      	; 0x19fc <main+0x806>
    19fa:	12 c1       	rjmp	.+548    	; 0x1c20 <main+0xa2a>
				{
					if((Global_f32Num == 90 || Global_f32Num == -90 || Global_f32Num == 270 || Global_f32Num == -270 ) && Global_f32mode == 1)
    19fc:	80 91 6e 02 	lds	r24, 0x026E
    1a00:	90 91 6f 02 	lds	r25, 0x026F
    1a04:	a0 91 70 02 	lds	r26, 0x0270
    1a08:	b0 91 71 02 	lds	r27, 0x0271
    1a0c:	bc 01       	movw	r22, r24
    1a0e:	cd 01       	movw	r24, r26
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	44 eb       	ldi	r20, 0xB4	; 180
    1a16:	52 e4       	ldi	r21, 0x42	; 66
    1a18:	0e 94 c3 04 	call	0x986	; 0x986 <__eqsf2>
    1a1c:	88 23       	and	r24, r24
    1a1e:	b1 f1       	breq	.+108    	; 0x1a8c <main+0x896>
    1a20:	80 91 6e 02 	lds	r24, 0x026E
    1a24:	90 91 6f 02 	lds	r25, 0x026F
    1a28:	a0 91 70 02 	lds	r26, 0x0270
    1a2c:	b0 91 71 02 	lds	r27, 0x0271
    1a30:	bc 01       	movw	r22, r24
    1a32:	cd 01       	movw	r24, r26
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	44 eb       	ldi	r20, 0xB4	; 180
    1a3a:	52 ec       	ldi	r21, 0xC2	; 194
    1a3c:	0e 94 c3 04 	call	0x986	; 0x986 <__eqsf2>
    1a40:	88 23       	and	r24, r24
    1a42:	21 f1       	breq	.+72     	; 0x1a8c <main+0x896>
    1a44:	80 91 6e 02 	lds	r24, 0x026E
    1a48:	90 91 6f 02 	lds	r25, 0x026F
    1a4c:	a0 91 70 02 	lds	r26, 0x0270
    1a50:	b0 91 71 02 	lds	r27, 0x0271
    1a54:	bc 01       	movw	r22, r24
    1a56:	cd 01       	movw	r24, r26
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	47 e8       	ldi	r20, 0x87	; 135
    1a5e:	53 e4       	ldi	r21, 0x43	; 67
    1a60:	0e 94 c3 04 	call	0x986	; 0x986 <__eqsf2>
    1a64:	88 23       	and	r24, r24
    1a66:	91 f0       	breq	.+36     	; 0x1a8c <main+0x896>
    1a68:	80 91 6e 02 	lds	r24, 0x026E
    1a6c:	90 91 6f 02 	lds	r25, 0x026F
    1a70:	a0 91 70 02 	lds	r26, 0x0270
    1a74:	b0 91 71 02 	lds	r27, 0x0271
    1a78:	bc 01       	movw	r22, r24
    1a7a:	cd 01       	movw	r24, r26
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	47 e8       	ldi	r20, 0x87	; 135
    1a82:	53 ec       	ldi	r21, 0xC3	; 195
    1a84:	0e 94 c3 04 	call	0x986	; 0x986 <__eqsf2>
    1a88:	88 23       	and	r24, r24
    1a8a:	f1 f4       	brne	.+60     	; 0x1ac8 <main+0x8d2>
    1a8c:	80 91 f3 01 	lds	r24, 0x01F3
    1a90:	90 91 f4 01 	lds	r25, 0x01F4
    1a94:	a0 91 f5 01 	lds	r26, 0x01F5
    1a98:	b0 91 f6 01 	lds	r27, 0x01F6
    1a9c:	bc 01       	movw	r22, r24
    1a9e:	cd 01       	movw	r24, r26
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	40 e8       	ldi	r20, 0x80	; 128
    1aa6:	5f e3       	ldi	r21, 0x3F	; 63
    1aa8:	0e 94 c3 04 	call	0x986	; 0x986 <__eqsf2>
    1aac:	88 23       	and	r24, r24
    1aae:	61 f4       	brne	.+24     	; 0x1ac8 <main+0x8d2>
					{
						Set_bit(Global_u16FLAGS, error);
    1ab0:	80 91 f1 01 	lds	r24, 0x01F1
    1ab4:	90 91 f2 01 	lds	r25, 0x01F2
    1ab8:	84 60       	ori	r24, 0x04	; 4
    1aba:	90 93 f2 01 	sts	0x01F2, r25
    1abe:	80 93 f1 01 	sts	0x01F1, r24
						LCD_enuSendChar(')');
    1ac2:	89 e2       	ldi	r24, 0x29	; 41
    1ac4:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
					}

					if((Global_f32Num == M_PI/2 || Global_f32Num == -M_PI/2 || Global_f32Num == 3*M_PI/2 || Global_f32Num == -3*M_PI/2 ) && Global_f32mode == M_PI/180.0)
    1ac8:	80 91 6e 02 	lds	r24, 0x026E
    1acc:	90 91 6f 02 	lds	r25, 0x026F
    1ad0:	a0 91 70 02 	lds	r26, 0x0270
    1ad4:	b0 91 71 02 	lds	r27, 0x0271
    1ad8:	bc 01       	movw	r22, r24
    1ada:	cd 01       	movw	r24, r26
    1adc:	2b ed       	ldi	r18, 0xDB	; 219
    1ade:	3f e0       	ldi	r19, 0x0F	; 15
    1ae0:	49 ec       	ldi	r20, 0xC9	; 201
    1ae2:	5f e3       	ldi	r21, 0x3F	; 63
    1ae4:	0e 94 c3 04 	call	0x986	; 0x986 <__eqsf2>
    1ae8:	88 23       	and	r24, r24
    1aea:	b1 f1       	breq	.+108    	; 0x1b58 <main+0x962>
    1aec:	80 91 6e 02 	lds	r24, 0x026E
    1af0:	90 91 6f 02 	lds	r25, 0x026F
    1af4:	a0 91 70 02 	lds	r26, 0x0270
    1af8:	b0 91 71 02 	lds	r27, 0x0271
    1afc:	bc 01       	movw	r22, r24
    1afe:	cd 01       	movw	r24, r26
    1b00:	2b ed       	ldi	r18, 0xDB	; 219
    1b02:	3f e0       	ldi	r19, 0x0F	; 15
    1b04:	49 ec       	ldi	r20, 0xC9	; 201
    1b06:	5f eb       	ldi	r21, 0xBF	; 191
    1b08:	0e 94 c3 04 	call	0x986	; 0x986 <__eqsf2>
    1b0c:	88 23       	and	r24, r24
    1b0e:	21 f1       	breq	.+72     	; 0x1b58 <main+0x962>
    1b10:	80 91 6e 02 	lds	r24, 0x026E
    1b14:	90 91 6f 02 	lds	r25, 0x026F
    1b18:	a0 91 70 02 	lds	r26, 0x0270
    1b1c:	b0 91 71 02 	lds	r27, 0x0271
    1b20:	bc 01       	movw	r22, r24
    1b22:	cd 01       	movw	r24, r26
    1b24:	24 ee       	ldi	r18, 0xE4	; 228
    1b26:	3b ec       	ldi	r19, 0xCB	; 203
    1b28:	46 e9       	ldi	r20, 0x96	; 150
    1b2a:	50 e4       	ldi	r21, 0x40	; 64
    1b2c:	0e 94 c3 04 	call	0x986	; 0x986 <__eqsf2>
    1b30:	88 23       	and	r24, r24
    1b32:	91 f0       	breq	.+36     	; 0x1b58 <main+0x962>
    1b34:	80 91 6e 02 	lds	r24, 0x026E
    1b38:	90 91 6f 02 	lds	r25, 0x026F
    1b3c:	a0 91 70 02 	lds	r26, 0x0270
    1b40:	b0 91 71 02 	lds	r27, 0x0271
    1b44:	bc 01       	movw	r22, r24
    1b46:	cd 01       	movw	r24, r26
    1b48:	24 ee       	ldi	r18, 0xE4	; 228
    1b4a:	3b ec       	ldi	r19, 0xCB	; 203
    1b4c:	46 e9       	ldi	r20, 0x96	; 150
    1b4e:	50 ec       	ldi	r21, 0xC0	; 192
    1b50:	0e 94 c3 04 	call	0x986	; 0x986 <__eqsf2>
    1b54:	88 23       	and	r24, r24
    1b56:	f1 f4       	brne	.+60     	; 0x1b94 <main+0x99e>
    1b58:	80 91 f3 01 	lds	r24, 0x01F3
    1b5c:	90 91 f4 01 	lds	r25, 0x01F4
    1b60:	a0 91 f5 01 	lds	r26, 0x01F5
    1b64:	b0 91 f6 01 	lds	r27, 0x01F6
    1b68:	bc 01       	movw	r22, r24
    1b6a:	cd 01       	movw	r24, r26
    1b6c:	25 e3       	ldi	r18, 0x35	; 53
    1b6e:	3a ef       	ldi	r19, 0xFA	; 250
    1b70:	4e e8       	ldi	r20, 0x8E	; 142
    1b72:	5c e3       	ldi	r21, 0x3C	; 60
    1b74:	0e 94 c3 04 	call	0x986	; 0x986 <__eqsf2>
    1b78:	88 23       	and	r24, r24
    1b7a:	61 f4       	brne	.+24     	; 0x1b94 <main+0x99e>
					{
						Set_bit(Global_u16FLAGS, error);
    1b7c:	80 91 f1 01 	lds	r24, 0x01F1
    1b80:	90 91 f2 01 	lds	r25, 0x01F2
    1b84:	84 60       	ori	r24, 0x04	; 4
    1b86:	90 93 f2 01 	sts	0x01F2, r25
    1b8a:	80 93 f1 01 	sts	0x01F1, r24
						LCD_enuSendChar(')');
    1b8e:	89 e2       	ldi	r24, 0x29	; 41
    1b90:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
					}

					Global_Af32Operands[Local_u8It1] = _tan(Global_f32Num*(M_PI/180.0)*(1/Global_f32mode));
    1b94:	80 91 6c 02 	lds	r24, 0x026C
    1b98:	c8 2e       	mov	r12, r24
    1b9a:	dd 24       	eor	r13, r13
    1b9c:	80 91 6e 02 	lds	r24, 0x026E
    1ba0:	90 91 6f 02 	lds	r25, 0x026F
    1ba4:	a0 91 70 02 	lds	r26, 0x0270
    1ba8:	b0 91 71 02 	lds	r27, 0x0271
    1bac:	bc 01       	movw	r22, r24
    1bae:	cd 01       	movw	r24, r26
    1bb0:	25 e3       	ldi	r18, 0x35	; 53
    1bb2:	3a ef       	ldi	r19, 0xFA	; 250
    1bb4:	4e e8       	ldi	r20, 0x8E	; 142
    1bb6:	5c e3       	ldi	r21, 0x3C	; 60
    1bb8:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	7c 01       	movw	r14, r24
    1bc2:	8d 01       	movw	r16, r26
    1bc4:	20 91 f3 01 	lds	r18, 0x01F3
    1bc8:	30 91 f4 01 	lds	r19, 0x01F4
    1bcc:	40 91 f5 01 	lds	r20, 0x01F5
    1bd0:	50 91 f6 01 	lds	r21, 0x01F6
    1bd4:	60 e0       	ldi	r22, 0x00	; 0
    1bd6:	70 e0       	ldi	r23, 0x00	; 0
    1bd8:	80 e8       	ldi	r24, 0x80	; 128
    1bda:	9f e3       	ldi	r25, 0x3F	; 63
    1bdc:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	9c 01       	movw	r18, r24
    1be6:	ad 01       	movw	r20, r26
    1be8:	c8 01       	movw	r24, r16
    1bea:	b7 01       	movw	r22, r14
    1bec:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	bc 01       	movw	r22, r24
    1bf6:	cd 01       	movw	r24, r26
    1bf8:	0e 94 62 23 	call	0x46c4	; 0x46c4 <_tan>
    1bfc:	9b 01       	movw	r18, r22
    1bfe:	ac 01       	movw	r20, r24
    1c00:	c6 01       	movw	r24, r12
    1c02:	88 0f       	add	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	88 0f       	add	r24, r24
    1c08:	99 1f       	adc	r25, r25
    1c0a:	fc 01       	movw	r30, r24
    1c0c:	ec 5b       	subi	r30, 0xBC	; 188
    1c0e:	fd 4f       	sbci	r31, 0xFD	; 253
    1c10:	20 83       	st	Z, r18
    1c12:	31 83       	std	Z+1, r19	; 0x01
    1c14:	42 83       	std	Z+2, r20	; 0x02
    1c16:	53 83       	std	Z+3, r21	; 0x03
					LCD_enuSendChar(')');
    1c18:	89 e2       	ldi	r24, 0x29	; 41
    1c1a:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    1c1e:	ed c1       	rjmp	.+986    	; 0x1ffa <main+0xe04>
				}
				else if(Get_bit(Global_u16FLAGS,Exp ))
    1c20:	80 91 f1 01 	lds	r24, 0x01F1
    1c24:	90 91 f2 01 	lds	r25, 0x01F2
    1c28:	80 70       	andi	r24, 0x00	; 0
    1c2a:	94 70       	andi	r25, 0x04	; 4
    1c2c:	00 97       	sbiw	r24, 0x00	; 0
    1c2e:	11 f1       	breq	.+68     	; 0x1c74 <main+0xa7e>
				{
					Global_Af32Operands[Local_u8It1] = expo(Global_f32Num);
    1c30:	80 91 6c 02 	lds	r24, 0x026C
    1c34:	08 2f       	mov	r16, r24
    1c36:	10 e0       	ldi	r17, 0x00	; 0
    1c38:	80 91 6e 02 	lds	r24, 0x026E
    1c3c:	90 91 6f 02 	lds	r25, 0x026F
    1c40:	a0 91 70 02 	lds	r26, 0x0270
    1c44:	b0 91 71 02 	lds	r27, 0x0271
    1c48:	bc 01       	movw	r22, r24
    1c4a:	cd 01       	movw	r24, r26
    1c4c:	0e 94 97 23 	call	0x472e	; 0x472e <expo>
    1c50:	9b 01       	movw	r18, r22
    1c52:	ac 01       	movw	r20, r24
    1c54:	c8 01       	movw	r24, r16
    1c56:	88 0f       	add	r24, r24
    1c58:	99 1f       	adc	r25, r25
    1c5a:	88 0f       	add	r24, r24
    1c5c:	99 1f       	adc	r25, r25
    1c5e:	fc 01       	movw	r30, r24
    1c60:	ec 5b       	subi	r30, 0xBC	; 188
    1c62:	fd 4f       	sbci	r31, 0xFD	; 253
    1c64:	20 83       	st	Z, r18
    1c66:	31 83       	std	Z+1, r19	; 0x01
    1c68:	42 83       	std	Z+2, r20	; 0x02
    1c6a:	53 83       	std	Z+3, r21	; 0x03
					LCD_enuSendChar(')');
    1c6c:	89 e2       	ldi	r24, 0x29	; 41
    1c6e:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    1c72:	c3 c1       	rjmp	.+902    	; 0x1ffa <main+0xe04>
				}
				else if(Get_bit(Global_u16HYP,Atan))
    1c74:	80 91 72 02 	lds	r24, 0x0272
    1c78:	90 91 73 02 	lds	r25, 0x0273
    1c7c:	80 72       	andi	r24, 0x20	; 32
    1c7e:	90 70       	andi	r25, 0x00	; 0
    1c80:	00 97       	sbiw	r24, 0x00	; 0
    1c82:	e1 f1       	breq	.+120    	; 0x1cfc <main+0xb06>
				{
					Global_Af32Operands[Local_u8It1] = my_atan(Global_f32Num)*(180.0/M_PI)*Global_f32mode;
    1c84:	80 91 6c 02 	lds	r24, 0x026C
    1c88:	08 2f       	mov	r16, r24
    1c8a:	10 e0       	ldi	r17, 0x00	; 0
    1c8c:	80 91 6e 02 	lds	r24, 0x026E
    1c90:	90 91 6f 02 	lds	r25, 0x026F
    1c94:	a0 91 70 02 	lds	r26, 0x0270
    1c98:	b0 91 71 02 	lds	r27, 0x0271
    1c9c:	bc 01       	movw	r22, r24
    1c9e:	cd 01       	movw	r24, r26
    1ca0:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <my_atan>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	bc 01       	movw	r22, r24
    1caa:	cd 01       	movw	r24, r26
    1cac:	20 ee       	ldi	r18, 0xE0	; 224
    1cae:	3e e2       	ldi	r19, 0x2E	; 46
    1cb0:	45 e6       	ldi	r20, 0x65	; 101
    1cb2:	52 e4       	ldi	r21, 0x42	; 66
    1cb4:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	20 91 f3 01 	lds	r18, 0x01F3
    1cc0:	30 91 f4 01 	lds	r19, 0x01F4
    1cc4:	40 91 f5 01 	lds	r20, 0x01F5
    1cc8:	50 91 f6 01 	lds	r21, 0x01F6
    1ccc:	bc 01       	movw	r22, r24
    1cce:	cd 01       	movw	r24, r26
    1cd0:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	9c 01       	movw	r18, r24
    1cda:	ad 01       	movw	r20, r26
    1cdc:	c8 01       	movw	r24, r16
    1cde:	88 0f       	add	r24, r24
    1ce0:	99 1f       	adc	r25, r25
    1ce2:	88 0f       	add	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	fc 01       	movw	r30, r24
    1ce8:	ec 5b       	subi	r30, 0xBC	; 188
    1cea:	fd 4f       	sbci	r31, 0xFD	; 253
    1cec:	20 83       	st	Z, r18
    1cee:	31 83       	std	Z+1, r19	; 0x01
    1cf0:	42 83       	std	Z+2, r20	; 0x02
    1cf2:	53 83       	std	Z+3, r21	; 0x03
					LCD_enuSendChar(')');
    1cf4:	89 e2       	ldi	r24, 0x29	; 41
    1cf6:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    1cfa:	7f c1       	rjmp	.+766    	; 0x1ffa <main+0xe04>
				}
				else if(Get_bit(Global_u16HYP,Asin))
    1cfc:	80 91 72 02 	lds	r24, 0x0272
    1d00:	90 91 73 02 	lds	r25, 0x0273
    1d04:	88 70       	andi	r24, 0x08	; 8
    1d06:	90 70       	andi	r25, 0x00	; 0
    1d08:	00 97       	sbiw	r24, 0x00	; 0
    1d0a:	09 f4       	brne	.+2      	; 0x1d0e <main+0xb18>
    1d0c:	6c c0       	rjmp	.+216    	; 0x1de6 <main+0xbf0>
				{
					if(Global_f32Num > 1 || Global_f32Num < -1)
    1d0e:	80 91 6e 02 	lds	r24, 0x026E
    1d12:	90 91 6f 02 	lds	r25, 0x026F
    1d16:	a0 91 70 02 	lds	r26, 0x0270
    1d1a:	b0 91 71 02 	lds	r27, 0x0271
    1d1e:	bc 01       	movw	r22, r24
    1d20:	cd 01       	movw	r24, r26
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	40 e8       	ldi	r20, 0x80	; 128
    1d28:	5f e3       	ldi	r21, 0x3F	; 63
    1d2a:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    1d2e:	18 16       	cp	r1, r24
    1d30:	94 f0       	brlt	.+36     	; 0x1d56 <main+0xb60>
    1d32:	80 91 6e 02 	lds	r24, 0x026E
    1d36:	90 91 6f 02 	lds	r25, 0x026F
    1d3a:	a0 91 70 02 	lds	r26, 0x0270
    1d3e:	b0 91 71 02 	lds	r27, 0x0271
    1d42:	bc 01       	movw	r22, r24
    1d44:	cd 01       	movw	r24, r26
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	40 e8       	ldi	r20, 0x80	; 128
    1d4c:	5f eb       	ldi	r21, 0xBF	; 191
    1d4e:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    1d52:	88 23       	and	r24, r24
    1d54:	64 f4       	brge	.+24     	; 0x1d6e <main+0xb78>
					{
						Set_bit(Global_u16FLAGS, error);
    1d56:	80 91 f1 01 	lds	r24, 0x01F1
    1d5a:	90 91 f2 01 	lds	r25, 0x01F2
    1d5e:	84 60       	ori	r24, 0x04	; 4
    1d60:	90 93 f2 01 	sts	0x01F2, r25
    1d64:	80 93 f1 01 	sts	0x01F1, r24
						LCD_enuSendChar(')');
    1d68:	89 e2       	ldi	r24, 0x29	; 41
    1d6a:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
					}
					Global_Af32Operands[Local_u8It1] = my_asin(Global_f32Num)*(180.0/M_PI)*Global_f32mode;
    1d6e:	80 91 6c 02 	lds	r24, 0x026C
    1d72:	08 2f       	mov	r16, r24
    1d74:	10 e0       	ldi	r17, 0x00	; 0
    1d76:	80 91 6e 02 	lds	r24, 0x026E
    1d7a:	90 91 6f 02 	lds	r25, 0x026F
    1d7e:	a0 91 70 02 	lds	r26, 0x0270
    1d82:	b0 91 71 02 	lds	r27, 0x0271
    1d86:	bc 01       	movw	r22, r24
    1d88:	cd 01       	movw	r24, r26
    1d8a:	0e 94 07 28 	call	0x500e	; 0x500e <my_asin>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	bc 01       	movw	r22, r24
    1d94:	cd 01       	movw	r24, r26
    1d96:	20 ee       	ldi	r18, 0xE0	; 224
    1d98:	3e e2       	ldi	r19, 0x2E	; 46
    1d9a:	45 e6       	ldi	r20, 0x65	; 101
    1d9c:	52 e4       	ldi	r21, 0x42	; 66
    1d9e:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	20 91 f3 01 	lds	r18, 0x01F3
    1daa:	30 91 f4 01 	lds	r19, 0x01F4
    1dae:	40 91 f5 01 	lds	r20, 0x01F5
    1db2:	50 91 f6 01 	lds	r21, 0x01F6
    1db6:	bc 01       	movw	r22, r24
    1db8:	cd 01       	movw	r24, r26
    1dba:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	9c 01       	movw	r18, r24
    1dc4:	ad 01       	movw	r20, r26
    1dc6:	c8 01       	movw	r24, r16
    1dc8:	88 0f       	add	r24, r24
    1dca:	99 1f       	adc	r25, r25
    1dcc:	88 0f       	add	r24, r24
    1dce:	99 1f       	adc	r25, r25
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	ec 5b       	subi	r30, 0xBC	; 188
    1dd4:	fd 4f       	sbci	r31, 0xFD	; 253
    1dd6:	20 83       	st	Z, r18
    1dd8:	31 83       	std	Z+1, r19	; 0x01
    1dda:	42 83       	std	Z+2, r20	; 0x02
    1ddc:	53 83       	std	Z+3, r21	; 0x03
					LCD_enuSendChar(')');
    1dde:	89 e2       	ldi	r24, 0x29	; 41
    1de0:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    1de4:	0a c1       	rjmp	.+532    	; 0x1ffa <main+0xe04>
				}
				else if(Get_bit(Global_u16HYP,Acos))
    1de6:	80 91 72 02 	lds	r24, 0x0272
    1dea:	90 91 73 02 	lds	r25, 0x0273
    1dee:	80 71       	andi	r24, 0x10	; 16
    1df0:	90 70       	andi	r25, 0x00	; 0
    1df2:	00 97       	sbiw	r24, 0x00	; 0
    1df4:	09 f4       	brne	.+2      	; 0x1df8 <main+0xc02>
    1df6:	6c c0       	rjmp	.+216    	; 0x1ed0 <main+0xcda>
				{
					if(Global_f32Num > 1 || Global_f32Num < -1)
    1df8:	80 91 6e 02 	lds	r24, 0x026E
    1dfc:	90 91 6f 02 	lds	r25, 0x026F
    1e00:	a0 91 70 02 	lds	r26, 0x0270
    1e04:	b0 91 71 02 	lds	r27, 0x0271
    1e08:	bc 01       	movw	r22, r24
    1e0a:	cd 01       	movw	r24, r26
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	40 e8       	ldi	r20, 0x80	; 128
    1e12:	5f e3       	ldi	r21, 0x3F	; 63
    1e14:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    1e18:	18 16       	cp	r1, r24
    1e1a:	94 f0       	brlt	.+36     	; 0x1e40 <main+0xc4a>
    1e1c:	80 91 6e 02 	lds	r24, 0x026E
    1e20:	90 91 6f 02 	lds	r25, 0x026F
    1e24:	a0 91 70 02 	lds	r26, 0x0270
    1e28:	b0 91 71 02 	lds	r27, 0x0271
    1e2c:	bc 01       	movw	r22, r24
    1e2e:	cd 01       	movw	r24, r26
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	40 e8       	ldi	r20, 0x80	; 128
    1e36:	5f eb       	ldi	r21, 0xBF	; 191
    1e38:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    1e3c:	88 23       	and	r24, r24
    1e3e:	64 f4       	brge	.+24     	; 0x1e58 <main+0xc62>
					{
						Set_bit(Global_u16FLAGS, error);
    1e40:	80 91 f1 01 	lds	r24, 0x01F1
    1e44:	90 91 f2 01 	lds	r25, 0x01F2
    1e48:	84 60       	ori	r24, 0x04	; 4
    1e4a:	90 93 f2 01 	sts	0x01F2, r25
    1e4e:	80 93 f1 01 	sts	0x01F1, r24
						LCD_enuSendChar(')');
    1e52:	89 e2       	ldi	r24, 0x29	; 41
    1e54:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>

					}
					Global_Af32Operands[Local_u8It1] = my_acos(Global_f32Num)*(180.0/M_PI)*Global_f32mode;
    1e58:	80 91 6c 02 	lds	r24, 0x026C
    1e5c:	08 2f       	mov	r16, r24
    1e5e:	10 e0       	ldi	r17, 0x00	; 0
    1e60:	80 91 6e 02 	lds	r24, 0x026E
    1e64:	90 91 6f 02 	lds	r25, 0x026F
    1e68:	a0 91 70 02 	lds	r26, 0x0270
    1e6c:	b0 91 71 02 	lds	r27, 0x0271
    1e70:	bc 01       	movw	r22, r24
    1e72:	cd 01       	movw	r24, r26
    1e74:	0e 94 44 28 	call	0x5088	; 0x5088 <my_acos>
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	bc 01       	movw	r22, r24
    1e7e:	cd 01       	movw	r24, r26
    1e80:	20 ee       	ldi	r18, 0xE0	; 224
    1e82:	3e e2       	ldi	r19, 0x2E	; 46
    1e84:	45 e6       	ldi	r20, 0x65	; 101
    1e86:	52 e4       	ldi	r21, 0x42	; 66
    1e88:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	20 91 f3 01 	lds	r18, 0x01F3
    1e94:	30 91 f4 01 	lds	r19, 0x01F4
    1e98:	40 91 f5 01 	lds	r20, 0x01F5
    1e9c:	50 91 f6 01 	lds	r21, 0x01F6
    1ea0:	bc 01       	movw	r22, r24
    1ea2:	cd 01       	movw	r24, r26
    1ea4:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	9c 01       	movw	r18, r24
    1eae:	ad 01       	movw	r20, r26
    1eb0:	c8 01       	movw	r24, r16
    1eb2:	88 0f       	add	r24, r24
    1eb4:	99 1f       	adc	r25, r25
    1eb6:	88 0f       	add	r24, r24
    1eb8:	99 1f       	adc	r25, r25
    1eba:	fc 01       	movw	r30, r24
    1ebc:	ec 5b       	subi	r30, 0xBC	; 188
    1ebe:	fd 4f       	sbci	r31, 0xFD	; 253
    1ec0:	20 83       	st	Z, r18
    1ec2:	31 83       	std	Z+1, r19	; 0x01
    1ec4:	42 83       	std	Z+2, r20	; 0x02
    1ec6:	53 83       	std	Z+3, r21	; 0x03
					LCD_enuSendChar(')');
    1ec8:	89 e2       	ldi	r24, 0x29	; 41
    1eca:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    1ece:	95 c0       	rjmp	.+298    	; 0x1ffa <main+0xe04>
				}
				else if(Get_bit(Global_u16HYP,Sinh))
    1ed0:	80 91 72 02 	lds	r24, 0x0272
    1ed4:	90 91 73 02 	lds	r25, 0x0273
    1ed8:	81 70       	andi	r24, 0x01	; 1
    1eda:	90 70       	andi	r25, 0x00	; 0
    1edc:	88 23       	and	r24, r24
    1ede:	11 f1       	breq	.+68     	; 0x1f24 <main+0xd2e>
				{
					Global_Af32Operands[Local_u8It1] = _sinh(Global_f32Num);
    1ee0:	80 91 6c 02 	lds	r24, 0x026C
    1ee4:	08 2f       	mov	r16, r24
    1ee6:	10 e0       	ldi	r17, 0x00	; 0
    1ee8:	80 91 6e 02 	lds	r24, 0x026E
    1eec:	90 91 6f 02 	lds	r25, 0x026F
    1ef0:	a0 91 70 02 	lds	r26, 0x0270
    1ef4:	b0 91 71 02 	lds	r27, 0x0271
    1ef8:	bc 01       	movw	r22, r24
    1efa:	cd 01       	movw	r24, r26
    1efc:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <_sinh>
    1f00:	9b 01       	movw	r18, r22
    1f02:	ac 01       	movw	r20, r24
    1f04:	c8 01       	movw	r24, r16
    1f06:	88 0f       	add	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	88 0f       	add	r24, r24
    1f0c:	99 1f       	adc	r25, r25
    1f0e:	fc 01       	movw	r30, r24
    1f10:	ec 5b       	subi	r30, 0xBC	; 188
    1f12:	fd 4f       	sbci	r31, 0xFD	; 253
    1f14:	20 83       	st	Z, r18
    1f16:	31 83       	std	Z+1, r19	; 0x01
    1f18:	42 83       	std	Z+2, r20	; 0x02
    1f1a:	53 83       	std	Z+3, r21	; 0x03
					LCD_enuSendChar(')');
    1f1c:	89 e2       	ldi	r24, 0x29	; 41
    1f1e:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    1f22:	6b c0       	rjmp	.+214    	; 0x1ffa <main+0xe04>
				}
				else if(Get_bit(Global_u16HYP,Cosh))
    1f24:	80 91 72 02 	lds	r24, 0x0272
    1f28:	90 91 73 02 	lds	r25, 0x0273
    1f2c:	82 70       	andi	r24, 0x02	; 2
    1f2e:	90 70       	andi	r25, 0x00	; 0
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	11 f1       	breq	.+68     	; 0x1f78 <main+0xd82>
				{
					Global_Af32Operands[Local_u8It1] = _cosh(Global_f32Num);
    1f34:	80 91 6c 02 	lds	r24, 0x026C
    1f38:	08 2f       	mov	r16, r24
    1f3a:	10 e0       	ldi	r17, 0x00	; 0
    1f3c:	80 91 6e 02 	lds	r24, 0x026E
    1f40:	90 91 6f 02 	lds	r25, 0x026F
    1f44:	a0 91 70 02 	lds	r26, 0x0270
    1f48:	b0 91 71 02 	lds	r27, 0x0271
    1f4c:	bc 01       	movw	r22, r24
    1f4e:	cd 01       	movw	r24, r26
    1f50:	0e 94 a9 2a 	call	0x5552	; 0x5552 <_cosh>
    1f54:	9b 01       	movw	r18, r22
    1f56:	ac 01       	movw	r20, r24
    1f58:	c8 01       	movw	r24, r16
    1f5a:	88 0f       	add	r24, r24
    1f5c:	99 1f       	adc	r25, r25
    1f5e:	88 0f       	add	r24, r24
    1f60:	99 1f       	adc	r25, r25
    1f62:	fc 01       	movw	r30, r24
    1f64:	ec 5b       	subi	r30, 0xBC	; 188
    1f66:	fd 4f       	sbci	r31, 0xFD	; 253
    1f68:	20 83       	st	Z, r18
    1f6a:	31 83       	std	Z+1, r19	; 0x01
    1f6c:	42 83       	std	Z+2, r20	; 0x02
    1f6e:	53 83       	std	Z+3, r21	; 0x03
					LCD_enuSendChar(')');
    1f70:	89 e2       	ldi	r24, 0x29	; 41
    1f72:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    1f76:	41 c0       	rjmp	.+130    	; 0x1ffa <main+0xe04>
				}
				else if(Get_bit(Global_u16HYP,Tanh))
    1f78:	80 91 72 02 	lds	r24, 0x0272
    1f7c:	90 91 73 02 	lds	r25, 0x0273
    1f80:	84 70       	andi	r24, 0x04	; 4
    1f82:	90 70       	andi	r25, 0x00	; 0
    1f84:	00 97       	sbiw	r24, 0x00	; 0
    1f86:	11 f1       	breq	.+68     	; 0x1fcc <main+0xdd6>
				{
					Global_Af32Operands[Local_u8It1] = _tanh(Global_f32Num);
    1f88:	80 91 6c 02 	lds	r24, 0x026C
    1f8c:	08 2f       	mov	r16, r24
    1f8e:	10 e0       	ldi	r17, 0x00	; 0
    1f90:	80 91 6e 02 	lds	r24, 0x026E
    1f94:	90 91 6f 02 	lds	r25, 0x026F
    1f98:	a0 91 70 02 	lds	r26, 0x0270
    1f9c:	b0 91 71 02 	lds	r27, 0x0271
    1fa0:	bc 01       	movw	r22, r24
    1fa2:	cd 01       	movw	r24, r26
    1fa4:	0e 94 e9 2a 	call	0x55d2	; 0x55d2 <_tanh>
    1fa8:	9b 01       	movw	r18, r22
    1faa:	ac 01       	movw	r20, r24
    1fac:	c8 01       	movw	r24, r16
    1fae:	88 0f       	add	r24, r24
    1fb0:	99 1f       	adc	r25, r25
    1fb2:	88 0f       	add	r24, r24
    1fb4:	99 1f       	adc	r25, r25
    1fb6:	fc 01       	movw	r30, r24
    1fb8:	ec 5b       	subi	r30, 0xBC	; 188
    1fba:	fd 4f       	sbci	r31, 0xFD	; 253
    1fbc:	20 83       	st	Z, r18
    1fbe:	31 83       	std	Z+1, r19	; 0x01
    1fc0:	42 83       	std	Z+2, r20	; 0x02
    1fc2:	53 83       	std	Z+3, r21	; 0x03
					LCD_enuSendChar(')');
    1fc4:	89 e2       	ldi	r24, 0x29	; 41
    1fc6:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    1fca:	17 c0       	rjmp	.+46     	; 0x1ffa <main+0xe04>
				}
				else
				{
					Global_Af32Operands[Local_u8It1] = Global_f32Num;
    1fcc:	80 91 6c 02 	lds	r24, 0x026C
    1fd0:	88 2f       	mov	r24, r24
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	20 91 6e 02 	lds	r18, 0x026E
    1fd8:	30 91 6f 02 	lds	r19, 0x026F
    1fdc:	40 91 70 02 	lds	r20, 0x0270
    1fe0:	50 91 71 02 	lds	r21, 0x0271
    1fe4:	88 0f       	add	r24, r24
    1fe6:	99 1f       	adc	r25, r25
    1fe8:	88 0f       	add	r24, r24
    1fea:	99 1f       	adc	r25, r25
    1fec:	fc 01       	movw	r30, r24
    1fee:	ec 5b       	subi	r30, 0xBC	; 188
    1ff0:	fd 4f       	sbci	r31, 0xFD	; 253
    1ff2:	20 83       	st	Z, r18
    1ff4:	31 83       	std	Z+1, r19	; 0x01
    1ff6:	42 83       	std	Z+2, r20	; 0x02
    1ff8:	53 83       	std	Z+3, r21	; 0x03
				}

				Global_u16FLAGS &= 0xfa1f;
    1ffa:	80 91 f1 01 	lds	r24, 0x01F1
    1ffe:	90 91 f2 01 	lds	r25, 0x01F2
    2002:	8f 71       	andi	r24, 0x1F	; 31
    2004:	9a 7f       	andi	r25, 0xFA	; 250
    2006:	90 93 f2 01 	sts	0x01F2, r25
    200a:	80 93 f1 01 	sts	0x01F1, r24
				Global_u16HYP =0;
    200e:	10 92 73 02 	sts	0x0273, r1
    2012:	10 92 72 02 	sts	0x0272, r1
				Clr_bit(Global_u16FLAGS,last_is_tri);
    2016:	80 91 f1 01 	lds	r24, 0x01F1
    201a:	90 91 f2 01 	lds	r25, 0x01F2
    201e:	97 7f       	andi	r25, 0xF7	; 247
    2020:	90 93 f2 01 	sts	0x01F2, r25
    2024:	80 93 f1 01 	sts	0x01F1, r24


				if(Get_bit(Global_u16FLAGS,error))
    2028:	80 91 f1 01 	lds	r24, 0x01F1
    202c:	90 91 f2 01 	lds	r25, 0x01F2
    2030:	84 70       	andi	r24, 0x04	; 4
    2032:	90 70       	andi	r25, 0x00	; 0
    2034:	00 97       	sbiw	r24, 0x00	; 0
    2036:	91 f0       	breq	.+36     	; 0x205c <main+0xe66>
				{
					LCD_enuClearDisplay();
    2038:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <LCD_enuClearDisplay>
					LCD_enuDisplayString("Math error!!..");
    203c:	84 ea       	ldi	r24, 0xA4	; 164
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>

					Local_Clear();
    2044:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <Local_Clear>

					Set_bit(Global_u16FLAGS,must_clear);
    2048:	80 91 f1 01 	lds	r24, 0x01F1
    204c:	90 91 f2 01 	lds	r25, 0x01F2
    2050:	90 62       	ori	r25, 0x20	; 32
    2052:	90 93 f2 01 	sts	0x01F2, r25
    2056:	80 93 f1 01 	sts	0x01F1, r24
    205a:	dc c8       	rjmp	.-3656   	; 0x1214 <main+0x1e>
					continue;
				}

				LCD_enuSendChar(Global_u8PressedKey);
    205c:	80 91 ef 01 	lds	r24, 0x01EF
    2060:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
				LCD_enuGoto(2,0);
    2064:	82 e0       	ldi	r24, 0x02	; 2
    2066:	60 e0       	ldi	r22, 0x00	; 0
    2068:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <LCD_enuGoto>


				for(Local_u8Iter = 0; Local_u8Iter < 8; ++Local_u8Iter)
    206c:	10 92 7e 02 	sts	0x027E, r1
    2070:	bc c0       	rjmp	.+376    	; 0x21ea <main+0xff4>
				{
					if(Global_u8Operations[Local_u8Iter] == ';')
    2072:	80 91 7e 02 	lds	r24, 0x027E
    2076:	88 2f       	mov	r24, r24
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	fc 01       	movw	r30, r24
    207c:	ec 59       	subi	r30, 0x9C	; 156
    207e:	fd 4f       	sbci	r31, 0xFD	; 253
    2080:	80 81       	ld	r24, Z
    2082:	8b 33       	cpi	r24, 0x3B	; 59
    2084:	09 f0       	breq	.+2      	; 0x2088 <main+0xe92>
    2086:	ac c0       	rjmp	.+344    	; 0x21e0 <main+0xfea>
					{

						Global_Af32Operands[Local_u8Iter] = _pow(Global_Af32Operands[Local_u8Iter], Global_Af32Operands[Local_u8Iter + 1]);
    2088:	80 91 7e 02 	lds	r24, 0x027E
    208c:	c8 2e       	mov	r12, r24
    208e:	dd 24       	eor	r13, r13
    2090:	80 91 7e 02 	lds	r24, 0x027E
    2094:	88 2f       	mov	r24, r24
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	88 0f       	add	r24, r24
    209a:	99 1f       	adc	r25, r25
    209c:	88 0f       	add	r24, r24
    209e:	99 1f       	adc	r25, r25
    20a0:	fc 01       	movw	r30, r24
    20a2:	ec 5b       	subi	r30, 0xBC	; 188
    20a4:	fd 4f       	sbci	r31, 0xFD	; 253
    20a6:	e0 80       	ld	r14, Z
    20a8:	f1 80       	ldd	r15, Z+1	; 0x01
    20aa:	02 81       	ldd	r16, Z+2	; 0x02
    20ac:	13 81       	ldd	r17, Z+3	; 0x03
    20ae:	80 91 7e 02 	lds	r24, 0x027E
    20b2:	88 2f       	mov	r24, r24
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	01 96       	adiw	r24, 0x01	; 1
    20b8:	88 0f       	add	r24, r24
    20ba:	99 1f       	adc	r25, r25
    20bc:	88 0f       	add	r24, r24
    20be:	99 1f       	adc	r25, r25
    20c0:	fc 01       	movw	r30, r24
    20c2:	ec 5b       	subi	r30, 0xBC	; 188
    20c4:	fd 4f       	sbci	r31, 0xFD	; 253
    20c6:	80 81       	ld	r24, Z
    20c8:	91 81       	ldd	r25, Z+1	; 0x01
    20ca:	a2 81       	ldd	r26, Z+2	; 0x02
    20cc:	b3 81       	ldd	r27, Z+3	; 0x03
    20ce:	bc 01       	movw	r22, r24
    20d0:	cd 01       	movw	r24, r26
    20d2:	0e 94 11 06 	call	0xc22	; 0xc22 <__fixsfsi>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	28 2f       	mov	r18, r24
    20dc:	c8 01       	movw	r24, r16
    20de:	b7 01       	movw	r22, r14
    20e0:	42 2f       	mov	r20, r18
    20e2:	0e 94 09 21 	call	0x4212	; 0x4212 <_pow>
    20e6:	9b 01       	movw	r18, r22
    20e8:	ac 01       	movw	r20, r24
    20ea:	c6 01       	movw	r24, r12
    20ec:	88 0f       	add	r24, r24
    20ee:	99 1f       	adc	r25, r25
    20f0:	88 0f       	add	r24, r24
    20f2:	99 1f       	adc	r25, r25
    20f4:	fc 01       	movw	r30, r24
    20f6:	ec 5b       	subi	r30, 0xBC	; 188
    20f8:	fd 4f       	sbci	r31, 0xFD	; 253
    20fa:	20 83       	st	Z, r18
    20fc:	31 83       	std	Z+1, r19	; 0x01
    20fe:	42 83       	std	Z+2, r20	; 0x02
    2100:	53 83       	std	Z+3, r21	; 0x03
						Global_Af32Operands[Local_u8Iter + 1] = 0;
    2102:	80 91 7e 02 	lds	r24, 0x027E
    2106:	88 2f       	mov	r24, r24
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	01 96       	adiw	r24, 0x01	; 1
    210c:	88 0f       	add	r24, r24
    210e:	99 1f       	adc	r25, r25
    2110:	88 0f       	add	r24, r24
    2112:	99 1f       	adc	r25, r25
    2114:	fc 01       	movw	r30, r24
    2116:	ec 5b       	subi	r30, 0xBC	; 188
    2118:	fd 4f       	sbci	r31, 0xFD	; 253
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	a0 e0       	ldi	r26, 0x00	; 0
    2120:	b0 e0       	ldi	r27, 0x00	; 0
    2122:	80 83       	st	Z, r24
    2124:	91 83       	std	Z+1, r25	; 0x01
    2126:	a2 83       	std	Z+2, r26	; 0x02
    2128:	b3 83       	std	Z+3, r27	; 0x03
						Global_u8Operations[Local_u8Iter] = 0;
    212a:	80 91 7e 02 	lds	r24, 0x027E
    212e:	88 2f       	mov	r24, r24
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	fc 01       	movw	r30, r24
    2134:	ec 59       	subi	r30, 0x9C	; 156
    2136:	fd 4f       	sbci	r31, 0xFD	; 253
    2138:	10 82       	st	Z, r1
						for(j = Local_u8Iter + 1; j < 7; ++j)
    213a:	80 91 7e 02 	lds	r24, 0x027E
    213e:	8f 5f       	subi	r24, 0xFF	; 255
    2140:	80 93 7b 02 	sts	0x027B, r24
    2144:	25 c0       	rjmp	.+74     	; 0x2190 <main+0xf9a>
						{
							Global_Af32Operands[j] = Global_Af32Operands[j + 1];
    2146:	80 91 7b 02 	lds	r24, 0x027B
    214a:	68 2f       	mov	r22, r24
    214c:	70 e0       	ldi	r23, 0x00	; 0
    214e:	80 91 7b 02 	lds	r24, 0x027B
    2152:	88 2f       	mov	r24, r24
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	01 96       	adiw	r24, 0x01	; 1
    2158:	88 0f       	add	r24, r24
    215a:	99 1f       	adc	r25, r25
    215c:	88 0f       	add	r24, r24
    215e:	99 1f       	adc	r25, r25
    2160:	fc 01       	movw	r30, r24
    2162:	ec 5b       	subi	r30, 0xBC	; 188
    2164:	fd 4f       	sbci	r31, 0xFD	; 253
    2166:	20 81       	ld	r18, Z
    2168:	31 81       	ldd	r19, Z+1	; 0x01
    216a:	42 81       	ldd	r20, Z+2	; 0x02
    216c:	53 81       	ldd	r21, Z+3	; 0x03
    216e:	cb 01       	movw	r24, r22
    2170:	88 0f       	add	r24, r24
    2172:	99 1f       	adc	r25, r25
    2174:	88 0f       	add	r24, r24
    2176:	99 1f       	adc	r25, r25
    2178:	fc 01       	movw	r30, r24
    217a:	ec 5b       	subi	r30, 0xBC	; 188
    217c:	fd 4f       	sbci	r31, 0xFD	; 253
    217e:	20 83       	st	Z, r18
    2180:	31 83       	std	Z+1, r19	; 0x01
    2182:	42 83       	std	Z+2, r20	; 0x02
    2184:	53 83       	std	Z+3, r21	; 0x03
					{

						Global_Af32Operands[Local_u8Iter] = _pow(Global_Af32Operands[Local_u8Iter], Global_Af32Operands[Local_u8Iter + 1]);
						Global_Af32Operands[Local_u8Iter + 1] = 0;
						Global_u8Operations[Local_u8Iter] = 0;
						for(j = Local_u8Iter + 1; j < 7; ++j)
    2186:	80 91 7b 02 	lds	r24, 0x027B
    218a:	8f 5f       	subi	r24, 0xFF	; 255
    218c:	80 93 7b 02 	sts	0x027B, r24
    2190:	80 91 7b 02 	lds	r24, 0x027B
    2194:	87 30       	cpi	r24, 0x07	; 7
    2196:	b8 f2       	brcs	.-82     	; 0x2146 <main+0xf50>
						{
							Global_Af32Operands[j] = Global_Af32Operands[j + 1];
						}
						for(j = Local_u8Iter ; j < 7; ++j)
    2198:	80 91 7e 02 	lds	r24, 0x027E
    219c:	80 93 7b 02 	sts	0x027B, r24
    21a0:	16 c0       	rjmp	.+44     	; 0x21ce <main+0xfd8>
						{
							Global_u8Operations[j] = Global_u8Operations[j + 1];
    21a2:	80 91 7b 02 	lds	r24, 0x027B
    21a6:	28 2f       	mov	r18, r24
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	80 91 7b 02 	lds	r24, 0x027B
    21ae:	88 2f       	mov	r24, r24
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	01 96       	adiw	r24, 0x01	; 1
    21b4:	fc 01       	movw	r30, r24
    21b6:	ec 59       	subi	r30, 0x9C	; 156
    21b8:	fd 4f       	sbci	r31, 0xFD	; 253
    21ba:	80 81       	ld	r24, Z
    21bc:	f9 01       	movw	r30, r18
    21be:	ec 59       	subi	r30, 0x9C	; 156
    21c0:	fd 4f       	sbci	r31, 0xFD	; 253
    21c2:	80 83       	st	Z, r24
						Global_u8Operations[Local_u8Iter] = 0;
						for(j = Local_u8Iter + 1; j < 7; ++j)
						{
							Global_Af32Operands[j] = Global_Af32Operands[j + 1];
						}
						for(j = Local_u8Iter ; j < 7; ++j)
    21c4:	80 91 7b 02 	lds	r24, 0x027B
    21c8:	8f 5f       	subi	r24, 0xFF	; 255
    21ca:	80 93 7b 02 	sts	0x027B, r24
    21ce:	80 91 7b 02 	lds	r24, 0x027B
    21d2:	87 30       	cpi	r24, 0x07	; 7
    21d4:	30 f3       	brcs	.-52     	; 0x21a2 <main+0xfac>
						{
							Global_u8Operations[j] = Global_u8Operations[j + 1];
						}
						Local_u8Iter--;
    21d6:	80 91 7e 02 	lds	r24, 0x027E
    21da:	81 50       	subi	r24, 0x01	; 1
    21dc:	80 93 7e 02 	sts	0x027E, r24

				LCD_enuSendChar(Global_u8PressedKey);
				LCD_enuGoto(2,0);


				for(Local_u8Iter = 0; Local_u8Iter < 8; ++Local_u8Iter)
    21e0:	80 91 7e 02 	lds	r24, 0x027E
    21e4:	8f 5f       	subi	r24, 0xFF	; 255
    21e6:	80 93 7e 02 	sts	0x027E, r24
    21ea:	80 91 7e 02 	lds	r24, 0x027E
    21ee:	88 30       	cpi	r24, 0x08	; 8
    21f0:	08 f4       	brcc	.+2      	; 0x21f4 <main+0xffe>
    21f2:	3f cf       	rjmp	.-386    	; 0x2072 <main+0xe7c>
						}
						Local_u8Iter--;
					}
				}

				for(Local_u8Iter = 0; Local_u8Iter < 8; ++Local_u8Iter)
    21f4:	10 92 7e 02 	sts	0x027E, r1
    21f8:	02 c1       	rjmp	.+516    	; 0x23fe <main+0x1208>
				{
					if(Global_u8Operations[Local_u8Iter] == '*' || Global_u8Operations[Local_u8Iter] == '/')
    21fa:	80 91 7e 02 	lds	r24, 0x027E
    21fe:	88 2f       	mov	r24, r24
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	fc 01       	movw	r30, r24
    2204:	ec 59       	subi	r30, 0x9C	; 156
    2206:	fd 4f       	sbci	r31, 0xFD	; 253
    2208:	80 81       	ld	r24, Z
    220a:	8a 32       	cpi	r24, 0x2A	; 42
    220c:	59 f0       	breq	.+22     	; 0x2224 <main+0x102e>
    220e:	80 91 7e 02 	lds	r24, 0x027E
    2212:	88 2f       	mov	r24, r24
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	fc 01       	movw	r30, r24
    2218:	ec 59       	subi	r30, 0x9C	; 156
    221a:	fd 4f       	sbci	r31, 0xFD	; 253
    221c:	80 81       	ld	r24, Z
    221e:	8f 32       	cpi	r24, 0x2F	; 47
    2220:	09 f0       	breq	.+2      	; 0x2224 <main+0x102e>
    2222:	e8 c0       	rjmp	.+464    	; 0x23f4 <main+0x11fe>
					{
						if(Global_u8Operations[Local_u8Iter] == '*') Global_Af32Operands[Local_u8Iter] *= Global_Af32Operands[Local_u8Iter + 1];
    2224:	80 91 7e 02 	lds	r24, 0x027E
    2228:	88 2f       	mov	r24, r24
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	fc 01       	movw	r30, r24
    222e:	ec 59       	subi	r30, 0x9C	; 156
    2230:	fd 4f       	sbci	r31, 0xFD	; 253
    2232:	80 81       	ld	r24, Z
    2234:	8a 32       	cpi	r24, 0x2A	; 42
    2236:	c1 f5       	brne	.+112    	; 0x22a8 <main+0x10b2>
    2238:	80 91 7e 02 	lds	r24, 0x027E
    223c:	c8 2e       	mov	r12, r24
    223e:	dd 24       	eor	r13, r13
    2240:	80 91 7e 02 	lds	r24, 0x027E
    2244:	88 2f       	mov	r24, r24
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	88 0f       	add	r24, r24
    224a:	99 1f       	adc	r25, r25
    224c:	88 0f       	add	r24, r24
    224e:	99 1f       	adc	r25, r25
    2250:	fc 01       	movw	r30, r24
    2252:	ec 5b       	subi	r30, 0xBC	; 188
    2254:	fd 4f       	sbci	r31, 0xFD	; 253
    2256:	e0 80       	ld	r14, Z
    2258:	f1 80       	ldd	r15, Z+1	; 0x01
    225a:	02 81       	ldd	r16, Z+2	; 0x02
    225c:	13 81       	ldd	r17, Z+3	; 0x03
    225e:	80 91 7e 02 	lds	r24, 0x027E
    2262:	88 2f       	mov	r24, r24
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	01 96       	adiw	r24, 0x01	; 1
    2268:	88 0f       	add	r24, r24
    226a:	99 1f       	adc	r25, r25
    226c:	88 0f       	add	r24, r24
    226e:	99 1f       	adc	r25, r25
    2270:	fc 01       	movw	r30, r24
    2272:	ec 5b       	subi	r30, 0xBC	; 188
    2274:	fd 4f       	sbci	r31, 0xFD	; 253
    2276:	20 81       	ld	r18, Z
    2278:	31 81       	ldd	r19, Z+1	; 0x01
    227a:	42 81       	ldd	r20, Z+2	; 0x02
    227c:	53 81       	ldd	r21, Z+3	; 0x03
    227e:	c8 01       	movw	r24, r16
    2280:	b7 01       	movw	r22, r14
    2282:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	9c 01       	movw	r18, r24
    228c:	ad 01       	movw	r20, r26
    228e:	c6 01       	movw	r24, r12
    2290:	88 0f       	add	r24, r24
    2292:	99 1f       	adc	r25, r25
    2294:	88 0f       	add	r24, r24
    2296:	99 1f       	adc	r25, r25
    2298:	fc 01       	movw	r30, r24
    229a:	ec 5b       	subi	r30, 0xBC	; 188
    229c:	fd 4f       	sbci	r31, 0xFD	; 253
    229e:	20 83       	st	Z, r18
    22a0:	31 83       	std	Z+1, r19	; 0x01
    22a2:	42 83       	std	Z+2, r20	; 0x02
    22a4:	53 83       	std	Z+3, r21	; 0x03
    22a6:	37 c0       	rjmp	.+110    	; 0x2316 <main+0x1120>
						else Global_Af32Operands[Local_u8Iter] /= Global_Af32Operands[Local_u8Iter + 1];
    22a8:	80 91 7e 02 	lds	r24, 0x027E
    22ac:	c8 2e       	mov	r12, r24
    22ae:	dd 24       	eor	r13, r13
    22b0:	80 91 7e 02 	lds	r24, 0x027E
    22b4:	88 2f       	mov	r24, r24
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	88 0f       	add	r24, r24
    22ba:	99 1f       	adc	r25, r25
    22bc:	88 0f       	add	r24, r24
    22be:	99 1f       	adc	r25, r25
    22c0:	fc 01       	movw	r30, r24
    22c2:	ec 5b       	subi	r30, 0xBC	; 188
    22c4:	fd 4f       	sbci	r31, 0xFD	; 253
    22c6:	e0 80       	ld	r14, Z
    22c8:	f1 80       	ldd	r15, Z+1	; 0x01
    22ca:	02 81       	ldd	r16, Z+2	; 0x02
    22cc:	13 81       	ldd	r17, Z+3	; 0x03
    22ce:	80 91 7e 02 	lds	r24, 0x027E
    22d2:	88 2f       	mov	r24, r24
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	01 96       	adiw	r24, 0x01	; 1
    22d8:	88 0f       	add	r24, r24
    22da:	99 1f       	adc	r25, r25
    22dc:	88 0f       	add	r24, r24
    22de:	99 1f       	adc	r25, r25
    22e0:	fc 01       	movw	r30, r24
    22e2:	ec 5b       	subi	r30, 0xBC	; 188
    22e4:	fd 4f       	sbci	r31, 0xFD	; 253
    22e6:	20 81       	ld	r18, Z
    22e8:	31 81       	ldd	r19, Z+1	; 0x01
    22ea:	42 81       	ldd	r20, Z+2	; 0x02
    22ec:	53 81       	ldd	r21, Z+3	; 0x03
    22ee:	c8 01       	movw	r24, r16
    22f0:	b7 01       	movw	r22, r14
    22f2:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	9c 01       	movw	r18, r24
    22fc:	ad 01       	movw	r20, r26
    22fe:	c6 01       	movw	r24, r12
    2300:	88 0f       	add	r24, r24
    2302:	99 1f       	adc	r25, r25
    2304:	88 0f       	add	r24, r24
    2306:	99 1f       	adc	r25, r25
    2308:	fc 01       	movw	r30, r24
    230a:	ec 5b       	subi	r30, 0xBC	; 188
    230c:	fd 4f       	sbci	r31, 0xFD	; 253
    230e:	20 83       	st	Z, r18
    2310:	31 83       	std	Z+1, r19	; 0x01
    2312:	42 83       	std	Z+2, r20	; 0x02
    2314:	53 83       	std	Z+3, r21	; 0x03

						Global_Af32Operands[Local_u8Iter + 1] = 0;
    2316:	80 91 7e 02 	lds	r24, 0x027E
    231a:	88 2f       	mov	r24, r24
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	01 96       	adiw	r24, 0x01	; 1
    2320:	88 0f       	add	r24, r24
    2322:	99 1f       	adc	r25, r25
    2324:	88 0f       	add	r24, r24
    2326:	99 1f       	adc	r25, r25
    2328:	fc 01       	movw	r30, r24
    232a:	ec 5b       	subi	r30, 0xBC	; 188
    232c:	fd 4f       	sbci	r31, 0xFD	; 253
    232e:	80 e0       	ldi	r24, 0x00	; 0
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	a0 e0       	ldi	r26, 0x00	; 0
    2334:	b0 e0       	ldi	r27, 0x00	; 0
    2336:	80 83       	st	Z, r24
    2338:	91 83       	std	Z+1, r25	; 0x01
    233a:	a2 83       	std	Z+2, r26	; 0x02
    233c:	b3 83       	std	Z+3, r27	; 0x03
						Global_u8Operations[Local_u8Iter] = 0;
    233e:	80 91 7e 02 	lds	r24, 0x027E
    2342:	88 2f       	mov	r24, r24
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	fc 01       	movw	r30, r24
    2348:	ec 59       	subi	r30, 0x9C	; 156
    234a:	fd 4f       	sbci	r31, 0xFD	; 253
    234c:	10 82       	st	Z, r1
						for(j = Local_u8Iter + 1; j < 7; ++j)
    234e:	80 91 7e 02 	lds	r24, 0x027E
    2352:	8f 5f       	subi	r24, 0xFF	; 255
    2354:	80 93 7b 02 	sts	0x027B, r24
    2358:	25 c0       	rjmp	.+74     	; 0x23a4 <main+0x11ae>
						{
							Global_Af32Operands[j] = Global_Af32Operands[j + 1];
    235a:	80 91 7b 02 	lds	r24, 0x027B
    235e:	68 2f       	mov	r22, r24
    2360:	70 e0       	ldi	r23, 0x00	; 0
    2362:	80 91 7b 02 	lds	r24, 0x027B
    2366:	88 2f       	mov	r24, r24
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	01 96       	adiw	r24, 0x01	; 1
    236c:	88 0f       	add	r24, r24
    236e:	99 1f       	adc	r25, r25
    2370:	88 0f       	add	r24, r24
    2372:	99 1f       	adc	r25, r25
    2374:	fc 01       	movw	r30, r24
    2376:	ec 5b       	subi	r30, 0xBC	; 188
    2378:	fd 4f       	sbci	r31, 0xFD	; 253
    237a:	20 81       	ld	r18, Z
    237c:	31 81       	ldd	r19, Z+1	; 0x01
    237e:	42 81       	ldd	r20, Z+2	; 0x02
    2380:	53 81       	ldd	r21, Z+3	; 0x03
    2382:	cb 01       	movw	r24, r22
    2384:	88 0f       	add	r24, r24
    2386:	99 1f       	adc	r25, r25
    2388:	88 0f       	add	r24, r24
    238a:	99 1f       	adc	r25, r25
    238c:	fc 01       	movw	r30, r24
    238e:	ec 5b       	subi	r30, 0xBC	; 188
    2390:	fd 4f       	sbci	r31, 0xFD	; 253
    2392:	20 83       	st	Z, r18
    2394:	31 83       	std	Z+1, r19	; 0x01
    2396:	42 83       	std	Z+2, r20	; 0x02
    2398:	53 83       	std	Z+3, r21	; 0x03
						if(Global_u8Operations[Local_u8Iter] == '*') Global_Af32Operands[Local_u8Iter] *= Global_Af32Operands[Local_u8Iter + 1];
						else Global_Af32Operands[Local_u8Iter] /= Global_Af32Operands[Local_u8Iter + 1];

						Global_Af32Operands[Local_u8Iter + 1] = 0;
						Global_u8Operations[Local_u8Iter] = 0;
						for(j = Local_u8Iter + 1; j < 7; ++j)
    239a:	80 91 7b 02 	lds	r24, 0x027B
    239e:	8f 5f       	subi	r24, 0xFF	; 255
    23a0:	80 93 7b 02 	sts	0x027B, r24
    23a4:	80 91 7b 02 	lds	r24, 0x027B
    23a8:	87 30       	cpi	r24, 0x07	; 7
    23aa:	b8 f2       	brcs	.-82     	; 0x235a <main+0x1164>
						{
							Global_Af32Operands[j] = Global_Af32Operands[j + 1];
						}
						for(j = Local_u8Iter ; j < 7; ++j)
    23ac:	80 91 7e 02 	lds	r24, 0x027E
    23b0:	80 93 7b 02 	sts	0x027B, r24
    23b4:	16 c0       	rjmp	.+44     	; 0x23e2 <main+0x11ec>
						{
							Global_u8Operations[j] = Global_u8Operations[j + 1];
    23b6:	80 91 7b 02 	lds	r24, 0x027B
    23ba:	28 2f       	mov	r18, r24
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	80 91 7b 02 	lds	r24, 0x027B
    23c2:	88 2f       	mov	r24, r24
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	01 96       	adiw	r24, 0x01	; 1
    23c8:	fc 01       	movw	r30, r24
    23ca:	ec 59       	subi	r30, 0x9C	; 156
    23cc:	fd 4f       	sbci	r31, 0xFD	; 253
    23ce:	80 81       	ld	r24, Z
    23d0:	f9 01       	movw	r30, r18
    23d2:	ec 59       	subi	r30, 0x9C	; 156
    23d4:	fd 4f       	sbci	r31, 0xFD	; 253
    23d6:	80 83       	st	Z, r24
						Global_u8Operations[Local_u8Iter] = 0;
						for(j = Local_u8Iter + 1; j < 7; ++j)
						{
							Global_Af32Operands[j] = Global_Af32Operands[j + 1];
						}
						for(j = Local_u8Iter ; j < 7; ++j)
    23d8:	80 91 7b 02 	lds	r24, 0x027B
    23dc:	8f 5f       	subi	r24, 0xFF	; 255
    23de:	80 93 7b 02 	sts	0x027B, r24
    23e2:	80 91 7b 02 	lds	r24, 0x027B
    23e6:	87 30       	cpi	r24, 0x07	; 7
    23e8:	30 f3       	brcs	.-52     	; 0x23b6 <main+0x11c0>
						{
							Global_u8Operations[j] = Global_u8Operations[j + 1];
						}
						Local_u8Iter--;
    23ea:	80 91 7e 02 	lds	r24, 0x027E
    23ee:	81 50       	subi	r24, 0x01	; 1
    23f0:	80 93 7e 02 	sts	0x027E, r24
						}
						Local_u8Iter--;
					}
				}

				for(Local_u8Iter = 0; Local_u8Iter < 8; ++Local_u8Iter)
    23f4:	80 91 7e 02 	lds	r24, 0x027E
    23f8:	8f 5f       	subi	r24, 0xFF	; 255
    23fa:	80 93 7e 02 	sts	0x027E, r24
    23fe:	80 91 7e 02 	lds	r24, 0x027E
    2402:	88 30       	cpi	r24, 0x08	; 8
    2404:	08 f4       	brcc	.+2      	; 0x2408 <main+0x1212>
    2406:	f9 ce       	rjmp	.-526    	; 0x21fa <main+0x1004>
    2408:	99 c0       	rjmp	.+306    	; 0x253c <main+0x1346>
					}
				}

				while(Global_u8Operations[0])
				{
					if(Global_u8Operations[0] == '+') Global_Af32Operands[0] += Global_Af32Operands[1]; // 5+9  14
    240a:	80 91 64 02 	lds	r24, 0x0264
    240e:	8b 32       	cpi	r24, 0x2B	; 43
    2410:	f9 f4       	brne	.+62     	; 0x2450 <main+0x125a>
    2412:	80 91 44 02 	lds	r24, 0x0244
    2416:	90 91 45 02 	lds	r25, 0x0245
    241a:	a0 91 46 02 	lds	r26, 0x0246
    241e:	b0 91 47 02 	lds	r27, 0x0247
    2422:	20 91 48 02 	lds	r18, 0x0248
    2426:	30 91 49 02 	lds	r19, 0x0249
    242a:	40 91 4a 02 	lds	r20, 0x024A
    242e:	50 91 4b 02 	lds	r21, 0x024B
    2432:	bc 01       	movw	r22, r24
    2434:	cd 01       	movw	r24, r26
    2436:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__addsf3>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	80 93 44 02 	sts	0x0244, r24
    2442:	90 93 45 02 	sts	0x0245, r25
    2446:	a0 93 46 02 	sts	0x0246, r26
    244a:	b0 93 47 02 	sts	0x0247, r27
    244e:	1e c0       	rjmp	.+60     	; 0x248c <main+0x1296>
					else Global_Af32Operands[0] -= Global_Af32Operands[1];
    2450:	80 91 44 02 	lds	r24, 0x0244
    2454:	90 91 45 02 	lds	r25, 0x0245
    2458:	a0 91 46 02 	lds	r26, 0x0246
    245c:	b0 91 47 02 	lds	r27, 0x0247
    2460:	20 91 48 02 	lds	r18, 0x0248
    2464:	30 91 49 02 	lds	r19, 0x0249
    2468:	40 91 4a 02 	lds	r20, 0x024A
    246c:	50 91 4b 02 	lds	r21, 0x024B
    2470:	bc 01       	movw	r22, r24
    2472:	cd 01       	movw	r24, r26
    2474:	0e 94 bf 02 	call	0x57e	; 0x57e <__subsf3>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	80 93 44 02 	sts	0x0244, r24
    2480:	90 93 45 02 	sts	0x0245, r25
    2484:	a0 93 46 02 	sts	0x0246, r26
    2488:	b0 93 47 02 	sts	0x0247, r27

					Global_Af32Operands[1] = 0;
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	a0 e0       	ldi	r26, 0x00	; 0
    2492:	b0 e0       	ldi	r27, 0x00	; 0
    2494:	80 93 48 02 	sts	0x0248, r24
    2498:	90 93 49 02 	sts	0x0249, r25
    249c:	a0 93 4a 02 	sts	0x024A, r26
    24a0:	b0 93 4b 02 	sts	0x024B, r27
					Global_u8Operations[0]=0;
    24a4:	10 92 64 02 	sts	0x0264, r1

					for(j = 1; j < 6; ++j)
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	80 93 7b 02 	sts	0x027B, r24
    24ae:	25 c0       	rjmp	.+74     	; 0x24fa <main+0x1304>
					{
						Global_Af32Operands[j] = Global_Af32Operands[j + 1];
    24b0:	80 91 7b 02 	lds	r24, 0x027B
    24b4:	68 2f       	mov	r22, r24
    24b6:	70 e0       	ldi	r23, 0x00	; 0
    24b8:	80 91 7b 02 	lds	r24, 0x027B
    24bc:	88 2f       	mov	r24, r24
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	01 96       	adiw	r24, 0x01	; 1
    24c2:	88 0f       	add	r24, r24
    24c4:	99 1f       	adc	r25, r25
    24c6:	88 0f       	add	r24, r24
    24c8:	99 1f       	adc	r25, r25
    24ca:	fc 01       	movw	r30, r24
    24cc:	ec 5b       	subi	r30, 0xBC	; 188
    24ce:	fd 4f       	sbci	r31, 0xFD	; 253
    24d0:	20 81       	ld	r18, Z
    24d2:	31 81       	ldd	r19, Z+1	; 0x01
    24d4:	42 81       	ldd	r20, Z+2	; 0x02
    24d6:	53 81       	ldd	r21, Z+3	; 0x03
    24d8:	cb 01       	movw	r24, r22
    24da:	88 0f       	add	r24, r24
    24dc:	99 1f       	adc	r25, r25
    24de:	88 0f       	add	r24, r24
    24e0:	99 1f       	adc	r25, r25
    24e2:	fc 01       	movw	r30, r24
    24e4:	ec 5b       	subi	r30, 0xBC	; 188
    24e6:	fd 4f       	sbci	r31, 0xFD	; 253
    24e8:	20 83       	st	Z, r18
    24ea:	31 83       	std	Z+1, r19	; 0x01
    24ec:	42 83       	std	Z+2, r20	; 0x02
    24ee:	53 83       	std	Z+3, r21	; 0x03
					else Global_Af32Operands[0] -= Global_Af32Operands[1];

					Global_Af32Operands[1] = 0;
					Global_u8Operations[0]=0;

					for(j = 1; j < 6; ++j)
    24f0:	80 91 7b 02 	lds	r24, 0x027B
    24f4:	8f 5f       	subi	r24, 0xFF	; 255
    24f6:	80 93 7b 02 	sts	0x027B, r24
    24fa:	80 91 7b 02 	lds	r24, 0x027B
    24fe:	86 30       	cpi	r24, 0x06	; 6
    2500:	b8 f2       	brcs	.-82     	; 0x24b0 <main+0x12ba>
					{
						Global_Af32Operands[j] = Global_Af32Operands[j + 1];
					}
					for(j = 0 ; j < 5; ++j)
    2502:	10 92 7b 02 	sts	0x027B, r1
    2506:	16 c0       	rjmp	.+44     	; 0x2534 <main+0x133e>
					{
						Global_u8Operations[j] = Global_u8Operations[j + 1];
    2508:	80 91 7b 02 	lds	r24, 0x027B
    250c:	28 2f       	mov	r18, r24
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	80 91 7b 02 	lds	r24, 0x027B
    2514:	88 2f       	mov	r24, r24
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	01 96       	adiw	r24, 0x01	; 1
    251a:	fc 01       	movw	r30, r24
    251c:	ec 59       	subi	r30, 0x9C	; 156
    251e:	fd 4f       	sbci	r31, 0xFD	; 253
    2520:	80 81       	ld	r24, Z
    2522:	f9 01       	movw	r30, r18
    2524:	ec 59       	subi	r30, 0x9C	; 156
    2526:	fd 4f       	sbci	r31, 0xFD	; 253
    2528:	80 83       	st	Z, r24

					for(j = 1; j < 6; ++j)
					{
						Global_Af32Operands[j] = Global_Af32Operands[j + 1];
					}
					for(j = 0 ; j < 5; ++j)
    252a:	80 91 7b 02 	lds	r24, 0x027B
    252e:	8f 5f       	subi	r24, 0xFF	; 255
    2530:	80 93 7b 02 	sts	0x027B, r24
    2534:	80 91 7b 02 	lds	r24, 0x027B
    2538:	85 30       	cpi	r24, 0x05	; 5
    253a:	30 f3       	brcs	.-52     	; 0x2508 <main+0x1312>
						}
						Local_u8Iter--;
					}
				}

				while(Global_u8Operations[0])
    253c:	80 91 64 02 	lds	r24, 0x0264
    2540:	88 23       	and	r24, r24
    2542:	09 f0       	breq	.+2      	; 0x2546 <main+0x1350>
    2544:	62 cf       	rjmp	.-316    	; 0x240a <main+0x1214>
					for(j = 0 ; j < 5; ++j)
					{
						Global_u8Operations[j] = Global_u8Operations[j + 1];
					}
				}
				LCD_enuWriteNumber(Global_Af32Operands[0]);
    2546:	80 91 44 02 	lds	r24, 0x0244
    254a:	90 91 45 02 	lds	r25, 0x0245
    254e:	a0 91 46 02 	lds	r26, 0x0246
    2552:	b0 91 47 02 	lds	r27, 0x0247
    2556:	bc 01       	movw	r22, r24
    2558:	cd 01       	movw	r24, r26
    255a:	0e 94 ce 37 	call	0x6f9c	; 0x6f9c <LCD_enuWriteNumber>
				Global_f32Ans = Global_Af32Operands[0];
    255e:	80 91 44 02 	lds	r24, 0x0244
    2562:	90 91 45 02 	lds	r25, 0x0245
    2566:	a0 91 46 02 	lds	r26, 0x0246
    256a:	b0 91 47 02 	lds	r27, 0x0247
    256e:	80 93 74 02 	sts	0x0274, r24
    2572:	90 93 75 02 	sts	0x0275, r25
    2576:	a0 93 76 02 	sts	0x0276, r26
    257a:	b0 93 77 02 	sts	0x0277, r27
				Global_Af32Operands[0] = 0;
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	a0 e0       	ldi	r26, 0x00	; 0
    2584:	b0 e0       	ldi	r27, 0x00	; 0
    2586:	80 93 44 02 	sts	0x0244, r24
    258a:	90 93 45 02 	sts	0x0245, r25
    258e:	a0 93 46 02 	sts	0x0246, r26
    2592:	b0 93 47 02 	sts	0x0247, r27
				Local_u8It2 = 0, Local_u8It1 = 0;
    2596:	10 92 6d 02 	sts	0x026D, r1
    259a:	10 92 6c 02 	sts	0x026C, r1

				if(Global_u8ShiftCnt > 0)
    259e:	80 91 78 02 	lds	r24, 0x0278
    25a2:	88 23       	and	r24, r24
    25a4:	89 f0       	breq	.+34     	; 0x25c8 <main+0x13d2>
				{
					for(k=0; k<Global_u8ShiftCnt ; k++)
    25a6:	10 92 7c 02 	sts	0x027C, r1
    25aa:	08 c0       	rjmp	.+16     	; 0x25bc <main+0x13c6>
					{
						LCD_enuSendCommand(0x1c);
    25ac:	8c e1       	ldi	r24, 0x1C	; 28
    25ae:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <LCD_enuSendCommand>
				Global_Af32Operands[0] = 0;
				Local_u8It2 = 0, Local_u8It1 = 0;

				if(Global_u8ShiftCnt > 0)
				{
					for(k=0; k<Global_u8ShiftCnt ; k++)
    25b2:	80 91 7c 02 	lds	r24, 0x027C
    25b6:	8f 5f       	subi	r24, 0xFF	; 255
    25b8:	80 93 7c 02 	sts	0x027C, r24
    25bc:	90 91 7c 02 	lds	r25, 0x027C
    25c0:	80 91 78 02 	lds	r24, 0x0278
    25c4:	98 17       	cp	r25, r24
    25c6:	90 f3       	brcs	.-28     	; 0x25ac <main+0x13b6>
					{
						LCD_enuSendCommand(0x18);
					}
				}

				for(k =0; k<8; ++k)
    25c8:	10 92 7c 02 	sts	0x027C, r1
    25cc:	20 c0       	rjmp	.+64     	; 0x260e <main+0x1418>
				{
					Global_u8Operations[k]= 0;
    25ce:	80 91 7c 02 	lds	r24, 0x027C
    25d2:	88 2f       	mov	r24, r24
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	fc 01       	movw	r30, r24
    25d8:	ec 59       	subi	r30, 0x9C	; 156
    25da:	fd 4f       	sbci	r31, 0xFD	; 253
    25dc:	10 82       	st	Z, r1
					Global_Af32Operands[k]=0;
    25de:	80 91 7c 02 	lds	r24, 0x027C
    25e2:	88 2f       	mov	r24, r24
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	88 0f       	add	r24, r24
    25e8:	99 1f       	adc	r25, r25
    25ea:	88 0f       	add	r24, r24
    25ec:	99 1f       	adc	r25, r25
    25ee:	fc 01       	movw	r30, r24
    25f0:	ec 5b       	subi	r30, 0xBC	; 188
    25f2:	fd 4f       	sbci	r31, 0xFD	; 253
    25f4:	80 e0       	ldi	r24, 0x00	; 0
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	a0 e0       	ldi	r26, 0x00	; 0
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	80 83       	st	Z, r24
    25fe:	91 83       	std	Z+1, r25	; 0x01
    2600:	a2 83       	std	Z+2, r26	; 0x02
    2602:	b3 83       	std	Z+3, r27	; 0x03
					{
						LCD_enuSendCommand(0x18);
					}
				}

				for(k =0; k<8; ++k)
    2604:	80 91 7c 02 	lds	r24, 0x027C
    2608:	8f 5f       	subi	r24, 0xFF	; 255
    260a:	80 93 7c 02 	sts	0x027C, r24
    260e:	80 91 7c 02 	lds	r24, 0x027C
    2612:	88 30       	cpi	r24, 0x08	; 8
    2614:	e0 f2       	brcs	.-72     	; 0x25ce <main+0x13d8>
				{
					Global_u8Operations[k]= 0;
					Global_Af32Operands[k]=0;
				}

				Local_Clear();
    2616:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <Local_Clear>

				Set_bit(Global_u16FLAGS,must_clear);
    261a:	80 91 f1 01 	lds	r24, 0x01F1
    261e:	90 91 f2 01 	lds	r25, 0x01F2
    2622:	90 62       	ori	r25, 0x20	; 32
    2624:	90 93 f2 01 	sts	0x01F2, r25
    2628:	80 93 f1 01 	sts	0x01F1, r24
    262c:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <main+0x1e>

			}
			else
			{
				LCD_enuClearDisplay();
    2630:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <LCD_enuClearDisplay>
				LCD_enuDisplayString("Math error!!.."); // something went wrong
    2634:	84 ea       	ldi	r24, 0xA4	; 164
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
				Local_Clear();
    263c:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <Local_Clear>
    2640:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <main+0x1e>
				continue;
			}

		}
		else if (Global_u8PressedKey == 'c') // clear the display
    2644:	80 91 ef 01 	lds	r24, 0x01EF
    2648:	83 36       	cpi	r24, 0x63	; 99
    264a:	31 f4       	brne	.+12     	; 0x2658 <main+0x1462>
		{
			LCD_enuClearDisplay();
    264c:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <LCD_enuClearDisplay>
			Local_Clear();
    2650:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <Local_Clear>
    2654:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <main+0x1e>

		}
	        	/********************************** Number representation **********************************/

		else if (Global_u8PressedKey == 'i' || Global_u8PressedKey == 'z' || Global_u8PressedKey == 'a' || Global_u8PressedKey =='o')
    2658:	80 91 ef 01 	lds	r24, 0x01EF
    265c:	89 36       	cpi	r24, 0x69	; 105
    265e:	69 f0       	breq	.+26     	; 0x267a <main+0x1484>
    2660:	80 91 ef 01 	lds	r24, 0x01EF
    2664:	8a 37       	cpi	r24, 0x7A	; 122
    2666:	49 f0       	breq	.+18     	; 0x267a <main+0x1484>
    2668:	80 91 ef 01 	lds	r24, 0x01EF
    266c:	81 36       	cpi	r24, 0x61	; 97
    266e:	29 f0       	breq	.+10     	; 0x267a <main+0x1484>
    2670:	80 91 ef 01 	lds	r24, 0x01EF
    2674:	8f 36       	cpi	r24, 0x6F	; 111
    2676:	09 f0       	breq	.+2      	; 0x267a <main+0x1484>
    2678:	75 c7       	rjmp	.+3818   	; 0x3564 <main+0x236e>
		{
			Clr_bit(Global_u16HYP,NUMerror);
    267a:	80 91 72 02 	lds	r24, 0x0272
    267e:	90 91 73 02 	lds	r25, 0x0273
    2682:	9b 7f       	andi	r25, 0xFB	; 251
    2684:	90 93 73 02 	sts	0x0273, r25
    2688:	80 93 72 02 	sts	0x0272, r24
			Global_f32Num = 0;
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	a0 e0       	ldi	r26, 0x00	; 0
    2692:	b0 e0       	ldi	r27, 0x00	; 0
    2694:	80 93 6e 02 	sts	0x026E, r24
    2698:	90 93 6f 02 	sts	0x026F, r25
    269c:	a0 93 70 02 	sts	0x0270, r26
    26a0:	b0 93 71 02 	sts	0x0271, r27

			LCD_enuGoto(1,12);
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	6c e0       	ldi	r22, 0x0C	; 12
    26a8:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <LCD_enuGoto>

			if(Global_u8PressedKey == 'i')
    26ac:	80 91 ef 01 	lds	r24, 0x01EF
    26b0:	89 36       	cpi	r24, 0x69	; 105
    26b2:	21 f5       	brne	.+72     	; 0x26fc <main+0x1506>
			{
				Set_bit(Global_u16HYP, DEC);
    26b4:	80 91 72 02 	lds	r24, 0x0272
    26b8:	90 91 73 02 	lds	r25, 0x0273
    26bc:	91 60       	ori	r25, 0x01	; 1
    26be:	90 93 73 02 	sts	0x0273, r25
    26c2:	80 93 72 02 	sts	0x0272, r24
				for(y =0; y<16; ++y) Global_u8Arr[y]=' ';
    26c6:	10 92 7d 02 	sts	0x027D, r1
    26ca:	0f c0       	rjmp	.+30     	; 0x26ea <main+0x14f4>
    26cc:	80 91 7d 02 	lds	r24, 0x027D
    26d0:	99 27       	eor	r25, r25
    26d2:	87 fd       	sbrc	r24, 7
    26d4:	90 95       	com	r25
    26d6:	fc 01       	movw	r30, r24
    26d8:	e3 53       	subi	r30, 0x33	; 51
    26da:	fe 4f       	sbci	r31, 0xFE	; 254
    26dc:	80 e2       	ldi	r24, 0x20	; 32
    26de:	80 83       	st	Z, r24
    26e0:	80 91 7d 02 	lds	r24, 0x027D
    26e4:	8f 5f       	subi	r24, 0xFF	; 255
    26e6:	80 93 7d 02 	sts	0x027D, r24
    26ea:	80 91 7d 02 	lds	r24, 0x027D
    26ee:	80 31       	cpi	r24, 0x10	; 16
    26f0:	6c f3       	brlt	.-38     	; 0x26cc <main+0x14d6>
				LCD_enuDisplayString("DEC");
    26f2:	83 eb       	ldi	r24, 0xB3	; 179
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
    26fa:	35 c0       	rjmp	.+106    	; 0x2766 <main+0x1570>
			}
			else if(Global_u8PressedKey == 'z')
    26fc:	80 91 ef 01 	lds	r24, 0x01EF
    2700:	8a 37       	cpi	r24, 0x7A	; 122
    2702:	71 f4       	brne	.+28     	; 0x2720 <main+0x152a>
			{
				Set_bit(Global_u16HYP, BIN);
    2704:	80 91 72 02 	lds	r24, 0x0272
    2708:	90 91 73 02 	lds	r25, 0x0273
    270c:	92 60       	ori	r25, 0x02	; 2
    270e:	90 93 73 02 	sts	0x0273, r25
    2712:	80 93 72 02 	sts	0x0272, r24
				LCD_enuDisplayString("BIN");
    2716:	87 eb       	ldi	r24, 0xB7	; 183
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
    271e:	23 c0       	rjmp	.+70     	; 0x2766 <main+0x1570>
			}
			else if(Global_u8PressedKey == 'a')
    2720:	80 91 ef 01 	lds	r24, 0x01EF
    2724:	81 36       	cpi	r24, 0x61	; 97
    2726:	71 f4       	brne	.+28     	; 0x2744 <main+0x154e>
			{
				Set_bit(Global_u16HYP, OCT);
    2728:	80 91 72 02 	lds	r24, 0x0272
    272c:	90 91 73 02 	lds	r25, 0x0273
    2730:	80 68       	ori	r24, 0x80	; 128
    2732:	90 93 73 02 	sts	0x0273, r25
    2736:	80 93 72 02 	sts	0x0272, r24
				LCD_enuDisplayString("OCT");
    273a:	8b eb       	ldi	r24, 0xBB	; 187
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
    2742:	11 c0       	rjmp	.+34     	; 0x2766 <main+0x1570>
			}
			else if(Global_u8PressedKey == 'o')
    2744:	80 91 ef 01 	lds	r24, 0x01EF
    2748:	8f 36       	cpi	r24, 0x6F	; 111
    274a:	69 f4       	brne	.+26     	; 0x2766 <main+0x1570>
			{
				Set_bit(Global_u16HYP, HEX);
    274c:	80 91 72 02 	lds	r24, 0x0272
    2750:	90 91 73 02 	lds	r25, 0x0273
    2754:	80 64       	ori	r24, 0x40	; 64
    2756:	90 93 73 02 	sts	0x0273, r25
    275a:	80 93 72 02 	sts	0x0272, r24
				LCD_enuDisplayString("HEX");
    275e:	8f eb       	ldi	r24, 0xBF	; 191
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
			}

			LCD_enuGoto(2,0);
    2766:	82 e0       	ldi	r24, 0x02	; 2
    2768:	60 e0       	ldi	r22, 0x00	; 0
    276a:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <LCD_enuGoto>
    276e:	3b c2       	rjmp	.+1142   	; 0x2be6 <main+0x19f0>

			while (Global_u8PressedKey != '=')
			{
				Global_u8PressedKey = NOT_PRESSED;
    2770:	8f ef       	ldi	r24, 0xFF	; 255
    2772:	80 93 ef 01 	sts	0x01EF, r24
    2776:	04 c0       	rjmp	.+8      	; 0x2780 <main+0x158a>

				while(Global_u8PressedKey == NOT_PRESSED)
				{
					Keypad_enuGetPressedKey(&Global_u8PressedKey);
    2778:	8f ee       	ldi	r24, 0xEF	; 239
    277a:	91 e0       	ldi	r25, 0x01	; 1
    277c:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <Keypad_enuGetPressedKey>

			while (Global_u8PressedKey != '=')
			{
				Global_u8PressedKey = NOT_PRESSED;

				while(Global_u8PressedKey == NOT_PRESSED)
    2780:	80 91 ef 01 	lds	r24, 0x01EF
    2784:	8f 3f       	cpi	r24, 0xFF	; 255
    2786:	c1 f3       	breq	.-16     	; 0x2778 <main+0x1582>
				{
					Keypad_enuGetPressedKey(&Global_u8PressedKey);
				}

				if((Global_u8PressedKey >= '0' && Global_u8PressedKey<='9') || Global_u8PressedKey == '.' )
    2788:	80 91 ef 01 	lds	r24, 0x01EF
    278c:	80 33       	cpi	r24, 0x30	; 48
    278e:	20 f0       	brcs	.+8      	; 0x2798 <main+0x15a2>
    2790:	80 91 ef 01 	lds	r24, 0x01EF
    2794:	8a 33       	cpi	r24, 0x3A	; 58
    2796:	28 f0       	brcs	.+10     	; 0x27a2 <main+0x15ac>
    2798:	80 91 ef 01 	lds	r24, 0x01EF
    279c:	8e 32       	cpi	r24, 0x2E	; 46
    279e:	09 f0       	breq	.+2      	; 0x27a2 <main+0x15ac>
    27a0:	a6 c0       	rjmp	.+332    	; 0x28ee <main+0x16f8>
				{
					LCD_enuSendChar(Global_u8PressedKey);
    27a2:	80 91 ef 01 	lds	r24, 0x01EF
    27a6:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>

					if(Get_bit(Global_u16HYP,NUMerror)) continue;
    27aa:	80 91 72 02 	lds	r24, 0x0272
    27ae:	90 91 73 02 	lds	r25, 0x0273
    27b2:	80 70       	andi	r24, 0x00	; 0
    27b4:	94 70       	andi	r25, 0x04	; 4
    27b6:	00 97       	sbiw	r24, 0x00	; 0
    27b8:	09 f0       	breq	.+2      	; 0x27bc <main+0x15c6>
    27ba:	15 c2       	rjmp	.+1066   	; 0x2be6 <main+0x19f0>
					else if(Global_u8PressedKey == '.')
    27bc:	80 91 ef 01 	lds	r24, 0x01EF
    27c0:	8e 32       	cpi	r24, 0x2E	; 46
    27c2:	51 f4       	brne	.+20     	; 0x27d8 <main+0x15e2>
					{
						Set_bit(Global_u16HYP,NUMerror);
    27c4:	80 91 72 02 	lds	r24, 0x0272
    27c8:	90 91 73 02 	lds	r25, 0x0273
    27cc:	94 60       	ori	r25, 0x04	; 4
    27ce:	90 93 73 02 	sts	0x0273, r25
    27d2:	80 93 72 02 	sts	0x0272, r24
    27d6:	07 c2       	rjmp	.+1038   	; 0x2be6 <main+0x19f0>
						continue;
					}
					else if(Get_bit(Global_u16HYP, OCT) && Global_u8PressedKey >'7' && Global_u8PressedKey <='9' )
    27d8:	80 91 72 02 	lds	r24, 0x0272
    27dc:	90 91 73 02 	lds	r25, 0x0273
    27e0:	80 78       	andi	r24, 0x80	; 128
    27e2:	90 70       	andi	r25, 0x00	; 0
    27e4:	00 97       	sbiw	r24, 0x00	; 0
    27e6:	91 f0       	breq	.+36     	; 0x280c <main+0x1616>
    27e8:	80 91 ef 01 	lds	r24, 0x01EF
    27ec:	88 33       	cpi	r24, 0x38	; 56
    27ee:	70 f0       	brcs	.+28     	; 0x280c <main+0x1616>
    27f0:	80 91 ef 01 	lds	r24, 0x01EF
    27f4:	8a 33       	cpi	r24, 0x3A	; 58
    27f6:	50 f4       	brcc	.+20     	; 0x280c <main+0x1616>
					{
						Set_bit(Global_u16HYP,NUMerror);
    27f8:	80 91 72 02 	lds	r24, 0x0272
    27fc:	90 91 73 02 	lds	r25, 0x0273
    2800:	94 60       	ori	r25, 0x04	; 4
    2802:	90 93 73 02 	sts	0x0273, r25
    2806:	80 93 72 02 	sts	0x0272, r24
    280a:	ed c1       	rjmp	.+986    	; 0x2be6 <main+0x19f0>
						continue;
					}
					else if (Get_bit(Global_u16HYP, BIN) && Global_u8PressedKey != '0' && Global_u8PressedKey != '1')
    280c:	80 91 72 02 	lds	r24, 0x0272
    2810:	90 91 73 02 	lds	r25, 0x0273
    2814:	80 70       	andi	r24, 0x00	; 0
    2816:	92 70       	andi	r25, 0x02	; 2
    2818:	00 97       	sbiw	r24, 0x00	; 0
    281a:	91 f0       	breq	.+36     	; 0x2840 <main+0x164a>
    281c:	80 91 ef 01 	lds	r24, 0x01EF
    2820:	80 33       	cpi	r24, 0x30	; 48
    2822:	71 f0       	breq	.+28     	; 0x2840 <main+0x164a>
    2824:	80 91 ef 01 	lds	r24, 0x01EF
    2828:	81 33       	cpi	r24, 0x31	; 49
    282a:	51 f0       	breq	.+20     	; 0x2840 <main+0x164a>
					{
						Set_bit(Global_u16HYP,NUMerror);
    282c:	80 91 72 02 	lds	r24, 0x0272
    2830:	90 91 73 02 	lds	r25, 0x0273
    2834:	94 60       	ori	r25, 0x04	; 4
    2836:	90 93 73 02 	sts	0x0273, r25
    283a:	80 93 72 02 	sts	0x0272, r24
    283e:	d3 c1       	rjmp	.+934    	; 0x2be6 <main+0x19f0>
						continue;
					}
					else{
						Global_f32Num = Global_f32Num*10 + (Global_u8PressedKey-'0');
    2840:	80 91 6e 02 	lds	r24, 0x026E
    2844:	90 91 6f 02 	lds	r25, 0x026F
    2848:	a0 91 70 02 	lds	r26, 0x0270
    284c:	b0 91 71 02 	lds	r27, 0x0271
    2850:	bc 01       	movw	r22, r24
    2852:	cd 01       	movw	r24, r26
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	40 e2       	ldi	r20, 0x20	; 32
    285a:	51 e4       	ldi	r21, 0x41	; 65
    285c:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    2860:	dc 01       	movw	r26, r24
    2862:	cb 01       	movw	r24, r22
    2864:	7c 01       	movw	r14, r24
    2866:	8d 01       	movw	r16, r26
    2868:	80 91 ef 01 	lds	r24, 0x01EF
    286c:	88 2f       	mov	r24, r24
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	c0 97       	sbiw	r24, 0x30	; 48
    2872:	aa 27       	eor	r26, r26
    2874:	97 fd       	sbrc	r25, 7
    2876:	a0 95       	com	r26
    2878:	ba 2f       	mov	r27, r26
    287a:	bc 01       	movw	r22, r24
    287c:	cd 01       	movw	r24, r26
    287e:	0e 94 b3 05 	call	0xb66	; 0xb66 <__floatsisf>
    2882:	9b 01       	movw	r18, r22
    2884:	ac 01       	movw	r20, r24
    2886:	c8 01       	movw	r24, r16
    2888:	b7 01       	movw	r22, r14
    288a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__addsf3>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	80 93 6e 02 	sts	0x026E, r24
    2896:	90 93 6f 02 	sts	0x026F, r25
    289a:	a0 93 70 02 	sts	0x0270, r26
    289e:	b0 93 71 02 	sts	0x0271, r27
						for(y = 15 ; y > 0; --y)
    28a2:	8f e0       	ldi	r24, 0x0F	; 15
    28a4:	80 93 7d 02 	sts	0x027D, r24
    28a8:	19 c0       	rjmp	.+50     	; 0x28dc <main+0x16e6>
						{
							Global_u8Arr[y] = Global_u8Arr[y-1];
    28aa:	80 91 7d 02 	lds	r24, 0x027D
    28ae:	28 2f       	mov	r18, r24
    28b0:	33 27       	eor	r19, r19
    28b2:	27 fd       	sbrc	r18, 7
    28b4:	30 95       	com	r19
    28b6:	80 91 7d 02 	lds	r24, 0x027D
    28ba:	99 27       	eor	r25, r25
    28bc:	87 fd       	sbrc	r24, 7
    28be:	90 95       	com	r25
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	fc 01       	movw	r30, r24
    28c4:	e3 53       	subi	r30, 0x33	; 51
    28c6:	fe 4f       	sbci	r31, 0xFE	; 254
    28c8:	80 81       	ld	r24, Z
    28ca:	f9 01       	movw	r30, r18
    28cc:	e3 53       	subi	r30, 0x33	; 51
    28ce:	fe 4f       	sbci	r31, 0xFE	; 254
    28d0:	80 83       	st	Z, r24
						Set_bit(Global_u16HYP,NUMerror);
						continue;
					}
					else{
						Global_f32Num = Global_f32Num*10 + (Global_u8PressedKey-'0');
						for(y = 15 ; y > 0; --y)
    28d2:	80 91 7d 02 	lds	r24, 0x027D
    28d6:	81 50       	subi	r24, 0x01	; 1
    28d8:	80 93 7d 02 	sts	0x027D, r24
    28dc:	80 91 7d 02 	lds	r24, 0x027D
    28e0:	18 16       	cp	r1, r24
    28e2:	1c f3       	brlt	.-58     	; 0x28aa <main+0x16b4>
						{
							Global_u8Arr[y] = Global_u8Arr[y-1];
						}
						Global_u8Arr[0] = Global_u8PressedKey;
    28e4:	80 91 ef 01 	lds	r24, 0x01EF
    28e8:	80 93 cd 01 	sts	0x01CD, r24
    28ec:	7c c1       	rjmp	.+760    	; 0x2be6 <main+0x19f0>
					}
				}
				else if(Global_u8PressedKey == 'x' || Global_u8PressedKey == 'q' ||Global_u8PressedKey == 'i' ||Global_u8PressedKey == 'o' ||Global_u8PressedKey == 'z' ||Global_u8PressedKey == 'a')
    28ee:	80 91 ef 01 	lds	r24, 0x01EF
    28f2:	88 37       	cpi	r24, 0x78	; 120
    28f4:	a9 f0       	breq	.+42     	; 0x2920 <main+0x172a>
    28f6:	80 91 ef 01 	lds	r24, 0x01EF
    28fa:	81 37       	cpi	r24, 0x71	; 113
    28fc:	89 f0       	breq	.+34     	; 0x2920 <main+0x172a>
    28fe:	80 91 ef 01 	lds	r24, 0x01EF
    2902:	89 36       	cpi	r24, 0x69	; 105
    2904:	69 f0       	breq	.+26     	; 0x2920 <main+0x172a>
    2906:	80 91 ef 01 	lds	r24, 0x01EF
    290a:	8f 36       	cpi	r24, 0x6F	; 111
    290c:	49 f0       	breq	.+18     	; 0x2920 <main+0x172a>
    290e:	80 91 ef 01 	lds	r24, 0x01EF
    2912:	8a 37       	cpi	r24, 0x7A	; 122
    2914:	29 f0       	breq	.+10     	; 0x2920 <main+0x172a>
    2916:	80 91 ef 01 	lds	r24, 0x01EF
    291a:	81 36       	cpi	r24, 0x61	; 97
    291c:	09 f0       	breq	.+2      	; 0x2920 <main+0x172a>
    291e:	96 c0       	rjmp	.+300    	; 0x2a4c <main+0x1856>
				{

					if(Global_u8PressedKey == 'x')LCD_enuSendChar('A');
    2920:	80 91 ef 01 	lds	r24, 0x01EF
    2924:	88 37       	cpi	r24, 0x78	; 120
    2926:	21 f4       	brne	.+8      	; 0x2930 <main+0x173a>
    2928:	81 e4       	ldi	r24, 0x41	; 65
    292a:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    292e:	2f c0       	rjmp	.+94     	; 0x298e <main+0x1798>
					else if(Global_u8PressedKey == 'x')LCD_enuSendChar('A');
    2930:	80 91 ef 01 	lds	r24, 0x01EF
    2934:	88 37       	cpi	r24, 0x78	; 120
    2936:	21 f4       	brne	.+8      	; 0x2940 <main+0x174a>
    2938:	81 e4       	ldi	r24, 0x41	; 65
    293a:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    293e:	27 c0       	rjmp	.+78     	; 0x298e <main+0x1798>
					else if(Global_u8PressedKey == 'q')LCD_enuSendChar('B');
    2940:	80 91 ef 01 	lds	r24, 0x01EF
    2944:	81 37       	cpi	r24, 0x71	; 113
    2946:	21 f4       	brne	.+8      	; 0x2950 <main+0x175a>
    2948:	82 e4       	ldi	r24, 0x42	; 66
    294a:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    294e:	1f c0       	rjmp	.+62     	; 0x298e <main+0x1798>
					else if(Global_u8PressedKey == 'i')LCD_enuSendChar('C');
    2950:	80 91 ef 01 	lds	r24, 0x01EF
    2954:	89 36       	cpi	r24, 0x69	; 105
    2956:	21 f4       	brne	.+8      	; 0x2960 <main+0x176a>
    2958:	83 e4       	ldi	r24, 0x43	; 67
    295a:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    295e:	17 c0       	rjmp	.+46     	; 0x298e <main+0x1798>
					else if(Global_u8PressedKey == 'o')LCD_enuSendChar('D');
    2960:	80 91 ef 01 	lds	r24, 0x01EF
    2964:	8f 36       	cpi	r24, 0x6F	; 111
    2966:	21 f4       	brne	.+8      	; 0x2970 <main+0x177a>
    2968:	84 e4       	ldi	r24, 0x44	; 68
    296a:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    296e:	0f c0       	rjmp	.+30     	; 0x298e <main+0x1798>
					else if(Global_u8PressedKey == 'z')LCD_enuSendChar('E');
    2970:	80 91 ef 01 	lds	r24, 0x01EF
    2974:	8a 37       	cpi	r24, 0x7A	; 122
    2976:	21 f4       	brne	.+8      	; 0x2980 <main+0x178a>
    2978:	85 e4       	ldi	r24, 0x45	; 69
    297a:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    297e:	07 c0       	rjmp	.+14     	; 0x298e <main+0x1798>
					else if(Global_u8PressedKey == 'a')LCD_enuSendChar('F');
    2980:	80 91 ef 01 	lds	r24, 0x01EF
    2984:	81 36       	cpi	r24, 0x61	; 97
    2986:	19 f4       	brne	.+6      	; 0x298e <main+0x1798>
    2988:	86 e4       	ldi	r24, 0x46	; 70
    298a:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>

					if(!Get_bit(Global_u16HYP, HEX)) Set_bit(Global_u16HYP,NUMerror);
    298e:	80 91 72 02 	lds	r24, 0x0272
    2992:	90 91 73 02 	lds	r25, 0x0273
    2996:	80 74       	andi	r24, 0x40	; 64
    2998:	90 70       	andi	r25, 0x00	; 0
    299a:	00 97       	sbiw	r24, 0x00	; 0
    299c:	51 f4       	brne	.+20     	; 0x29b2 <main+0x17bc>
    299e:	80 91 72 02 	lds	r24, 0x0272
    29a2:	90 91 73 02 	lds	r25, 0x0273
    29a6:	94 60       	ori	r25, 0x04	; 4
    29a8:	90 93 73 02 	sts	0x0273, r25
    29ac:	80 93 72 02 	sts	0x0272, r24
    29b0:	1a c1       	rjmp	.+564    	; 0x2be6 <main+0x19f0>
					else
					{
						for(y = 15 ; y > 0; --y)
    29b2:	8f e0       	ldi	r24, 0x0F	; 15
    29b4:	80 93 7d 02 	sts	0x027D, r24
    29b8:	19 c0       	rjmp	.+50     	; 0x29ec <main+0x17f6>
						{
							Global_u8Arr[y] = Global_u8Arr[y-1];
    29ba:	80 91 7d 02 	lds	r24, 0x027D
    29be:	28 2f       	mov	r18, r24
    29c0:	33 27       	eor	r19, r19
    29c2:	27 fd       	sbrc	r18, 7
    29c4:	30 95       	com	r19
    29c6:	80 91 7d 02 	lds	r24, 0x027D
    29ca:	99 27       	eor	r25, r25
    29cc:	87 fd       	sbrc	r24, 7
    29ce:	90 95       	com	r25
    29d0:	01 97       	sbiw	r24, 0x01	; 1
    29d2:	fc 01       	movw	r30, r24
    29d4:	e3 53       	subi	r30, 0x33	; 51
    29d6:	fe 4f       	sbci	r31, 0xFE	; 254
    29d8:	80 81       	ld	r24, Z
    29da:	f9 01       	movw	r30, r18
    29dc:	e3 53       	subi	r30, 0x33	; 51
    29de:	fe 4f       	sbci	r31, 0xFE	; 254
    29e0:	80 83       	st	Z, r24
					else if(Global_u8PressedKey == 'a')LCD_enuSendChar('F');

					if(!Get_bit(Global_u16HYP, HEX)) Set_bit(Global_u16HYP,NUMerror);
					else
					{
						for(y = 15 ; y > 0; --y)
    29e2:	80 91 7d 02 	lds	r24, 0x027D
    29e6:	81 50       	subi	r24, 0x01	; 1
    29e8:	80 93 7d 02 	sts	0x027D, r24
    29ec:	80 91 7d 02 	lds	r24, 0x027D
    29f0:	18 16       	cp	r1, r24
    29f2:	1c f3       	brlt	.-58     	; 0x29ba <main+0x17c4>
						{
							Global_u8Arr[y] = Global_u8Arr[y-1];
						}

						if(Global_u8PressedKey =='x') Global_u8Arr[0] = 'A';
    29f4:	80 91 ef 01 	lds	r24, 0x01EF
    29f8:	88 37       	cpi	r24, 0x78	; 120
    29fa:	19 f4       	brne	.+6      	; 0x2a02 <main+0x180c>
    29fc:	81 e4       	ldi	r24, 0x41	; 65
    29fe:	80 93 cd 01 	sts	0x01CD, r24
						if(Global_u8PressedKey =='q') Global_u8Arr[0] = 'B';
    2a02:	80 91 ef 01 	lds	r24, 0x01EF
    2a06:	81 37       	cpi	r24, 0x71	; 113
    2a08:	19 f4       	brne	.+6      	; 0x2a10 <main+0x181a>
    2a0a:	82 e4       	ldi	r24, 0x42	; 66
    2a0c:	80 93 cd 01 	sts	0x01CD, r24
						if(Global_u8PressedKey =='i') Global_u8Arr[0] = 'C';
    2a10:	80 91 ef 01 	lds	r24, 0x01EF
    2a14:	89 36       	cpi	r24, 0x69	; 105
    2a16:	19 f4       	brne	.+6      	; 0x2a1e <main+0x1828>
    2a18:	83 e4       	ldi	r24, 0x43	; 67
    2a1a:	80 93 cd 01 	sts	0x01CD, r24
						if(Global_u8PressedKey =='o') Global_u8Arr[0] = 'D';
    2a1e:	80 91 ef 01 	lds	r24, 0x01EF
    2a22:	8f 36       	cpi	r24, 0x6F	; 111
    2a24:	19 f4       	brne	.+6      	; 0x2a2c <main+0x1836>
    2a26:	84 e4       	ldi	r24, 0x44	; 68
    2a28:	80 93 cd 01 	sts	0x01CD, r24
						if(Global_u8PressedKey =='z') Global_u8Arr[0] = 'E';
    2a2c:	80 91 ef 01 	lds	r24, 0x01EF
    2a30:	8a 37       	cpi	r24, 0x7A	; 122
    2a32:	19 f4       	brne	.+6      	; 0x2a3a <main+0x1844>
    2a34:	85 e4       	ldi	r24, 0x45	; 69
    2a36:	80 93 cd 01 	sts	0x01CD, r24
						if(Global_u8PressedKey =='a') Global_u8Arr[0] = 'F';
    2a3a:	80 91 ef 01 	lds	r24, 0x01EF
    2a3e:	81 36       	cpi	r24, 0x61	; 97
    2a40:	09 f0       	breq	.+2      	; 0x2a44 <main+0x184e>
    2a42:	d1 c0       	rjmp	.+418    	; 0x2be6 <main+0x19f0>
    2a44:	86 e4       	ldi	r24, 0x46	; 70
    2a46:	80 93 cd 01 	sts	0x01CD, r24
    2a4a:	cd c0       	rjmp	.+410    	; 0x2be6 <main+0x19f0>
					}

				}
				else if(Global_u8PressedKey != '=' && Global_u8PressedKey != 'c' )
    2a4c:	80 91 ef 01 	lds	r24, 0x01EF
    2a50:	8d 33       	cpi	r24, 0x3D	; 61
    2a52:	09 f4       	brne	.+2      	; 0x2a56 <main+0x1860>
    2a54:	a3 c0       	rjmp	.+326    	; 0x2b9c <main+0x19a6>
    2a56:	80 91 ef 01 	lds	r24, 0x01EF
    2a5a:	83 36       	cpi	r24, 0x63	; 99
    2a5c:	09 f4       	brne	.+2      	; 0x2a60 <main+0x186a>
    2a5e:	9e c0       	rjmp	.+316    	; 0x2b9c <main+0x19a6>
				{
					Set_bit(Global_u16HYP,NUMerror);
    2a60:	80 91 72 02 	lds	r24, 0x0272
    2a64:	90 91 73 02 	lds	r25, 0x0273
    2a68:	94 60       	ori	r25, 0x04	; 4
    2a6a:	90 93 73 02 	sts	0x0273, r25
    2a6e:	80 93 72 02 	sts	0x0272, r24

					if(Global_u8PressedKey != '+' && Global_u8PressedKey != '-' && Global_u8PressedKey != '*' && Global_u8PressedKey != '/')
    2a72:	80 91 ef 01 	lds	r24, 0x01EF
    2a76:	8b 32       	cpi	r24, 0x2B	; 43
    2a78:	a9 f0       	breq	.+42     	; 0x2aa4 <main+0x18ae>
    2a7a:	80 91 ef 01 	lds	r24, 0x01EF
    2a7e:	8d 32       	cpi	r24, 0x2D	; 45
    2a80:	89 f0       	breq	.+34     	; 0x2aa4 <main+0x18ae>
    2a82:	80 91 ef 01 	lds	r24, 0x01EF
    2a86:	8a 32       	cpi	r24, 0x2A	; 42
    2a88:	69 f0       	breq	.+26     	; 0x2aa4 <main+0x18ae>
    2a8a:	80 91 ef 01 	lds	r24, 0x01EF
    2a8e:	8f 32       	cpi	r24, 0x2F	; 47
    2a90:	49 f0       	breq	.+18     	; 0x2aa4 <main+0x18ae>
					{
						Set_bit(Global_u16HYP,bracets);
    2a92:	80 91 72 02 	lds	r24, 0x0272
    2a96:	90 91 73 02 	lds	r25, 0x0273
    2a9a:	98 60       	ori	r25, 0x08	; 8
    2a9c:	90 93 73 02 	sts	0x0273, r25
    2aa0:	80 93 72 02 	sts	0x0272, r24
					}
					if(Global_u8PressedKey == '!') LCD_enuDisplayString("sqrt(");
    2aa4:	80 91 ef 01 	lds	r24, 0x01EF
    2aa8:	81 32       	cpi	r24, 0x21	; 33
    2aaa:	29 f4       	brne	.+10     	; 0x2ab6 <main+0x18c0>
    2aac:	80 e6       	ldi	r24, 0x60	; 96
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
    2ab4:	98 c0       	rjmp	.+304    	; 0x2be6 <main+0x19f0>
					else if (Global_u8PressedKey == 's')LCD_enuDisplayString("sin(");
    2ab6:	80 91 ef 01 	lds	r24, 0x01EF
    2aba:	83 37       	cpi	r24, 0x73	; 115
    2abc:	29 f4       	brne	.+10     	; 0x2ac8 <main+0x18d2>
    2abe:	86 e6       	ldi	r24, 0x66	; 102
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
    2ac6:	8f c0       	rjmp	.+286    	; 0x2be6 <main+0x19f0>
					else if (Global_u8PressedKey == 'C')LCD_enuDisplayString("cos(");
    2ac8:	80 91 ef 01 	lds	r24, 0x01EF
    2acc:	83 34       	cpi	r24, 0x43	; 67
    2ace:	29 f4       	brne	.+10     	; 0x2ada <main+0x18e4>
    2ad0:	8b e6       	ldi	r24, 0x6B	; 107
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
    2ad8:	86 c0       	rjmp	.+268    	; 0x2be6 <main+0x19f0>
					else if (Global_u8PressedKey == 't')LCD_enuDisplayString("tan(");
    2ada:	80 91 ef 01 	lds	r24, 0x01EF
    2ade:	84 37       	cpi	r24, 0x74	; 116
    2ae0:	29 f4       	brne	.+10     	; 0x2aec <main+0x18f6>
    2ae2:	80 e7       	ldi	r24, 0x70	; 112
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
    2aea:	7d c0       	rjmp	.+250    	; 0x2be6 <main+0x19f0>
					else if (Global_u8PressedKey == '^')LCD_enuDisplayString("(e^");
    2aec:	80 91 ef 01 	lds	r24, 0x01EF
    2af0:	8e 35       	cpi	r24, 0x5E	; 94
    2af2:	29 f4       	brne	.+10     	; 0x2afe <main+0x1908>
    2af4:	85 e7       	ldi	r24, 0x75	; 117
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
    2afc:	74 c0       	rjmp	.+232    	; 0x2be6 <main+0x19f0>

					else if (Global_u8PressedKey == 'y')LCD_enuDisplayString("asin(");
    2afe:	80 91 ef 01 	lds	r24, 0x01EF
    2b02:	89 37       	cpi	r24, 0x79	; 121
    2b04:	29 f4       	brne	.+10     	; 0x2b10 <main+0x191a>
    2b06:	89 e7       	ldi	r24, 0x79	; 121
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
    2b0e:	6b c0       	rjmp	.+214    	; 0x2be6 <main+0x19f0>
					else if (Global_u8PressedKey == '[')LCD_enuDisplayString("acos(");
    2b10:	80 91 ef 01 	lds	r24, 0x01EF
    2b14:	8b 35       	cpi	r24, 0x5B	; 91
    2b16:	29 f4       	brne	.+10     	; 0x2b22 <main+0x192c>
    2b18:	8f e7       	ldi	r24, 0x7F	; 127
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
    2b20:	62 c0       	rjmp	.+196    	; 0x2be6 <main+0x19f0>
					else if (Global_u8PressedKey == 'v')LCD_enuDisplayString("atan(");
    2b22:	80 91 ef 01 	lds	r24, 0x01EF
    2b26:	86 37       	cpi	r24, 0x76	; 118
    2b28:	29 f4       	brne	.+10     	; 0x2b34 <main+0x193e>
    2b2a:	85 e8       	ldi	r24, 0x85	; 133
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
    2b32:	59 c0       	rjmp	.+178    	; 0x2be6 <main+0x19f0>

					else if (Global_u8PressedKey == 'w')LCD_enuDisplayString("sinh(");
    2b34:	80 91 ef 01 	lds	r24, 0x01EF
    2b38:	87 37       	cpi	r24, 0x77	; 119
    2b3a:	29 f4       	brne	.+10     	; 0x2b46 <main+0x1950>
    2b3c:	8b e8       	ldi	r24, 0x8B	; 139
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
    2b44:	50 c0       	rjmp	.+160    	; 0x2be6 <main+0x19f0>
					else if (Global_u8PressedKey == 'u')LCD_enuDisplayString("cosh(");
    2b46:	80 91 ef 01 	lds	r24, 0x01EF
    2b4a:	85 37       	cpi	r24, 0x75	; 117
    2b4c:	29 f4       	brne	.+10     	; 0x2b58 <main+0x1962>
    2b4e:	81 e9       	ldi	r24, 0x91	; 145
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
    2b56:	47 c0       	rjmp	.+142    	; 0x2be6 <main+0x19f0>
					else if (Global_u8PressedKey == 'p')LCD_enuDisplayString("tanh(");
    2b58:	80 91 ef 01 	lds	r24, 0x01EF
    2b5c:	80 37       	cpi	r24, 0x70	; 112
    2b5e:	29 f4       	brne	.+10     	; 0x2b6a <main+0x1974>
    2b60:	87 e9       	ldi	r24, 0x97	; 151
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
    2b68:	3e c0       	rjmp	.+124    	; 0x2be6 <main+0x19f0>
					else{
						if(Get_bit(Global_u16HYP,bracets)) LCD_enuSendChar(')');
    2b6a:	80 91 72 02 	lds	r24, 0x0272
    2b6e:	90 91 73 02 	lds	r25, 0x0273
    2b72:	80 70       	andi	r24, 0x00	; 0
    2b74:	98 70       	andi	r25, 0x08	; 8
    2b76:	00 97       	sbiw	r24, 0x00	; 0
    2b78:	19 f0       	breq	.+6      	; 0x2b80 <main+0x198a>
    2b7a:	89 e2       	ldi	r24, 0x29	; 41
    2b7c:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
						LCD_enuSendChar(Global_u8PressedKey);
    2b80:	80 91 ef 01 	lds	r24, 0x01EF
    2b84:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
						Clr_bit(Global_u16HYP,bracets);
    2b88:	80 91 72 02 	lds	r24, 0x0272
    2b8c:	90 91 73 02 	lds	r25, 0x0273
    2b90:	97 7f       	andi	r25, 0xF7	; 247
    2b92:	90 93 73 02 	sts	0x0273, r25
    2b96:	80 93 72 02 	sts	0x0272, r24
    2b9a:	25 c0       	rjmp	.+74     	; 0x2be6 <main+0x19f0>
					}
				}
				else if(Global_u8PressedKey == '=')
    2b9c:	80 91 ef 01 	lds	r24, 0x01EF
    2ba0:	8d 33       	cpi	r24, 0x3D	; 61
    2ba2:	61 f4       	brne	.+24     	; 0x2bbc <main+0x19c6>
				{
					if(Get_bit(Global_u16HYP,bracets)) LCD_enuSendChar(')');
    2ba4:	80 91 72 02 	lds	r24, 0x0272
    2ba8:	90 91 73 02 	lds	r25, 0x0273
    2bac:	80 70       	andi	r24, 0x00	; 0
    2bae:	98 70       	andi	r25, 0x08	; 8
    2bb0:	00 97       	sbiw	r24, 0x00	; 0
    2bb2:	f1 f0       	breq	.+60     	; 0x2bf0 <main+0x19fa>
    2bb4:	89 e2       	ldi	r24, 0x29	; 41
    2bb6:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    2bba:	1a c0       	rjmp	.+52     	; 0x2bf0 <main+0x19fa>
					break;
				}
				else if(Global_u8PressedKey == 'c')
    2bbc:	80 91 ef 01 	lds	r24, 0x01EF
    2bc0:	83 36       	cpi	r24, 0x63	; 99
    2bc2:	89 f4       	brne	.+34     	; 0x2be6 <main+0x19f0>
				{
					LCD_enuClearDisplay();
    2bc4:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <LCD_enuClearDisplay>
					Local_Clear();
    2bc8:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <Local_Clear>
					LCD_enuSendCommand(0x06);
    2bcc:	86 e0       	ldi	r24, 0x06	; 6
    2bce:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <LCD_enuSendCommand>
					Clr_bit(Global_u16HYP,NUMerror);
    2bd2:	80 91 72 02 	lds	r24, 0x0272
    2bd6:	90 91 73 02 	lds	r25, 0x0273
    2bda:	9b 7f       	andi	r25, 0xFB	; 251
    2bdc:	90 93 73 02 	sts	0x0273, r25
    2be0:	80 93 72 02 	sts	0x0272, r24
    2be4:	05 c0       	rjmp	.+10     	; 0x2bf0 <main+0x19fa>
				LCD_enuDisplayString("HEX");
			}

			LCD_enuGoto(2,0);

			while (Global_u8PressedKey != '=')
    2be6:	80 91 ef 01 	lds	r24, 0x01EF
    2bea:	8d 33       	cpi	r24, 0x3D	; 61
    2bec:	09 f0       	breq	.+2      	; 0x2bf0 <main+0x19fa>
    2bee:	c0 cd       	rjmp	.-1152   	; 0x2770 <main+0x157a>
					Clr_bit(Global_u16HYP,NUMerror);
					break;
				}
			}

			if(Get_bit(Global_u16HYP,NUMerror) && Global_u8PressedKey!='c' )
    2bf0:	80 91 72 02 	lds	r24, 0x0272
    2bf4:	90 91 73 02 	lds	r25, 0x0273
    2bf8:	80 70       	andi	r24, 0x00	; 0
    2bfa:	94 70       	andi	r25, 0x04	; 4
    2bfc:	00 97       	sbiw	r24, 0x00	; 0
    2bfe:	71 f0       	breq	.+28     	; 0x2c1c <main+0x1a26>
    2c00:	80 91 ef 01 	lds	r24, 0x01EF
    2c04:	83 36       	cpi	r24, 0x63	; 99
    2c06:	51 f0       	breq	.+20     	; 0x2c1c <main+0x1a26>
			{
				LCD_enuClearDisplay();
    2c08:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <LCD_enuClearDisplay>
				LCD_enuDisplayString("Math error!!..");
    2c0c:	84 ea       	ldi	r24, 0xA4	; 164
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
				Local_Clear();
    2c14:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <Local_Clear>
    2c18:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <main+0x1e>
				continue;
			}
			else if (Global_u8PressedKey!='c')
    2c1c:	80 91 ef 01 	lds	r24, 0x01EF
    2c20:	83 36       	cpi	r24, 0x63	; 99
    2c22:	11 f4       	brne	.+4      	; 0x2c28 <main+0x1a32>
    2c24:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <main+0x1e>
			{
				LCD_enuGoto(2,15);
    2c28:	82 e0       	ldi	r24, 0x02	; 2
    2c2a:	6f e0       	ldi	r22, 0x0F	; 15
    2c2c:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <LCD_enuGoto>
				LCD_enuSendCommand(0x04);
    2c30:	84 e0       	ldi	r24, 0x04	; 4
    2c32:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <LCD_enuSendCommand>
				LCD_enuDisplayString(Global_u8Arr);
    2c36:	8d ec       	ldi	r24, 0xCD	; 205
    2c38:	91 e0       	ldi	r25, 0x01	; 1
    2c3a:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
				while(1)
				{

					Global_u8PressedKey = NOT_PRESSED;
    2c3e:	8f ef       	ldi	r24, 0xFF	; 255
    2c40:	80 93 ef 01 	sts	0x01EF, r24
    2c44:	04 c0       	rjmp	.+8      	; 0x2c4e <main+0x1a58>

					while(Global_u8PressedKey != 'i' && Global_u8PressedKey != 'z' && Global_u8PressedKey != 'a' && Global_u8PressedKey != 'o' &&  Global_u8PressedKey != 'c' )
					{
						Keypad_enuGetPressedKey(&Global_u8PressedKey);
    2c46:	8f ee       	ldi	r24, 0xEF	; 239
    2c48:	91 e0       	ldi	r25, 0x01	; 1
    2c4a:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <Keypad_enuGetPressedKey>
				while(1)
				{

					Global_u8PressedKey = NOT_PRESSED;

					while(Global_u8PressedKey != 'i' && Global_u8PressedKey != 'z' && Global_u8PressedKey != 'a' && Global_u8PressedKey != 'o' &&  Global_u8PressedKey != 'c' )
    2c4e:	80 91 ef 01 	lds	r24, 0x01EF
    2c52:	89 36       	cpi	r24, 0x69	; 105
    2c54:	81 f0       	breq	.+32     	; 0x2c76 <main+0x1a80>
    2c56:	80 91 ef 01 	lds	r24, 0x01EF
    2c5a:	8a 37       	cpi	r24, 0x7A	; 122
    2c5c:	61 f0       	breq	.+24     	; 0x2c76 <main+0x1a80>
    2c5e:	80 91 ef 01 	lds	r24, 0x01EF
    2c62:	81 36       	cpi	r24, 0x61	; 97
    2c64:	41 f0       	breq	.+16     	; 0x2c76 <main+0x1a80>
    2c66:	80 91 ef 01 	lds	r24, 0x01EF
    2c6a:	8f 36       	cpi	r24, 0x6F	; 111
    2c6c:	21 f0       	breq	.+8      	; 0x2c76 <main+0x1a80>
    2c6e:	80 91 ef 01 	lds	r24, 0x01EF
    2c72:	83 36       	cpi	r24, 0x63	; 99
    2c74:	41 f7       	brne	.-48     	; 0x2c46 <main+0x1a50>
					{
						Keypad_enuGetPressedKey(&Global_u8PressedKey);
					}
					if(Global_u8PressedKey == 'c')
    2c76:	80 91 ef 01 	lds	r24, 0x01EF
    2c7a:	83 36       	cpi	r24, 0x63	; 99
    2c7c:	09 f0       	breq	.+2      	; 0x2c80 <main+0x1a8a>
    2c7e:	4d c0       	rjmp	.+154    	; 0x2d1a <main+0x1b24>
					{
						LCD_enuClearDisplay();
    2c80:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <LCD_enuClearDisplay>
						Global_f32Num =0;
    2c84:	80 e0       	ldi	r24, 0x00	; 0
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	a0 e0       	ldi	r26, 0x00	; 0
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	80 93 6e 02 	sts	0x026E, r24
    2c90:	90 93 6f 02 	sts	0x026F, r25
    2c94:	a0 93 70 02 	sts	0x0270, r26
    2c98:	b0 93 71 02 	sts	0x0271, r27
						Global_u16FLAGS = 2;
    2c9c:	82 e0       	ldi	r24, 0x02	; 2
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	90 93 f2 01 	sts	0x01F2, r25
    2ca4:	80 93 f1 01 	sts	0x01F1, r24
						for(y=0 ;y<16;++y)Global_u8Arr[y]='0';
    2ca8:	10 92 7d 02 	sts	0x027D, r1
    2cac:	0f c0       	rjmp	.+30     	; 0x2ccc <main+0x1ad6>
    2cae:	80 91 7d 02 	lds	r24, 0x027D
    2cb2:	99 27       	eor	r25, r25
    2cb4:	87 fd       	sbrc	r24, 7
    2cb6:	90 95       	com	r25
    2cb8:	fc 01       	movw	r30, r24
    2cba:	e3 53       	subi	r30, 0x33	; 51
    2cbc:	fe 4f       	sbci	r31, 0xFE	; 254
    2cbe:	80 e3       	ldi	r24, 0x30	; 48
    2cc0:	80 83       	st	Z, r24
    2cc2:	80 91 7d 02 	lds	r24, 0x027D
    2cc6:	8f 5f       	subi	r24, 0xFF	; 255
    2cc8:	80 93 7d 02 	sts	0x027D, r24
    2ccc:	80 91 7d 02 	lds	r24, 0x027D
    2cd0:	80 31       	cpi	r24, 0x10	; 16
    2cd2:	6c f3       	brlt	.-38     	; 0x2cae <main+0x1ab8>
						for(y=0 ;y<16;++y)Global_u8SecArr[y]='0';
    2cd4:	10 92 7d 02 	sts	0x027D, r1
    2cd8:	0f c0       	rjmp	.+30     	; 0x2cf8 <main+0x1b02>
    2cda:	80 91 7d 02 	lds	r24, 0x027D
    2cde:	99 27       	eor	r25, r25
    2ce0:	87 fd       	sbrc	r24, 7
    2ce2:	90 95       	com	r25
    2ce4:	fc 01       	movw	r30, r24
    2ce6:	e2 52       	subi	r30, 0x22	; 34
    2ce8:	fe 4f       	sbci	r31, 0xFE	; 254
    2cea:	80 e3       	ldi	r24, 0x30	; 48
    2cec:	80 83       	st	Z, r24
    2cee:	80 91 7d 02 	lds	r24, 0x027D
    2cf2:	8f 5f       	subi	r24, 0xFF	; 255
    2cf4:	80 93 7d 02 	sts	0x027D, r24
    2cf8:	80 91 7d 02 	lds	r24, 0x027D
    2cfc:	80 31       	cpi	r24, 0x10	; 16
    2cfe:	6c f3       	brlt	.-38     	; 0x2cda <main+0x1ae4>
						Global_u16HYP = 0;
    2d00:	10 92 73 02 	sts	0x0273, r1
    2d04:	10 92 72 02 	sts	0x0272, r1
						Local_u8It2 =0;
    2d08:	10 92 6d 02 	sts	0x026D, r1
						Local_u8It1 =0;
    2d0c:	10 92 6c 02 	sts	0x026C, r1
						Global_u8Cnt=1;
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	80 93 f0 01 	sts	0x01F0, r24
    2d16:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <main+0x1e>
						break;
					}
					else if(Get_bit(Global_u16HYP, DEC))
    2d1a:	80 91 72 02 	lds	r24, 0x0272
    2d1e:	90 91 73 02 	lds	r25, 0x0273
    2d22:	80 70       	andi	r24, 0x00	; 0
    2d24:	91 70       	andi	r25, 0x01	; 1
    2d26:	00 97       	sbiw	r24, 0x00	; 0
    2d28:	09 f4       	brne	.+2      	; 0x2d2c <main+0x1b36>
    2d2a:	22 c1       	rjmp	.+580    	; 0x2f70 <main+0x1d7a>
					{
						for(y=0 ;y<16;++y)Global_u8Arr[y]='0';
    2d2c:	10 92 7d 02 	sts	0x027D, r1
    2d30:	0f c0       	rjmp	.+30     	; 0x2d50 <main+0x1b5a>
    2d32:	80 91 7d 02 	lds	r24, 0x027D
    2d36:	99 27       	eor	r25, r25
    2d38:	87 fd       	sbrc	r24, 7
    2d3a:	90 95       	com	r25
    2d3c:	fc 01       	movw	r30, r24
    2d3e:	e3 53       	subi	r30, 0x33	; 51
    2d40:	fe 4f       	sbci	r31, 0xFE	; 254
    2d42:	80 e3       	ldi	r24, 0x30	; 48
    2d44:	80 83       	st	Z, r24
    2d46:	80 91 7d 02 	lds	r24, 0x027D
    2d4a:	8f 5f       	subi	r24, 0xFF	; 255
    2d4c:	80 93 7d 02 	sts	0x027D, r24
    2d50:	80 91 7d 02 	lds	r24, 0x027D
    2d54:	80 31       	cpi	r24, 0x10	; 16
    2d56:	6c f3       	brlt	.-38     	; 0x2d32 <main+0x1b3c>

						if(Global_u8PressedKey == 'i')
    2d58:	80 91 ef 01 	lds	r24, 0x01EF
    2d5c:	89 36       	cpi	r24, 0x69	; 105
    2d5e:	09 f0       	breq	.+2      	; 0x2d62 <main+0x1b6c>
    2d60:	6a c0       	rjmp	.+212    	; 0x2e36 <main+0x1c40>
						{
							k=0;
    2d62:	10 92 7c 02 	sts	0x027C, r1
							Global_u16Num = Global_f32Num;
    2d66:	80 91 6e 02 	lds	r24, 0x026E
    2d6a:	90 91 6f 02 	lds	r25, 0x026F
    2d6e:	a0 91 70 02 	lds	r26, 0x0270
    2d72:	b0 91 71 02 	lds	r27, 0x0271
    2d76:	bc 01       	movw	r22, r24
    2d78:	cd 01       	movw	r24, r26
    2d7a:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	90 93 cc 01 	sts	0x01CC, r25
    2d86:	80 93 cb 01 	sts	0x01CB, r24
							do {
								Global_u16Num /= 10;
    2d8a:	80 91 cb 01 	lds	r24, 0x01CB
    2d8e:	90 91 cc 01 	lds	r25, 0x01CC
    2d92:	2a e0       	ldi	r18, 0x0A	; 10
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	b9 01       	movw	r22, r18
    2d98:	0e 94 a6 3b 	call	0x774c	; 0x774c <__udivmodhi4>
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	90 93 cc 01 	sts	0x01CC, r25
    2da2:	80 93 cb 01 	sts	0x01CB, r24
								++k;
    2da6:	80 91 7c 02 	lds	r24, 0x027C
    2daa:	8f 5f       	subi	r24, 0xFF	; 255
    2dac:	80 93 7c 02 	sts	0x027C, r24
							} while (Global_u16Num != 0);
    2db0:	80 91 cb 01 	lds	r24, 0x01CB
    2db4:	90 91 cc 01 	lds	r25, 0x01CC
    2db8:	00 97       	sbiw	r24, 0x00	; 0
    2dba:	39 f7       	brne	.-50     	; 0x2d8a <main+0x1b94>
							LCD_enuSendCommand(0x06);
    2dbc:	86 e0       	ldi	r24, 0x06	; 6
    2dbe:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <LCD_enuSendCommand>
							LCD_enuGoto(2,0);
    2dc2:	82 e0       	ldi	r24, 0x02	; 2
    2dc4:	60 e0       	ldi	r22, 0x00	; 0
    2dc6:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <LCD_enuGoto>
							for(y=0;  y < 15-k+1 ; ++y) LCD_enuSendChar(' ');
    2dca:	10 92 7d 02 	sts	0x027D, r1
    2dce:	08 c0       	rjmp	.+16     	; 0x2de0 <main+0x1bea>
    2dd0:	80 e2       	ldi	r24, 0x20	; 32
    2dd2:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    2dd6:	80 91 7d 02 	lds	r24, 0x027D
    2dda:	8f 5f       	subi	r24, 0xFF	; 255
    2ddc:	80 93 7d 02 	sts	0x027D, r24
    2de0:	80 91 7d 02 	lds	r24, 0x027D
    2de4:	48 2f       	mov	r20, r24
    2de6:	55 27       	eor	r21, r21
    2de8:	47 fd       	sbrc	r20, 7
    2dea:	50 95       	com	r21
    2dec:	80 91 7c 02 	lds	r24, 0x027C
    2df0:	28 2f       	mov	r18, r24
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	80 e1       	ldi	r24, 0x10	; 16
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	82 1b       	sub	r24, r18
    2dfa:	93 0b       	sbc	r25, r19
    2dfc:	48 17       	cp	r20, r24
    2dfe:	59 07       	cpc	r21, r25
    2e00:	3c f3       	brlt	.-50     	; 0x2dd0 <main+0x1bda>
							LCD_enuGoto(2,15-k+1);
    2e02:	90 91 7c 02 	lds	r25, 0x027C
    2e06:	80 e1       	ldi	r24, 0x10	; 16
    2e08:	28 2f       	mov	r18, r24
    2e0a:	29 1b       	sub	r18, r25
    2e0c:	92 2f       	mov	r25, r18
    2e0e:	82 e0       	ldi	r24, 0x02	; 2
    2e10:	69 2f       	mov	r22, r25
    2e12:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <LCD_enuGoto>
							LCD_enuWriteNumber(Global_f32Num);
    2e16:	80 91 6e 02 	lds	r24, 0x026E
    2e1a:	90 91 6f 02 	lds	r25, 0x026F
    2e1e:	a0 91 70 02 	lds	r26, 0x0270
    2e22:	b0 91 71 02 	lds	r27, 0x0271
    2e26:	bc 01       	movw	r22, r24
    2e28:	cd 01       	movw	r24, r26
    2e2a:	0e 94 ce 37 	call	0x6f9c	; 0x6f9c <LCD_enuWriteNumber>
							LCD_enuSendCommand(0x04);
    2e2e:	84 e0       	ldi	r24, 0x04	; 4
    2e30:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <LCD_enuSendCommand>
    2e34:	04 cf       	rjmp	.-504    	; 0x2c3e <main+0x1a48>
						}
						else if(Global_u8PressedKey == 'o')
    2e36:	80 91 ef 01 	lds	r24, 0x01EF
    2e3a:	8f 36       	cpi	r24, 0x6F	; 111
    2e3c:	81 f5       	brne	.+96     	; 0x2e9e <main+0x1ca8>
						{
							Dec2Hex(Global_f32Num,Global_u8Arr);
    2e3e:	80 91 6e 02 	lds	r24, 0x026E
    2e42:	90 91 6f 02 	lds	r25, 0x026F
    2e46:	a0 91 70 02 	lds	r26, 0x0270
    2e4a:	b0 91 71 02 	lds	r27, 0x0271
    2e4e:	bc 01       	movw	r22, r24
    2e50:	cd 01       	movw	r24, r26
    2e52:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    2e56:	dc 01       	movw	r26, r24
    2e58:	cb 01       	movw	r24, r22
    2e5a:	2d ec       	ldi	r18, 0xCD	; 205
    2e5c:	31 e0       	ldi	r19, 0x01	; 1
    2e5e:	b9 01       	movw	r22, r18
    2e60:	0e 94 69 28 	call	0x50d2	; 0x50d2 <Dec2Hex>
							LCD_enuGoto(2,15);
    2e64:	82 e0       	ldi	r24, 0x02	; 2
    2e66:	6f e0       	ldi	r22, 0x0F	; 15
    2e68:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <LCD_enuGoto>
							for(y=15; y>=0; --y) LCD_enuSendChar(Global_u8Arr[y]);
    2e6c:	8f e0       	ldi	r24, 0x0F	; 15
    2e6e:	80 93 7d 02 	sts	0x027D, r24
    2e72:	10 c0       	rjmp	.+32     	; 0x2e94 <main+0x1c9e>
    2e74:	80 91 7d 02 	lds	r24, 0x027D
    2e78:	99 27       	eor	r25, r25
    2e7a:	87 fd       	sbrc	r24, 7
    2e7c:	90 95       	com	r25
    2e7e:	fc 01       	movw	r30, r24
    2e80:	e3 53       	subi	r30, 0x33	; 51
    2e82:	fe 4f       	sbci	r31, 0xFE	; 254
    2e84:	80 81       	ld	r24, Z
    2e86:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    2e8a:	80 91 7d 02 	lds	r24, 0x027D
    2e8e:	81 50       	subi	r24, 0x01	; 1
    2e90:	80 93 7d 02 	sts	0x027D, r24
    2e94:	80 91 7d 02 	lds	r24, 0x027D
    2e98:	88 23       	and	r24, r24
    2e9a:	64 f7       	brge	.-40     	; 0x2e74 <main+0x1c7e>
    2e9c:	d0 ce       	rjmp	.-608    	; 0x2c3e <main+0x1a48>
						}
						else if(Global_u8PressedKey == 'z')
    2e9e:	80 91 ef 01 	lds	r24, 0x01EF
    2ea2:	8a 37       	cpi	r24, 0x7A	; 122
    2ea4:	81 f5       	brne	.+96     	; 0x2f06 <main+0x1d10>
						{
							Dec2Bin(Global_f32Num,Global_u8Arr);
    2ea6:	80 91 6e 02 	lds	r24, 0x026E
    2eaa:	90 91 6f 02 	lds	r25, 0x026F
    2eae:	a0 91 70 02 	lds	r26, 0x0270
    2eb2:	b0 91 71 02 	lds	r27, 0x0271
    2eb6:	bc 01       	movw	r22, r24
    2eb8:	cd 01       	movw	r24, r26
    2eba:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    2ebe:	dc 01       	movw	r26, r24
    2ec0:	cb 01       	movw	r24, r22
    2ec2:	2d ec       	ldi	r18, 0xCD	; 205
    2ec4:	31 e0       	ldi	r19, 0x01	; 1
    2ec6:	b9 01       	movw	r22, r18
    2ec8:	0e 94 fc 28 	call	0x51f8	; 0x51f8 <Dec2Bin>
							LCD_enuGoto(2,15);
    2ecc:	82 e0       	ldi	r24, 0x02	; 2
    2ece:	6f e0       	ldi	r22, 0x0F	; 15
    2ed0:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <LCD_enuGoto>
							for(y=15; y>=0; --y) LCD_enuSendChar(Global_u8Arr[y]);
    2ed4:	8f e0       	ldi	r24, 0x0F	; 15
    2ed6:	80 93 7d 02 	sts	0x027D, r24
    2eda:	10 c0       	rjmp	.+32     	; 0x2efc <main+0x1d06>
    2edc:	80 91 7d 02 	lds	r24, 0x027D
    2ee0:	99 27       	eor	r25, r25
    2ee2:	87 fd       	sbrc	r24, 7
    2ee4:	90 95       	com	r25
    2ee6:	fc 01       	movw	r30, r24
    2ee8:	e3 53       	subi	r30, 0x33	; 51
    2eea:	fe 4f       	sbci	r31, 0xFE	; 254
    2eec:	80 81       	ld	r24, Z
    2eee:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    2ef2:	80 91 7d 02 	lds	r24, 0x027D
    2ef6:	81 50       	subi	r24, 0x01	; 1
    2ef8:	80 93 7d 02 	sts	0x027D, r24
    2efc:	80 91 7d 02 	lds	r24, 0x027D
    2f00:	88 23       	and	r24, r24
    2f02:	64 f7       	brge	.-40     	; 0x2edc <main+0x1ce6>
    2f04:	9c ce       	rjmp	.-712    	; 0x2c3e <main+0x1a48>
						}
						else if(Global_u8PressedKey == 'a')
    2f06:	80 91 ef 01 	lds	r24, 0x01EF
    2f0a:	81 36       	cpi	r24, 0x61	; 97
    2f0c:	09 f0       	breq	.+2      	; 0x2f10 <main+0x1d1a>
    2f0e:	97 ce       	rjmp	.-722    	; 0x2c3e <main+0x1a48>
						{
							Dec2Oct(Global_f32Num,Global_u8Arr);
    2f10:	80 91 6e 02 	lds	r24, 0x026E
    2f14:	90 91 6f 02 	lds	r25, 0x026F
    2f18:	a0 91 70 02 	lds	r26, 0x0270
    2f1c:	b0 91 71 02 	lds	r27, 0x0271
    2f20:	bc 01       	movw	r22, r24
    2f22:	cd 01       	movw	r24, r26
    2f24:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    2f28:	dc 01       	movw	r26, r24
    2f2a:	cb 01       	movw	r24, r22
    2f2c:	2d ec       	ldi	r18, 0xCD	; 205
    2f2e:	31 e0       	ldi	r19, 0x01	; 1
    2f30:	b9 01       	movw	r22, r18
    2f32:	0e 94 c1 28 	call	0x5182	; 0x5182 <Dec2Oct>
							LCD_enuGoto(2,15);
    2f36:	82 e0       	ldi	r24, 0x02	; 2
    2f38:	6f e0       	ldi	r22, 0x0F	; 15
    2f3a:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <LCD_enuGoto>
							for(y=15; y>=0; --y) LCD_enuSendChar(Global_u8Arr[y]);
    2f3e:	8f e0       	ldi	r24, 0x0F	; 15
    2f40:	80 93 7d 02 	sts	0x027D, r24
    2f44:	10 c0       	rjmp	.+32     	; 0x2f66 <main+0x1d70>
    2f46:	80 91 7d 02 	lds	r24, 0x027D
    2f4a:	99 27       	eor	r25, r25
    2f4c:	87 fd       	sbrc	r24, 7
    2f4e:	90 95       	com	r25
    2f50:	fc 01       	movw	r30, r24
    2f52:	e3 53       	subi	r30, 0x33	; 51
    2f54:	fe 4f       	sbci	r31, 0xFE	; 254
    2f56:	80 81       	ld	r24, Z
    2f58:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    2f5c:	80 91 7d 02 	lds	r24, 0x027D
    2f60:	81 50       	subi	r24, 0x01	; 1
    2f62:	80 93 7d 02 	sts	0x027D, r24
    2f66:	80 91 7d 02 	lds	r24, 0x027D
    2f6a:	88 23       	and	r24, r24
    2f6c:	64 f7       	brge	.-40     	; 0x2f46 <main+0x1d50>
    2f6e:	67 ce       	rjmp	.-818    	; 0x2c3e <main+0x1a48>
						}
					}
					else if(Get_bit(Global_u16HYP, OCT))
    2f70:	80 91 72 02 	lds	r24, 0x0272
    2f74:	90 91 73 02 	lds	r25, 0x0273
    2f78:	80 78       	andi	r24, 0x80	; 128
    2f7a:	90 70       	andi	r25, 0x00	; 0
    2f7c:	00 97       	sbiw	r24, 0x00	; 0
    2f7e:	09 f4       	brne	.+2      	; 0x2f82 <main+0x1d8c>
    2f80:	f5 c0       	rjmp	.+490    	; 0x316c <main+0x1f76>
					{
						for(y=0 ;y<16;++y)Global_u8SecArr[y]  ='0';
    2f82:	10 92 7d 02 	sts	0x027D, r1
    2f86:	0f c0       	rjmp	.+30     	; 0x2fa6 <main+0x1db0>
    2f88:	80 91 7d 02 	lds	r24, 0x027D
    2f8c:	99 27       	eor	r25, r25
    2f8e:	87 fd       	sbrc	r24, 7
    2f90:	90 95       	com	r25
    2f92:	fc 01       	movw	r30, r24
    2f94:	e2 52       	subi	r30, 0x22	; 34
    2f96:	fe 4f       	sbci	r31, 0xFE	; 254
    2f98:	80 e3       	ldi	r24, 0x30	; 48
    2f9a:	80 83       	st	Z, r24
    2f9c:	80 91 7d 02 	lds	r24, 0x027D
    2fa0:	8f 5f       	subi	r24, 0xFF	; 255
    2fa2:	80 93 7d 02 	sts	0x027D, r24
    2fa6:	80 91 7d 02 	lds	r24, 0x027D
    2faa:	80 31       	cpi	r24, 0x10	; 16
    2fac:	6c f3       	brlt	.-38     	; 0x2f88 <main+0x1d92>
						if(Global_u8PressedKey == 'i')
    2fae:	80 91 ef 01 	lds	r24, 0x01EF
    2fb2:	89 36       	cpi	r24, 0x69	; 105
    2fb4:	09 f0       	breq	.+2      	; 0x2fb8 <main+0x1dc2>
    2fb6:	65 c0       	rjmp	.+202    	; 0x3082 <main+0x1e8c>
						{
							k=0;
    2fb8:	10 92 7c 02 	sts	0x027C, r1
							Global_u16Num = Oct2Dec(Global_u8Arr);
    2fbc:	8d ec       	ldi	r24, 0xCD	; 205
    2fbe:	91 e0       	ldi	r25, 0x01	; 1
    2fc0:	0e 94 90 29 	call	0x5320	; 0x5320 <Oct2Dec>
    2fc4:	90 93 cc 01 	sts	0x01CC, r25
    2fc8:	80 93 cb 01 	sts	0x01CB, r24
							do {
								Global_u16Num /= 10;
    2fcc:	80 91 cb 01 	lds	r24, 0x01CB
    2fd0:	90 91 cc 01 	lds	r25, 0x01CC
    2fd4:	2a e0       	ldi	r18, 0x0A	; 10
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	b9 01       	movw	r22, r18
    2fda:	0e 94 a6 3b 	call	0x774c	; 0x774c <__udivmodhi4>
    2fde:	cb 01       	movw	r24, r22
    2fe0:	90 93 cc 01 	sts	0x01CC, r25
    2fe4:	80 93 cb 01 	sts	0x01CB, r24
								++k;
    2fe8:	80 91 7c 02 	lds	r24, 0x027C
    2fec:	8f 5f       	subi	r24, 0xFF	; 255
    2fee:	80 93 7c 02 	sts	0x027C, r24
							} while (Global_u16Num != 0);
    2ff2:	80 91 cb 01 	lds	r24, 0x01CB
    2ff6:	90 91 cc 01 	lds	r25, 0x01CC
    2ffa:	00 97       	sbiw	r24, 0x00	; 0
    2ffc:	39 f7       	brne	.-50     	; 0x2fcc <main+0x1dd6>
							LCD_enuSendCommand(0x06);
    2ffe:	86 e0       	ldi	r24, 0x06	; 6
    3000:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <LCD_enuSendCommand>
							LCD_enuGoto(2,0);
    3004:	82 e0       	ldi	r24, 0x02	; 2
    3006:	60 e0       	ldi	r22, 0x00	; 0
    3008:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <LCD_enuGoto>
							for(y=0;  y < 15-k+1 ; ++y) LCD_enuSendChar(' ');
    300c:	10 92 7d 02 	sts	0x027D, r1
    3010:	08 c0       	rjmp	.+16     	; 0x3022 <main+0x1e2c>
    3012:	80 e2       	ldi	r24, 0x20	; 32
    3014:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    3018:	80 91 7d 02 	lds	r24, 0x027D
    301c:	8f 5f       	subi	r24, 0xFF	; 255
    301e:	80 93 7d 02 	sts	0x027D, r24
    3022:	80 91 7d 02 	lds	r24, 0x027D
    3026:	48 2f       	mov	r20, r24
    3028:	55 27       	eor	r21, r21
    302a:	47 fd       	sbrc	r20, 7
    302c:	50 95       	com	r21
    302e:	80 91 7c 02 	lds	r24, 0x027C
    3032:	28 2f       	mov	r18, r24
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	80 e1       	ldi	r24, 0x10	; 16
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	82 1b       	sub	r24, r18
    303c:	93 0b       	sbc	r25, r19
    303e:	48 17       	cp	r20, r24
    3040:	59 07       	cpc	r21, r25
    3042:	3c f3       	brlt	.-50     	; 0x3012 <main+0x1e1c>
							LCD_enuGoto(2,15-k+1);
    3044:	90 91 7c 02 	lds	r25, 0x027C
    3048:	80 e1       	ldi	r24, 0x10	; 16
    304a:	38 2f       	mov	r19, r24
    304c:	39 1b       	sub	r19, r25
    304e:	93 2f       	mov	r25, r19
    3050:	82 e0       	ldi	r24, 0x02	; 2
    3052:	69 2f       	mov	r22, r25
    3054:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <LCD_enuGoto>
							LCD_enuWriteNumber(Oct2Dec(Global_u8Arr));
    3058:	8d ec       	ldi	r24, 0xCD	; 205
    305a:	91 e0       	ldi	r25, 0x01	; 1
    305c:	0e 94 90 29 	call	0x5320	; 0x5320 <Oct2Dec>
    3060:	cc 01       	movw	r24, r24
    3062:	a0 e0       	ldi	r26, 0x00	; 0
    3064:	b0 e0       	ldi	r27, 0x00	; 0
    3066:	bc 01       	movw	r22, r24
    3068:	cd 01       	movw	r24, r26
    306a:	0e 94 65 06 	call	0xcca	; 0xcca <__floatunsisf>
    306e:	dc 01       	movw	r26, r24
    3070:	cb 01       	movw	r24, r22
    3072:	bc 01       	movw	r22, r24
    3074:	cd 01       	movw	r24, r26
    3076:	0e 94 ce 37 	call	0x6f9c	; 0x6f9c <LCD_enuWriteNumber>
							LCD_enuSendCommand(0x04);
    307a:	84 e0       	ldi	r24, 0x04	; 4
    307c:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <LCD_enuSendCommand>
    3080:	de cd       	rjmp	.-1092   	; 0x2c3e <main+0x1a48>
						}
						else if(Global_u8PressedKey == 'o')
    3082:	80 91 ef 01 	lds	r24, 0x01EF
    3086:	8f 36       	cpi	r24, 0x6F	; 111
    3088:	71 f5       	brne	.+92     	; 0x30e6 <main+0x1ef0>
						{
							Global_u16Num = Oct2Dec(Global_u8Arr);
    308a:	8d ec       	ldi	r24, 0xCD	; 205
    308c:	91 e0       	ldi	r25, 0x01	; 1
    308e:	0e 94 90 29 	call	0x5320	; 0x5320 <Oct2Dec>
    3092:	90 93 cc 01 	sts	0x01CC, r25
    3096:	80 93 cb 01 	sts	0x01CB, r24
							Dec2Hex(Global_u16Num,Global_u8SecArr);
    309a:	80 91 cb 01 	lds	r24, 0x01CB
    309e:	90 91 cc 01 	lds	r25, 0x01CC
    30a2:	2e ed       	ldi	r18, 0xDE	; 222
    30a4:	31 e0       	ldi	r19, 0x01	; 1
    30a6:	b9 01       	movw	r22, r18
    30a8:	0e 94 69 28 	call	0x50d2	; 0x50d2 <Dec2Hex>
							LCD_enuGoto(2,15);
    30ac:	82 e0       	ldi	r24, 0x02	; 2
    30ae:	6f e0       	ldi	r22, 0x0F	; 15
    30b0:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <LCD_enuGoto>
							for(y=15; y>=0; --y) LCD_enuSendChar(Global_u8SecArr[y]);
    30b4:	8f e0       	ldi	r24, 0x0F	; 15
    30b6:	80 93 7d 02 	sts	0x027D, r24
    30ba:	10 c0       	rjmp	.+32     	; 0x30dc <main+0x1ee6>
    30bc:	80 91 7d 02 	lds	r24, 0x027D
    30c0:	99 27       	eor	r25, r25
    30c2:	87 fd       	sbrc	r24, 7
    30c4:	90 95       	com	r25
    30c6:	fc 01       	movw	r30, r24
    30c8:	e2 52       	subi	r30, 0x22	; 34
    30ca:	fe 4f       	sbci	r31, 0xFE	; 254
    30cc:	80 81       	ld	r24, Z
    30ce:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    30d2:	80 91 7d 02 	lds	r24, 0x027D
    30d6:	81 50       	subi	r24, 0x01	; 1
    30d8:	80 93 7d 02 	sts	0x027D, r24
    30dc:	80 91 7d 02 	lds	r24, 0x027D
    30e0:	88 23       	and	r24, r24
    30e2:	64 f7       	brge	.-40     	; 0x30bc <main+0x1ec6>
    30e4:	ac cd       	rjmp	.-1192   	; 0x2c3e <main+0x1a48>
						}
						else if(Global_u8PressedKey == 'z')
    30e6:	80 91 ef 01 	lds	r24, 0x01EF
    30ea:	8a 37       	cpi	r24, 0x7A	; 122
    30ec:	71 f5       	brne	.+92     	; 0x314a <main+0x1f54>
						{
							Global_u16Num = Oct2Dec(Global_u8Arr);
    30ee:	8d ec       	ldi	r24, 0xCD	; 205
    30f0:	91 e0       	ldi	r25, 0x01	; 1
    30f2:	0e 94 90 29 	call	0x5320	; 0x5320 <Oct2Dec>
    30f6:	90 93 cc 01 	sts	0x01CC, r25
    30fa:	80 93 cb 01 	sts	0x01CB, r24
							Dec2Bin(Global_u16Num,Global_u8SecArr);
    30fe:	80 91 cb 01 	lds	r24, 0x01CB
    3102:	90 91 cc 01 	lds	r25, 0x01CC
    3106:	2e ed       	ldi	r18, 0xDE	; 222
    3108:	31 e0       	ldi	r19, 0x01	; 1
    310a:	b9 01       	movw	r22, r18
    310c:	0e 94 fc 28 	call	0x51f8	; 0x51f8 <Dec2Bin>
							LCD_enuGoto(2,15);
    3110:	82 e0       	ldi	r24, 0x02	; 2
    3112:	6f e0       	ldi	r22, 0x0F	; 15
    3114:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <LCD_enuGoto>
							for(y=15; y>=0; --y) LCD_enuSendChar(Global_u8SecArr[y]);
    3118:	8f e0       	ldi	r24, 0x0F	; 15
    311a:	80 93 7d 02 	sts	0x027D, r24
    311e:	10 c0       	rjmp	.+32     	; 0x3140 <main+0x1f4a>
    3120:	80 91 7d 02 	lds	r24, 0x027D
    3124:	99 27       	eor	r25, r25
    3126:	87 fd       	sbrc	r24, 7
    3128:	90 95       	com	r25
    312a:	fc 01       	movw	r30, r24
    312c:	e2 52       	subi	r30, 0x22	; 34
    312e:	fe 4f       	sbci	r31, 0xFE	; 254
    3130:	80 81       	ld	r24, Z
    3132:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    3136:	80 91 7d 02 	lds	r24, 0x027D
    313a:	81 50       	subi	r24, 0x01	; 1
    313c:	80 93 7d 02 	sts	0x027D, r24
    3140:	80 91 7d 02 	lds	r24, 0x027D
    3144:	88 23       	and	r24, r24
    3146:	64 f7       	brge	.-40     	; 0x3120 <main+0x1f2a>
    3148:	7a cd       	rjmp	.-1292   	; 0x2c3e <main+0x1a48>
						}
						else if(Global_u8PressedKey == 'a')
    314a:	80 91 ef 01 	lds	r24, 0x01EF
    314e:	81 36       	cpi	r24, 0x61	; 97
    3150:	09 f0       	breq	.+2      	; 0x3154 <main+0x1f5e>
    3152:	75 cd       	rjmp	.-1302   	; 0x2c3e <main+0x1a48>
						{
							LCD_enuGoto(2,15);
    3154:	82 e0       	ldi	r24, 0x02	; 2
    3156:	6f e0       	ldi	r22, 0x0F	; 15
    3158:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <LCD_enuGoto>
							LCD_enuSendCommand(0x04);
    315c:	84 e0       	ldi	r24, 0x04	; 4
    315e:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <LCD_enuSendCommand>
							LCD_enuDisplayString(Global_u8Arr);
    3162:	8d ec       	ldi	r24, 0xCD	; 205
    3164:	91 e0       	ldi	r25, 0x01	; 1
    3166:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
    316a:	69 cd       	rjmp	.-1326   	; 0x2c3e <main+0x1a48>
						}
					}
					else if(Get_bit(Global_u16HYP, BIN))
    316c:	80 91 72 02 	lds	r24, 0x0272
    3170:	90 91 73 02 	lds	r25, 0x0273
    3174:	80 70       	andi	r24, 0x00	; 0
    3176:	92 70       	andi	r25, 0x02	; 2
    3178:	00 97       	sbiw	r24, 0x00	; 0
    317a:	09 f4       	brne	.+2      	; 0x317e <main+0x1f88>
    317c:	f5 c0       	rjmp	.+490    	; 0x3368 <main+0x2172>
					{
						for(y=0 ;y<16;++y)Global_u8SecArr[y]  ='0';
    317e:	10 92 7d 02 	sts	0x027D, r1
    3182:	0f c0       	rjmp	.+30     	; 0x31a2 <main+0x1fac>
    3184:	80 91 7d 02 	lds	r24, 0x027D
    3188:	99 27       	eor	r25, r25
    318a:	87 fd       	sbrc	r24, 7
    318c:	90 95       	com	r25
    318e:	fc 01       	movw	r30, r24
    3190:	e2 52       	subi	r30, 0x22	; 34
    3192:	fe 4f       	sbci	r31, 0xFE	; 254
    3194:	80 e3       	ldi	r24, 0x30	; 48
    3196:	80 83       	st	Z, r24
    3198:	80 91 7d 02 	lds	r24, 0x027D
    319c:	8f 5f       	subi	r24, 0xFF	; 255
    319e:	80 93 7d 02 	sts	0x027D, r24
    31a2:	80 91 7d 02 	lds	r24, 0x027D
    31a6:	80 31       	cpi	r24, 0x10	; 16
    31a8:	6c f3       	brlt	.-38     	; 0x3184 <main+0x1f8e>
						if(Global_u8PressedKey == 'i')
    31aa:	80 91 ef 01 	lds	r24, 0x01EF
    31ae:	89 36       	cpi	r24, 0x69	; 105
    31b0:	09 f0       	breq	.+2      	; 0x31b4 <main+0x1fbe>
    31b2:	65 c0       	rjmp	.+202    	; 0x327e <main+0x2088>
						{
							k=0;
    31b4:	10 92 7c 02 	sts	0x027C, r1
							Global_u16Num = Bin2Dec(Global_u8Arr);
    31b8:	8d ec       	ldi	r24, 0xCD	; 205
    31ba:	91 e0       	ldi	r25, 0x01	; 1
    31bc:	0e 94 2d 2a 	call	0x545a	; 0x545a <Bin2Dec>
    31c0:	90 93 cc 01 	sts	0x01CC, r25
    31c4:	80 93 cb 01 	sts	0x01CB, r24
							do {
								Global_u16Num /= 10;
    31c8:	80 91 cb 01 	lds	r24, 0x01CB
    31cc:	90 91 cc 01 	lds	r25, 0x01CC
    31d0:	2a e0       	ldi	r18, 0x0A	; 10
    31d2:	30 e0       	ldi	r19, 0x00	; 0
    31d4:	b9 01       	movw	r22, r18
    31d6:	0e 94 a6 3b 	call	0x774c	; 0x774c <__udivmodhi4>
    31da:	cb 01       	movw	r24, r22
    31dc:	90 93 cc 01 	sts	0x01CC, r25
    31e0:	80 93 cb 01 	sts	0x01CB, r24
								++k;
    31e4:	80 91 7c 02 	lds	r24, 0x027C
    31e8:	8f 5f       	subi	r24, 0xFF	; 255
    31ea:	80 93 7c 02 	sts	0x027C, r24
							} while (Global_u16Num != 0);
    31ee:	80 91 cb 01 	lds	r24, 0x01CB
    31f2:	90 91 cc 01 	lds	r25, 0x01CC
    31f6:	00 97       	sbiw	r24, 0x00	; 0
    31f8:	39 f7       	brne	.-50     	; 0x31c8 <main+0x1fd2>
							LCD_enuSendCommand(0x06);
    31fa:	86 e0       	ldi	r24, 0x06	; 6
    31fc:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <LCD_enuSendCommand>
							LCD_enuGoto(2,0);
    3200:	82 e0       	ldi	r24, 0x02	; 2
    3202:	60 e0       	ldi	r22, 0x00	; 0
    3204:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <LCD_enuGoto>
							for(y=0;  y < 15-k+1 ; ++y) LCD_enuSendChar(' ');
    3208:	10 92 7d 02 	sts	0x027D, r1
    320c:	08 c0       	rjmp	.+16     	; 0x321e <main+0x2028>
    320e:	80 e2       	ldi	r24, 0x20	; 32
    3210:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    3214:	80 91 7d 02 	lds	r24, 0x027D
    3218:	8f 5f       	subi	r24, 0xFF	; 255
    321a:	80 93 7d 02 	sts	0x027D, r24
    321e:	80 91 7d 02 	lds	r24, 0x027D
    3222:	48 2f       	mov	r20, r24
    3224:	55 27       	eor	r21, r21
    3226:	47 fd       	sbrc	r20, 7
    3228:	50 95       	com	r21
    322a:	80 91 7c 02 	lds	r24, 0x027C
    322e:	28 2f       	mov	r18, r24
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	80 e1       	ldi	r24, 0x10	; 16
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	82 1b       	sub	r24, r18
    3238:	93 0b       	sbc	r25, r19
    323a:	48 17       	cp	r20, r24
    323c:	59 07       	cpc	r21, r25
    323e:	3c f3       	brlt	.-50     	; 0x320e <main+0x2018>
							LCD_enuGoto(2,15-k+1);
    3240:	90 91 7c 02 	lds	r25, 0x027C
    3244:	80 e1       	ldi	r24, 0x10	; 16
    3246:	28 2f       	mov	r18, r24
    3248:	29 1b       	sub	r18, r25
    324a:	92 2f       	mov	r25, r18
    324c:	82 e0       	ldi	r24, 0x02	; 2
    324e:	69 2f       	mov	r22, r25
    3250:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <LCD_enuGoto>
							LCD_enuWriteNumber(Bin2Dec(Global_u8Arr));
    3254:	8d ec       	ldi	r24, 0xCD	; 205
    3256:	91 e0       	ldi	r25, 0x01	; 1
    3258:	0e 94 2d 2a 	call	0x545a	; 0x545a <Bin2Dec>
    325c:	cc 01       	movw	r24, r24
    325e:	a0 e0       	ldi	r26, 0x00	; 0
    3260:	b0 e0       	ldi	r27, 0x00	; 0
    3262:	bc 01       	movw	r22, r24
    3264:	cd 01       	movw	r24, r26
    3266:	0e 94 65 06 	call	0xcca	; 0xcca <__floatunsisf>
    326a:	dc 01       	movw	r26, r24
    326c:	cb 01       	movw	r24, r22
    326e:	bc 01       	movw	r22, r24
    3270:	cd 01       	movw	r24, r26
    3272:	0e 94 ce 37 	call	0x6f9c	; 0x6f9c <LCD_enuWriteNumber>
							LCD_enuSendCommand(0x04);
    3276:	84 e0       	ldi	r24, 0x04	; 4
    3278:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <LCD_enuSendCommand>
    327c:	e0 cc       	rjmp	.-1600   	; 0x2c3e <main+0x1a48>
						}
						else if(Global_u8PressedKey == 'o')
    327e:	80 91 ef 01 	lds	r24, 0x01EF
    3282:	8f 36       	cpi	r24, 0x6F	; 111
    3284:	71 f5       	brne	.+92     	; 0x32e2 <main+0x20ec>
						{	Global_u16Num = Bin2Dec(Global_u8Arr);
    3286:	8d ec       	ldi	r24, 0xCD	; 205
    3288:	91 e0       	ldi	r25, 0x01	; 1
    328a:	0e 94 2d 2a 	call	0x545a	; 0x545a <Bin2Dec>
    328e:	90 93 cc 01 	sts	0x01CC, r25
    3292:	80 93 cb 01 	sts	0x01CB, r24
							Dec2Hex(Global_u16Num,Global_u8SecArr);
    3296:	80 91 cb 01 	lds	r24, 0x01CB
    329a:	90 91 cc 01 	lds	r25, 0x01CC
    329e:	2e ed       	ldi	r18, 0xDE	; 222
    32a0:	31 e0       	ldi	r19, 0x01	; 1
    32a2:	b9 01       	movw	r22, r18
    32a4:	0e 94 69 28 	call	0x50d2	; 0x50d2 <Dec2Hex>
							LCD_enuGoto(2,15);
    32a8:	82 e0       	ldi	r24, 0x02	; 2
    32aa:	6f e0       	ldi	r22, 0x0F	; 15
    32ac:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <LCD_enuGoto>
							for(y=15; y>=0; --y) LCD_enuSendChar(Global_u8SecArr[y]);
    32b0:	8f e0       	ldi	r24, 0x0F	; 15
    32b2:	80 93 7d 02 	sts	0x027D, r24
    32b6:	10 c0       	rjmp	.+32     	; 0x32d8 <main+0x20e2>
    32b8:	80 91 7d 02 	lds	r24, 0x027D
    32bc:	99 27       	eor	r25, r25
    32be:	87 fd       	sbrc	r24, 7
    32c0:	90 95       	com	r25
    32c2:	fc 01       	movw	r30, r24
    32c4:	e2 52       	subi	r30, 0x22	; 34
    32c6:	fe 4f       	sbci	r31, 0xFE	; 254
    32c8:	80 81       	ld	r24, Z
    32ca:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    32ce:	80 91 7d 02 	lds	r24, 0x027D
    32d2:	81 50       	subi	r24, 0x01	; 1
    32d4:	80 93 7d 02 	sts	0x027D, r24
    32d8:	80 91 7d 02 	lds	r24, 0x027D
    32dc:	88 23       	and	r24, r24
    32de:	64 f7       	brge	.-40     	; 0x32b8 <main+0x20c2>
    32e0:	ae cc       	rjmp	.-1700   	; 0x2c3e <main+0x1a48>
						}
						else if(Global_u8PressedKey == 'z')
    32e2:	80 91 ef 01 	lds	r24, 0x01EF
    32e6:	8a 37       	cpi	r24, 0x7A	; 122
    32e8:	61 f4       	brne	.+24     	; 0x3302 <main+0x210c>
						{
							LCD_enuGoto(2,15);
    32ea:	82 e0       	ldi	r24, 0x02	; 2
    32ec:	6f e0       	ldi	r22, 0x0F	; 15
    32ee:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <LCD_enuGoto>
							LCD_enuSendCommand(0x04);
    32f2:	84 e0       	ldi	r24, 0x04	; 4
    32f4:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <LCD_enuSendCommand>
							LCD_enuDisplayString(Global_u8Arr);
    32f8:	8d ec       	ldi	r24, 0xCD	; 205
    32fa:	91 e0       	ldi	r25, 0x01	; 1
    32fc:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
    3300:	9e cc       	rjmp	.-1732   	; 0x2c3e <main+0x1a48>
						}
						else if(Global_u8PressedKey == 'a')
    3302:	80 91 ef 01 	lds	r24, 0x01EF
    3306:	81 36       	cpi	r24, 0x61	; 97
    3308:	09 f0       	breq	.+2      	; 0x330c <main+0x2116>
    330a:	99 cc       	rjmp	.-1742   	; 0x2c3e <main+0x1a48>
						{
							Global_u16Num = Bin2Dec(Global_u8Arr);
    330c:	8d ec       	ldi	r24, 0xCD	; 205
    330e:	91 e0       	ldi	r25, 0x01	; 1
    3310:	0e 94 2d 2a 	call	0x545a	; 0x545a <Bin2Dec>
    3314:	90 93 cc 01 	sts	0x01CC, r25
    3318:	80 93 cb 01 	sts	0x01CB, r24
							Dec2Oct(Global_u16Num,Global_u8SecArr);
    331c:	80 91 cb 01 	lds	r24, 0x01CB
    3320:	90 91 cc 01 	lds	r25, 0x01CC
    3324:	2e ed       	ldi	r18, 0xDE	; 222
    3326:	31 e0       	ldi	r19, 0x01	; 1
    3328:	b9 01       	movw	r22, r18
    332a:	0e 94 c1 28 	call	0x5182	; 0x5182 <Dec2Oct>
							LCD_enuGoto(2,15);
    332e:	82 e0       	ldi	r24, 0x02	; 2
    3330:	6f e0       	ldi	r22, 0x0F	; 15
    3332:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <LCD_enuGoto>
							for(y=15; y>=0; --y) LCD_enuSendChar(Global_u8SecArr[y]);
    3336:	8f e0       	ldi	r24, 0x0F	; 15
    3338:	80 93 7d 02 	sts	0x027D, r24
    333c:	10 c0       	rjmp	.+32     	; 0x335e <main+0x2168>
    333e:	80 91 7d 02 	lds	r24, 0x027D
    3342:	99 27       	eor	r25, r25
    3344:	87 fd       	sbrc	r24, 7
    3346:	90 95       	com	r25
    3348:	fc 01       	movw	r30, r24
    334a:	e2 52       	subi	r30, 0x22	; 34
    334c:	fe 4f       	sbci	r31, 0xFE	; 254
    334e:	80 81       	ld	r24, Z
    3350:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    3354:	80 91 7d 02 	lds	r24, 0x027D
    3358:	81 50       	subi	r24, 0x01	; 1
    335a:	80 93 7d 02 	sts	0x027D, r24
    335e:	80 91 7d 02 	lds	r24, 0x027D
    3362:	88 23       	and	r24, r24
    3364:	64 f7       	brge	.-40     	; 0x333e <main+0x2148>
    3366:	6b cc       	rjmp	.-1834   	; 0x2c3e <main+0x1a48>
						}
					}
					else if(Get_bit(Global_u16HYP, HEX))
    3368:	80 91 72 02 	lds	r24, 0x0272
    336c:	90 91 73 02 	lds	r25, 0x0273
    3370:	80 74       	andi	r24, 0x40	; 64
    3372:	90 70       	andi	r25, 0x00	; 0
    3374:	00 97       	sbiw	r24, 0x00	; 0
    3376:	09 f4       	brne	.+2      	; 0x337a <main+0x2184>
    3378:	62 cc       	rjmp	.-1852   	; 0x2c3e <main+0x1a48>
					{
						for(y=0 ;y<16;++y)Global_u8SecArr[y]  ='0';
    337a:	10 92 7d 02 	sts	0x027D, r1
    337e:	0f c0       	rjmp	.+30     	; 0x339e <main+0x21a8>
    3380:	80 91 7d 02 	lds	r24, 0x027D
    3384:	99 27       	eor	r25, r25
    3386:	87 fd       	sbrc	r24, 7
    3388:	90 95       	com	r25
    338a:	fc 01       	movw	r30, r24
    338c:	e2 52       	subi	r30, 0x22	; 34
    338e:	fe 4f       	sbci	r31, 0xFE	; 254
    3390:	80 e3       	ldi	r24, 0x30	; 48
    3392:	80 83       	st	Z, r24
    3394:	80 91 7d 02 	lds	r24, 0x027D
    3398:	8f 5f       	subi	r24, 0xFF	; 255
    339a:	80 93 7d 02 	sts	0x027D, r24
    339e:	80 91 7d 02 	lds	r24, 0x027D
    33a2:	80 31       	cpi	r24, 0x10	; 16
    33a4:	6c f3       	brlt	.-38     	; 0x3380 <main+0x218a>
						if(Global_u8PressedKey == 'i')
    33a6:	80 91 ef 01 	lds	r24, 0x01EF
    33aa:	89 36       	cpi	r24, 0x69	; 105
    33ac:	09 f0       	breq	.+2      	; 0x33b0 <main+0x21ba>
    33ae:	65 c0       	rjmp	.+202    	; 0x347a <main+0x2284>
						{
							k=0;
    33b0:	10 92 7c 02 	sts	0x027C, r1
							Global_u16Num = Hex2Dec(Global_u8Arr);
    33b4:	8d ec       	ldi	r24, 0xCD	; 205
    33b6:	91 e0       	ldi	r25, 0x01	; 1
    33b8:	0e 94 33 29 	call	0x5266	; 0x5266 <Hex2Dec>
    33bc:	90 93 cc 01 	sts	0x01CC, r25
    33c0:	80 93 cb 01 	sts	0x01CB, r24
							do {
								Global_u16Num /= 10;
    33c4:	80 91 cb 01 	lds	r24, 0x01CB
    33c8:	90 91 cc 01 	lds	r25, 0x01CC
    33cc:	2a e0       	ldi	r18, 0x0A	; 10
    33ce:	30 e0       	ldi	r19, 0x00	; 0
    33d0:	b9 01       	movw	r22, r18
    33d2:	0e 94 a6 3b 	call	0x774c	; 0x774c <__udivmodhi4>
    33d6:	cb 01       	movw	r24, r22
    33d8:	90 93 cc 01 	sts	0x01CC, r25
    33dc:	80 93 cb 01 	sts	0x01CB, r24
								++k;
    33e0:	80 91 7c 02 	lds	r24, 0x027C
    33e4:	8f 5f       	subi	r24, 0xFF	; 255
    33e6:	80 93 7c 02 	sts	0x027C, r24
							} while (Global_u16Num != 0);
    33ea:	80 91 cb 01 	lds	r24, 0x01CB
    33ee:	90 91 cc 01 	lds	r25, 0x01CC
    33f2:	00 97       	sbiw	r24, 0x00	; 0
    33f4:	39 f7       	brne	.-50     	; 0x33c4 <main+0x21ce>
							LCD_enuSendCommand(0x06);
    33f6:	86 e0       	ldi	r24, 0x06	; 6
    33f8:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <LCD_enuSendCommand>
							LCD_enuGoto(2,0);
    33fc:	82 e0       	ldi	r24, 0x02	; 2
    33fe:	60 e0       	ldi	r22, 0x00	; 0
    3400:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <LCD_enuGoto>
							for(y=0;  y < 15-k+1 ; ++y) LCD_enuSendChar(' ');
    3404:	10 92 7d 02 	sts	0x027D, r1
    3408:	08 c0       	rjmp	.+16     	; 0x341a <main+0x2224>
    340a:	80 e2       	ldi	r24, 0x20	; 32
    340c:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    3410:	80 91 7d 02 	lds	r24, 0x027D
    3414:	8f 5f       	subi	r24, 0xFF	; 255
    3416:	80 93 7d 02 	sts	0x027D, r24
    341a:	80 91 7d 02 	lds	r24, 0x027D
    341e:	48 2f       	mov	r20, r24
    3420:	55 27       	eor	r21, r21
    3422:	47 fd       	sbrc	r20, 7
    3424:	50 95       	com	r21
    3426:	80 91 7c 02 	lds	r24, 0x027C
    342a:	28 2f       	mov	r18, r24
    342c:	30 e0       	ldi	r19, 0x00	; 0
    342e:	80 e1       	ldi	r24, 0x10	; 16
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	82 1b       	sub	r24, r18
    3434:	93 0b       	sbc	r25, r19
    3436:	48 17       	cp	r20, r24
    3438:	59 07       	cpc	r21, r25
    343a:	3c f3       	brlt	.-50     	; 0x340a <main+0x2214>
							LCD_enuGoto(2,15-k+1);
    343c:	90 91 7c 02 	lds	r25, 0x027C
    3440:	80 e1       	ldi	r24, 0x10	; 16
    3442:	38 2f       	mov	r19, r24
    3444:	39 1b       	sub	r19, r25
    3446:	93 2f       	mov	r25, r19
    3448:	82 e0       	ldi	r24, 0x02	; 2
    344a:	69 2f       	mov	r22, r25
    344c:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <LCD_enuGoto>
							LCD_enuWriteNumber(Hex2Dec(Global_u8Arr));
    3450:	8d ec       	ldi	r24, 0xCD	; 205
    3452:	91 e0       	ldi	r25, 0x01	; 1
    3454:	0e 94 33 29 	call	0x5266	; 0x5266 <Hex2Dec>
    3458:	cc 01       	movw	r24, r24
    345a:	a0 e0       	ldi	r26, 0x00	; 0
    345c:	b0 e0       	ldi	r27, 0x00	; 0
    345e:	bc 01       	movw	r22, r24
    3460:	cd 01       	movw	r24, r26
    3462:	0e 94 65 06 	call	0xcca	; 0xcca <__floatunsisf>
    3466:	dc 01       	movw	r26, r24
    3468:	cb 01       	movw	r24, r22
    346a:	bc 01       	movw	r22, r24
    346c:	cd 01       	movw	r24, r26
    346e:	0e 94 ce 37 	call	0x6f9c	; 0x6f9c <LCD_enuWriteNumber>
							LCD_enuSendCommand(0x04);
    3472:	84 e0       	ldi	r24, 0x04	; 4
    3474:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <LCD_enuSendCommand>
    3478:	e2 cb       	rjmp	.-2108   	; 0x2c3e <main+0x1a48>
						}
						else if(Global_u8PressedKey == 'o')
    347a:	80 91 ef 01 	lds	r24, 0x01EF
    347e:	8f 36       	cpi	r24, 0x6F	; 111
    3480:	61 f4       	brne	.+24     	; 0x349a <main+0x22a4>
						{
							LCD_enuGoto(2,15);
    3482:	82 e0       	ldi	r24, 0x02	; 2
    3484:	6f e0       	ldi	r22, 0x0F	; 15
    3486:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <LCD_enuGoto>
							LCD_enuSendCommand(0x04);
    348a:	84 e0       	ldi	r24, 0x04	; 4
    348c:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <LCD_enuSendCommand>
							LCD_enuDisplayString(Global_u8Arr);
    3490:	8d ec       	ldi	r24, 0xCD	; 205
    3492:	91 e0       	ldi	r25, 0x01	; 1
    3494:	0e 94 77 37 	call	0x6eee	; 0x6eee <LCD_enuDisplayString>
    3498:	d2 cb       	rjmp	.-2140   	; 0x2c3e <main+0x1a48>
						}
						else if(Global_u8PressedKey == 'z')
    349a:	80 91 ef 01 	lds	r24, 0x01EF
    349e:	8a 37       	cpi	r24, 0x7A	; 122
    34a0:	71 f5       	brne	.+92     	; 0x34fe <main+0x2308>
						{
							Global_u16Num = Hex2Dec(Global_u8Arr);
    34a2:	8d ec       	ldi	r24, 0xCD	; 205
    34a4:	91 e0       	ldi	r25, 0x01	; 1
    34a6:	0e 94 33 29 	call	0x5266	; 0x5266 <Hex2Dec>
    34aa:	90 93 cc 01 	sts	0x01CC, r25
    34ae:	80 93 cb 01 	sts	0x01CB, r24
							Dec2Bin(Global_u16Num,Global_u8SecArr);
    34b2:	80 91 cb 01 	lds	r24, 0x01CB
    34b6:	90 91 cc 01 	lds	r25, 0x01CC
    34ba:	2e ed       	ldi	r18, 0xDE	; 222
    34bc:	31 e0       	ldi	r19, 0x01	; 1
    34be:	b9 01       	movw	r22, r18
    34c0:	0e 94 fc 28 	call	0x51f8	; 0x51f8 <Dec2Bin>
							LCD_enuGoto(2,15);
    34c4:	82 e0       	ldi	r24, 0x02	; 2
    34c6:	6f e0       	ldi	r22, 0x0F	; 15
    34c8:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <LCD_enuGoto>
							for(y=15; y>=0; --y) LCD_enuSendChar(Global_u8SecArr[y]);
    34cc:	8f e0       	ldi	r24, 0x0F	; 15
    34ce:	80 93 7d 02 	sts	0x027D, r24
    34d2:	10 c0       	rjmp	.+32     	; 0x34f4 <main+0x22fe>
    34d4:	80 91 7d 02 	lds	r24, 0x027D
    34d8:	99 27       	eor	r25, r25
    34da:	87 fd       	sbrc	r24, 7
    34dc:	90 95       	com	r25
    34de:	fc 01       	movw	r30, r24
    34e0:	e2 52       	subi	r30, 0x22	; 34
    34e2:	fe 4f       	sbci	r31, 0xFE	; 254
    34e4:	80 81       	ld	r24, Z
    34e6:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    34ea:	80 91 7d 02 	lds	r24, 0x027D
    34ee:	81 50       	subi	r24, 0x01	; 1
    34f0:	80 93 7d 02 	sts	0x027D, r24
    34f4:	80 91 7d 02 	lds	r24, 0x027D
    34f8:	88 23       	and	r24, r24
    34fa:	64 f7       	brge	.-40     	; 0x34d4 <main+0x22de>
    34fc:	a0 cb       	rjmp	.-2240   	; 0x2c3e <main+0x1a48>
						}
						else if(Global_u8PressedKey == 'a')
    34fe:	80 91 ef 01 	lds	r24, 0x01EF
    3502:	81 36       	cpi	r24, 0x61	; 97
    3504:	09 f0       	breq	.+2      	; 0x3508 <main+0x2312>
    3506:	9b cb       	rjmp	.-2250   	; 0x2c3e <main+0x1a48>
						{
							Global_u16Num = Hex2Dec(Global_u8Arr);
    3508:	8d ec       	ldi	r24, 0xCD	; 205
    350a:	91 e0       	ldi	r25, 0x01	; 1
    350c:	0e 94 33 29 	call	0x5266	; 0x5266 <Hex2Dec>
    3510:	90 93 cc 01 	sts	0x01CC, r25
    3514:	80 93 cb 01 	sts	0x01CB, r24
							Dec2Oct(Global_u16Num,Global_u8SecArr);
    3518:	80 91 cb 01 	lds	r24, 0x01CB
    351c:	90 91 cc 01 	lds	r25, 0x01CC
    3520:	2e ed       	ldi	r18, 0xDE	; 222
    3522:	31 e0       	ldi	r19, 0x01	; 1
    3524:	b9 01       	movw	r22, r18
    3526:	0e 94 c1 28 	call	0x5182	; 0x5182 <Dec2Oct>
							LCD_enuGoto(2,15);
    352a:	82 e0       	ldi	r24, 0x02	; 2
    352c:	6f e0       	ldi	r22, 0x0F	; 15
    352e:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <LCD_enuGoto>
							for(y=15; y>=0; --y) LCD_enuSendChar(Global_u8SecArr[y]);
    3532:	8f e0       	ldi	r24, 0x0F	; 15
    3534:	80 93 7d 02 	sts	0x027D, r24
    3538:	10 c0       	rjmp	.+32     	; 0x355a <main+0x2364>
    353a:	80 91 7d 02 	lds	r24, 0x027D
    353e:	99 27       	eor	r25, r25
    3540:	87 fd       	sbrc	r24, 7
    3542:	90 95       	com	r25
    3544:	fc 01       	movw	r30, r24
    3546:	e2 52       	subi	r30, 0x22	; 34
    3548:	fe 4f       	sbci	r31, 0xFE	; 254
    354a:	80 81       	ld	r24, Z
    354c:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    3550:	80 91 7d 02 	lds	r24, 0x027D
    3554:	81 50       	subi	r24, 0x01	; 1
    3556:	80 93 7d 02 	sts	0x027D, r24
    355a:	80 91 7d 02 	lds	r24, 0x027D
    355e:	88 23       	and	r24, r24
    3560:	64 f7       	brge	.-40     	; 0x353a <main+0x2344>
    3562:	6d cb       	rjmp	.-2342   	; 0x2c3e <main+0x1a48>

				}

			}
		}
		else if(Global_u8PressedKey == 'q') // shift right
    3564:	80 91 ef 01 	lds	r24, 0x01EF
    3568:	81 37       	cpi	r24, 0x71	; 113
    356a:	51 f4       	brne	.+20     	; 0x3580 <main+0x238a>
		{
			LCD_enuSendCommand(0x18);
    356c:	88 e1       	ldi	r24, 0x18	; 24
    356e:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <LCD_enuSendCommand>
			Global_u8ShiftCnt++;
    3572:	80 91 78 02 	lds	r24, 0x0278
    3576:	8f 5f       	subi	r24, 0xFF	; 255
    3578:	80 93 78 02 	sts	0x0278, r24
    357c:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <main+0x1e>
		}
		else if(Global_u8PressedKey == 'x') // shift left
    3580:	80 91 ef 01 	lds	r24, 0x01EF
    3584:	88 37       	cpi	r24, 0x78	; 120
    3586:	51 f4       	brne	.+20     	; 0x359c <main+0x23a6>
		{
			LCD_enuSendCommand(0x1c);
    3588:	8c e1       	ldi	r24, 0x1C	; 28
    358a:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <LCD_enuSendCommand>
			Global_u8ShiftCnt--;
    358e:	80 91 78 02 	lds	r24, 0x0278
    3592:	81 50       	subi	r24, 0x01	; 1
    3594:	80 93 78 02 	sts	0x0278, r24
    3598:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <main+0x1e>
		}
		else if(Global_u8PressedKey == 'b') // Redian mode
    359c:	80 91 ef 01 	lds	r24, 0x01EF
    35a0:	82 36       	cpi	r24, 0x62	; 98
    35a2:	71 f4       	brne	.+28     	; 0x35c0 <main+0x23ca>
		{
			Global_f32mode=(M_PI)/(180.0);
    35a4:	85 e3       	ldi	r24, 0x35	; 53
    35a6:	9a ef       	ldi	r25, 0xFA	; 250
    35a8:	ae e8       	ldi	r26, 0x8E	; 142
    35aa:	bc e3       	ldi	r27, 0x3C	; 60
    35ac:	80 93 f3 01 	sts	0x01F3, r24
    35b0:	90 93 f4 01 	sts	0x01F4, r25
    35b4:	a0 93 f5 01 	sts	0x01F5, r26
    35b8:	b0 93 f6 01 	sts	0x01F6, r27
    35bc:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <main+0x1e>
		}
		else if(Global_u8PressedKey == 'r') // Degree mode
    35c0:	80 91 ef 01 	lds	r24, 0x01EF
    35c4:	82 37       	cpi	r24, 0x72	; 114
    35c6:	71 f4       	brne	.+28     	; 0x35e4 <main+0x23ee>
		{
			Global_f32mode=1;
    35c8:	80 e0       	ldi	r24, 0x00	; 0
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	a0 e8       	ldi	r26, 0x80	; 128
    35ce:	bf e3       	ldi	r27, 0x3F	; 63
    35d0:	80 93 f3 01 	sts	0x01F3, r24
    35d4:	90 93 f4 01 	sts	0x01F4, r25
    35d8:	a0 93 f5 01 	sts	0x01F5, r26
    35dc:	b0 93 f6 01 	sts	0x01F6, r27
    35e0:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <main+0x1e>
		}
		else							   // Handling all operations
		{

			if(Global_u8Shift>16)
    35e4:	80 91 79 02 	lds	r24, 0x0279
    35e8:	81 31       	cpi	r24, 0x11	; 17
    35ea:	f8 f0       	brcs	.+62     	; 0x362a <main+0x2434>
			{
				for(k=0;k<(Global_u8Shift-16); ++k)
    35ec:	10 92 7c 02 	sts	0x027C, r1
    35f0:	0d c0       	rjmp	.+26     	; 0x360c <main+0x2416>
				{
					LCD_enuSendCommand(0x18);
    35f2:	88 e1       	ldi	r24, 0x18	; 24
    35f4:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <LCD_enuSendCommand>
					Global_u8ShiftCnt++;
    35f8:	80 91 78 02 	lds	r24, 0x0278
    35fc:	8f 5f       	subi	r24, 0xFF	; 255
    35fe:	80 93 78 02 	sts	0x0278, r24
		else							   // Handling all operations
		{

			if(Global_u8Shift>16)
			{
				for(k=0;k<(Global_u8Shift-16); ++k)
    3602:	80 91 7c 02 	lds	r24, 0x027C
    3606:	8f 5f       	subi	r24, 0xFF	; 255
    3608:	80 93 7c 02 	sts	0x027C, r24
    360c:	80 91 7c 02 	lds	r24, 0x027C
    3610:	28 2f       	mov	r18, r24
    3612:	30 e0       	ldi	r19, 0x00	; 0
    3614:	80 91 79 02 	lds	r24, 0x0279
    3618:	88 2f       	mov	r24, r24
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	40 97       	sbiw	r24, 0x10	; 16
    361e:	28 17       	cp	r18, r24
    3620:	39 07       	cpc	r19, r25
    3622:	3c f3       	brlt	.-50     	; 0x35f2 <main+0x23fc>
				{
					LCD_enuSendCommand(0x18);
					Global_u8ShiftCnt++;
				}
				Global_u8Shift=16;
    3624:	80 e1       	ldi	r24, 0x10	; 16
    3626:	80 93 79 02 	sts	0x0279, r24
			}

			Global_u8Shift++;
    362a:	80 91 79 02 	lds	r24, 0x0279
    362e:	8f 5f       	subi	r24, 0xFF	; 255
    3630:	80 93 79 02 	sts	0x0279, r24
			Clr_bit(Global_u16FLAGS,dot);
    3634:	80 91 f1 01 	lds	r24, 0x01F1
    3638:	90 91 f2 01 	lds	r25, 0x01F2
    363c:	9d 7f       	andi	r25, 0xFD	; 253
    363e:	90 93 f2 01 	sts	0x01F2, r25
    3642:	80 93 f1 01 	sts	0x01F1, r24
			Clr_bit(Global_u16FLAGS,negative);
    3646:	80 91 f1 01 	lds	r24, 0x01F1
    364a:	90 91 f2 01 	lds	r25, 0x01F2
    364e:	8e 7f       	andi	r24, 0xFE	; 254
    3650:	90 93 f2 01 	sts	0x01F2, r25
    3654:	80 93 f1 01 	sts	0x01F1, r24
			Global_u8Cnt=1;
    3658:	81 e0       	ldi	r24, 0x01	; 1
    365a:	80 93 f0 01 	sts	0x01F0, r24

			if(     Global_u8PressedKey == 't' || Global_u8PressedKey == 'C' || Global_u8PressedKey == 's' ||
    365e:	80 91 ef 01 	lds	r24, 0x01EF
    3662:	84 37       	cpi	r24, 0x74	; 116
    3664:	49 f1       	breq	.+82     	; 0x36b8 <main+0x24c2>
    3666:	80 91 ef 01 	lds	r24, 0x01EF
    366a:	83 34       	cpi	r24, 0x43	; 67
    366c:	29 f1       	breq	.+74     	; 0x36b8 <main+0x24c2>
    366e:	80 91 ef 01 	lds	r24, 0x01EF
    3672:	83 37       	cpi	r24, 0x73	; 115
    3674:	09 f1       	breq	.+66     	; 0x36b8 <main+0x24c2>
    3676:	80 91 ef 01 	lds	r24, 0x01EF
    367a:	81 32       	cpi	r24, 0x21	; 33
    367c:	e9 f0       	breq	.+58     	; 0x36b8 <main+0x24c2>
    367e:	80 91 ef 01 	lds	r24, 0x01EF
    3682:	8e 35       	cpi	r24, 0x5E	; 94
    3684:	c9 f0       	breq	.+50     	; 0x36b8 <main+0x24c2>
    3686:	80 91 ef 01 	lds	r24, 0x01EF
    368a:	86 37       	cpi	r24, 0x76	; 118
    368c:	a9 f0       	breq	.+42     	; 0x36b8 <main+0x24c2>
    368e:	80 91 ef 01 	lds	r24, 0x01EF
    3692:	89 37       	cpi	r24, 0x79	; 121
    3694:	89 f0       	breq	.+34     	; 0x36b8 <main+0x24c2>
    3696:	80 91 ef 01 	lds	r24, 0x01EF
    369a:	8b 35       	cpi	r24, 0x5B	; 91
    369c:	69 f0       	breq	.+26     	; 0x36b8 <main+0x24c2>
    369e:	80 91 ef 01 	lds	r24, 0x01EF
    36a2:	87 37       	cpi	r24, 0x77	; 119
    36a4:	49 f0       	breq	.+18     	; 0x36b8 <main+0x24c2>
    36a6:	80 91 ef 01 	lds	r24, 0x01EF
    36aa:	85 37       	cpi	r24, 0x75	; 117
    36ac:	29 f0       	breq	.+10     	; 0x36b8 <main+0x24c2>
    36ae:	80 91 ef 01 	lds	r24, 0x01EF
    36b2:	80 37       	cpi	r24, 0x70	; 112
    36b4:	09 f0       	breq	.+2      	; 0x36b8 <main+0x24c2>
    36b6:	ca c0       	rjmp	.+404    	; 0x384c <main+0x2656>
					Global_u8PressedKey == '!' || Global_u8PressedKey == '^' || Global_u8PressedKey == 'v' ||
					Global_u8PressedKey == 'y' || Global_u8PressedKey == '[' || Global_u8PressedKey == 'w' ||
					Global_u8PressedKey == 'u' || Global_u8PressedKey == 'p')
			{
				switch (Global_u8PressedKey)
    36b8:	80 91 ef 01 	lds	r24, 0x01EF
    36bc:	28 2f       	mov	r18, r24
    36be:	30 e0       	ldi	r19, 0x00	; 0
    36c0:	3a 83       	std	Y+2, r19	; 0x02
    36c2:	29 83       	std	Y+1, r18	; 0x01
    36c4:	89 81       	ldd	r24, Y+1	; 0x01
    36c6:	9a 81       	ldd	r25, Y+2	; 0x02
    36c8:	84 37       	cpi	r24, 0x74	; 116
    36ca:	91 05       	cpc	r25, r1
    36cc:	09 f4       	brne	.+2      	; 0x36d0 <main+0x24da>
    36ce:	46 c0       	rjmp	.+140    	; 0x375c <main+0x2566>
    36d0:	29 81       	ldd	r18, Y+1	; 0x01
    36d2:	3a 81       	ldd	r19, Y+2	; 0x02
    36d4:	25 37       	cpi	r18, 0x75	; 117
    36d6:	31 05       	cpc	r19, r1
    36d8:	4c f5       	brge	.+82     	; 0x372c <main+0x2536>
    36da:	89 81       	ldd	r24, Y+1	; 0x01
    36dc:	9a 81       	ldd	r25, Y+2	; 0x02
    36de:	8e 35       	cpi	r24, 0x5E	; 94
    36e0:	91 05       	cpc	r25, r1
    36e2:	09 f4       	brne	.+2      	; 0x36e6 <main+0x24f0>
    36e4:	63 c0       	rjmp	.+198    	; 0x37ac <main+0x25b6>
    36e6:	29 81       	ldd	r18, Y+1	; 0x01
    36e8:	3a 81       	ldd	r19, Y+2	; 0x02
    36ea:	2f 35       	cpi	r18, 0x5F	; 95
    36ec:	31 05       	cpc	r19, r1
    36ee:	94 f4       	brge	.+36     	; 0x3714 <main+0x251e>
    36f0:	89 81       	ldd	r24, Y+1	; 0x01
    36f2:	9a 81       	ldd	r25, Y+2	; 0x02
    36f4:	83 34       	cpi	r24, 0x43	; 67
    36f6:	91 05       	cpc	r25, r1
    36f8:	d9 f1       	breq	.+118    	; 0x3770 <main+0x257a>
    36fa:	29 81       	ldd	r18, Y+1	; 0x01
    36fc:	3a 81       	ldd	r19, Y+2	; 0x02
    36fe:	2b 35       	cpi	r18, 0x5B	; 91
    3700:	31 05       	cpc	r19, r1
    3702:	09 f4       	brne	.+2      	; 0x3706 <main+0x2510>
    3704:	71 c0       	rjmp	.+226    	; 0x37e8 <main+0x25f2>
    3706:	89 81       	ldd	r24, Y+1	; 0x01
    3708:	9a 81       	ldd	r25, Y+2	; 0x02
    370a:	81 32       	cpi	r24, 0x21	; 33
    370c:	91 05       	cpc	r25, r1
    370e:	09 f4       	brne	.+2      	; 0x3712 <main+0x251c>
    3710:	43 c0       	rjmp	.+134    	; 0x3798 <main+0x25a2>
    3712:	91 c0       	rjmp	.+290    	; 0x3836 <main+0x2640>
    3714:	29 81       	ldd	r18, Y+1	; 0x01
    3716:	3a 81       	ldd	r19, Y+2	; 0x02
    3718:	20 37       	cpi	r18, 0x70	; 112
    371a:	31 05       	cpc	r19, r1
    371c:	09 f4       	brne	.+2      	; 0x3720 <main+0x252a>
    371e:	82 c0       	rjmp	.+260    	; 0x3824 <main+0x262e>
    3720:	89 81       	ldd	r24, Y+1	; 0x01
    3722:	9a 81       	ldd	r25, Y+2	; 0x02
    3724:	83 37       	cpi	r24, 0x73	; 115
    3726:	91 05       	cpc	r25, r1
    3728:	69 f1       	breq	.+90     	; 0x3784 <main+0x258e>
    372a:	85 c0       	rjmp	.+266    	; 0x3836 <main+0x2640>
    372c:	29 81       	ldd	r18, Y+1	; 0x01
    372e:	3a 81       	ldd	r19, Y+2	; 0x02
    3730:	26 37       	cpi	r18, 0x76	; 118
    3732:	31 05       	cpc	r19, r1
    3734:	09 f4       	brne	.+2      	; 0x3738 <main+0x2542>
    3736:	44 c0       	rjmp	.+136    	; 0x37c0 <main+0x25ca>
    3738:	89 81       	ldd	r24, Y+1	; 0x01
    373a:	9a 81       	ldd	r25, Y+2	; 0x02
    373c:	86 37       	cpi	r24, 0x76	; 118
    373e:	91 05       	cpc	r25, r1
    3740:	0c f4       	brge	.+2      	; 0x3744 <main+0x254e>
    3742:	66 c0       	rjmp	.+204    	; 0x3810 <main+0x261a>
    3744:	29 81       	ldd	r18, Y+1	; 0x01
    3746:	3a 81       	ldd	r19, Y+2	; 0x02
    3748:	27 37       	cpi	r18, 0x77	; 119
    374a:	31 05       	cpc	r19, r1
    374c:	09 f4       	brne	.+2      	; 0x3750 <main+0x255a>
    374e:	56 c0       	rjmp	.+172    	; 0x37fc <main+0x2606>
    3750:	89 81       	ldd	r24, Y+1	; 0x01
    3752:	9a 81       	ldd	r25, Y+2	; 0x02
    3754:	89 37       	cpi	r24, 0x79	; 121
    3756:	91 05       	cpc	r25, r1
    3758:	e9 f1       	breq	.+122    	; 0x37d4 <main+0x25de>
    375a:	6d c0       	rjmp	.+218    	; 0x3836 <main+0x2640>
				{
				case 't':	Set_bit(Global_u16FLAGS, Tan);
    375c:	80 91 f1 01 	lds	r24, 0x01F1
    3760:	90 91 f2 01 	lds	r25, 0x01F2
    3764:	91 60       	ori	r25, 0x01	; 1
    3766:	90 93 f2 01 	sts	0x01F2, r25
    376a:	80 93 f1 01 	sts	0x01F1, r24
    376e:	63 c0       	rjmp	.+198    	; 0x3836 <main+0x2640>
				break;
				case 'C':	Set_bit(Global_u16FLAGS, Cos);
    3770:	80 91 f1 01 	lds	r24, 0x01F1
    3774:	90 91 f2 01 	lds	r25, 0x01F2
    3778:	80 68       	ori	r24, 0x80	; 128
    377a:	90 93 f2 01 	sts	0x01F2, r25
    377e:	80 93 f1 01 	sts	0x01F1, r24
    3782:	59 c0       	rjmp	.+178    	; 0x3836 <main+0x2640>
				break;
				case 's':	Set_bit(Global_u16FLAGS, Sin);
    3784:	80 91 f1 01 	lds	r24, 0x01F1
    3788:	90 91 f2 01 	lds	r25, 0x01F2
    378c:	80 64       	ori	r24, 0x40	; 64
    378e:	90 93 f2 01 	sts	0x01F2, r25
    3792:	80 93 f1 01 	sts	0x01F1, r24
    3796:	4f c0       	rjmp	.+158    	; 0x3836 <main+0x2640>
				break;
				case '!':	Set_bit(Global_u16FLAGS, Sqrt);
    3798:	80 91 f1 01 	lds	r24, 0x01F1
    379c:	90 91 f2 01 	lds	r25, 0x01F2
    37a0:	80 62       	ori	r24, 0x20	; 32
    37a2:	90 93 f2 01 	sts	0x01F2, r25
    37a6:	80 93 f1 01 	sts	0x01F1, r24
    37aa:	45 c0       	rjmp	.+138    	; 0x3836 <main+0x2640>
				break;
				case '^':	Set_bit(Global_u16FLAGS, Exp);
    37ac:	80 91 f1 01 	lds	r24, 0x01F1
    37b0:	90 91 f2 01 	lds	r25, 0x01F2
    37b4:	94 60       	ori	r25, 0x04	; 4
    37b6:	90 93 f2 01 	sts	0x01F2, r25
    37ba:	80 93 f1 01 	sts	0x01F1, r24
    37be:	3b c0       	rjmp	.+118    	; 0x3836 <main+0x2640>
				break;
				case 'v':   Set_bit(Global_u16HYP, Atan);
    37c0:	80 91 72 02 	lds	r24, 0x0272
    37c4:	90 91 73 02 	lds	r25, 0x0273
    37c8:	80 62       	ori	r24, 0x20	; 32
    37ca:	90 93 73 02 	sts	0x0273, r25
    37ce:	80 93 72 02 	sts	0x0272, r24
    37d2:	31 c0       	rjmp	.+98     	; 0x3836 <main+0x2640>
				break;
				case 'y':   Set_bit(Global_u16HYP, Asin);
    37d4:	80 91 72 02 	lds	r24, 0x0272
    37d8:	90 91 73 02 	lds	r25, 0x0273
    37dc:	88 60       	ori	r24, 0x08	; 8
    37de:	90 93 73 02 	sts	0x0273, r25
    37e2:	80 93 72 02 	sts	0x0272, r24
    37e6:	27 c0       	rjmp	.+78     	; 0x3836 <main+0x2640>
				break;
				case '[':   Set_bit(Global_u16HYP, Acos);
    37e8:	80 91 72 02 	lds	r24, 0x0272
    37ec:	90 91 73 02 	lds	r25, 0x0273
    37f0:	80 61       	ori	r24, 0x10	; 16
    37f2:	90 93 73 02 	sts	0x0273, r25
    37f6:	80 93 72 02 	sts	0x0272, r24
    37fa:	1d c0       	rjmp	.+58     	; 0x3836 <main+0x2640>
				break;
				case 'w':   Set_bit(Global_u16HYP, Sinh);
    37fc:	80 91 72 02 	lds	r24, 0x0272
    3800:	90 91 73 02 	lds	r25, 0x0273
    3804:	81 60       	ori	r24, 0x01	; 1
    3806:	90 93 73 02 	sts	0x0273, r25
    380a:	80 93 72 02 	sts	0x0272, r24
    380e:	13 c0       	rjmp	.+38     	; 0x3836 <main+0x2640>
				break;
				case 'u':   Set_bit(Global_u16HYP, Cosh);
    3810:	80 91 72 02 	lds	r24, 0x0272
    3814:	90 91 73 02 	lds	r25, 0x0273
    3818:	82 60       	ori	r24, 0x02	; 2
    381a:	90 93 73 02 	sts	0x0273, r25
    381e:	80 93 72 02 	sts	0x0272, r24
    3822:	09 c0       	rjmp	.+18     	; 0x3836 <main+0x2640>
				break;
				case 'p':   Set_bit(Global_u16HYP, Tanh);
    3824:	80 91 72 02 	lds	r24, 0x0272
    3828:	90 91 73 02 	lds	r25, 0x0273
    382c:	84 60       	ori	r24, 0x04	; 4
    382e:	90 93 73 02 	sts	0x0273, r25
    3832:	80 93 72 02 	sts	0x0272, r24
				break;
				}
				Set_bit(Global_u16FLAGS,last_is_tri);
    3836:	80 91 f1 01 	lds	r24, 0x01F1
    383a:	90 91 f2 01 	lds	r25, 0x01F2
    383e:	98 60       	ori	r25, 0x08	; 8
    3840:	90 93 f2 01 	sts	0x01F2, r25
    3844:	80 93 f1 01 	sts	0x01F1, r24
    3848:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <main+0x1e>
				continue;
			}

			if(Get_bit(Global_u16FLAGS,first) && Global_u8PressedKey != '+' && Global_u8PressedKey != '-' )
    384c:	80 91 f1 01 	lds	r24, 0x01F1
    3850:	90 91 f2 01 	lds	r25, 0x01F2
    3854:	82 70       	andi	r24, 0x02	; 2
    3856:	90 70       	andi	r25, 0x00	; 0
    3858:	00 97       	sbiw	r24, 0x00	; 0
    385a:	c9 f0       	breq	.+50     	; 0x388e <main+0x2698>
    385c:	80 91 ef 01 	lds	r24, 0x01EF
    3860:	8b 32       	cpi	r24, 0x2B	; 43
    3862:	a9 f0       	breq	.+42     	; 0x388e <main+0x2698>
    3864:	80 91 ef 01 	lds	r24, 0x01EF
    3868:	8d 32       	cpi	r24, 0x2D	; 45
    386a:	89 f0       	breq	.+34     	; 0x388e <main+0x2698>
			{
				if(Global_u8PressedKey != ';')
    386c:	80 91 ef 01 	lds	r24, 0x01EF
    3870:	8b 33       	cpi	r24, 0x3B	; 59
    3872:	21 f0       	breq	.+8      	; 0x387c <main+0x2686>
				LCD_enuSendChar(Global_u8PressedKey);
    3874:	80 91 ef 01 	lds	r24, 0x01EF
    3878:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
				Set_bit(Global_u16FLAGS,first_is_op);
    387c:	80 91 f1 01 	lds	r24, 0x01F1
    3880:	90 91 f2 01 	lds	r25, 0x01F2
    3884:	80 61       	ori	r24, 0x10	; 16
    3886:	90 93 f2 01 	sts	0x01F2, r25
    388a:	80 93 f1 01 	sts	0x01F1, r24
			}
			Clr_bit(Global_u16FLAGS,first);
    388e:	80 91 f1 01 	lds	r24, 0x01F1
    3892:	90 91 f2 01 	lds	r25, 0x01F2
    3896:	8d 7f       	andi	r24, 0xFD	; 253
    3898:	90 93 f2 01 	sts	0x01F2, r25
    389c:	80 93 f1 01 	sts	0x01F1, r24

			if(Get_bit(Global_u16FLAGS,last_is_tri) && (Global_u8PressedKey == '*' || Global_u8PressedKey == '/'|| Global_u8PressedKey == ';') )
    38a0:	80 91 f1 01 	lds	r24, 0x01F1
    38a4:	90 91 f2 01 	lds	r25, 0x01F2
    38a8:	80 70       	andi	r24, 0x00	; 0
    38aa:	98 70       	andi	r25, 0x08	; 8
    38ac:	00 97       	sbiw	r24, 0x00	; 0
    38ae:	a9 f0       	breq	.+42     	; 0x38da <main+0x26e4>
    38b0:	80 91 ef 01 	lds	r24, 0x01EF
    38b4:	8a 32       	cpi	r24, 0x2A	; 42
    38b6:	41 f0       	breq	.+16     	; 0x38c8 <main+0x26d2>
    38b8:	80 91 ef 01 	lds	r24, 0x01EF
    38bc:	8f 32       	cpi	r24, 0x2F	; 47
    38be:	21 f0       	breq	.+8      	; 0x38c8 <main+0x26d2>
    38c0:	80 91 ef 01 	lds	r24, 0x01EF
    38c4:	8b 33       	cpi	r24, 0x3B	; 59
    38c6:	49 f4       	brne	.+18     	; 0x38da <main+0x26e4>
			{
				Set_bit(Global_u16FLAGS,error);
    38c8:	80 91 f1 01 	lds	r24, 0x01F1
    38cc:	90 91 f2 01 	lds	r25, 0x01F2
    38d0:	84 60       	ori	r24, 0x04	; 4
    38d2:	90 93 f2 01 	sts	0x01F2, r25
    38d6:	80 93 f1 01 	sts	0x01F1, r24
			}

			if(!Get_bit(Global_u16FLAGS,last_is_num))
    38da:	80 91 f1 01 	lds	r24, 0x01F1
    38de:	90 91 f2 01 	lds	r25, 0x01F2
    38e2:	88 70       	andi	r24, 0x08	; 8
    38e4:	90 70       	andi	r25, 0x00	; 0
    38e6:	00 97       	sbiw	r24, 0x00	; 0
    38e8:	71 f5       	brne	.+92     	; 0x3946 <main+0x2750>
			{

				if(Global_u8PressedKey == '-'){
    38ea:	80 91 ef 01 	lds	r24, 0x01EF
    38ee:	8d 32       	cpi	r24, 0x2D	; 45
    38f0:	71 f4       	brne	.+28     	; 0x390e <main+0x2718>
					Set_bit(Global_u16FLAGS, negative);
    38f2:	80 91 f1 01 	lds	r24, 0x01F1
    38f6:	90 91 f2 01 	lds	r25, 0x01F2
    38fa:	81 60       	ori	r24, 0x01	; 1
    38fc:	90 93 f2 01 	sts	0x01F2, r25
    3900:	80 93 f1 01 	sts	0x01F1, r24
					LCD_enuSendChar('-');
    3904:	8d e2       	ldi	r24, 0x2D	; 45
    3906:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    390a:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <main+0x1e>
					continue;
				}
				else if(Global_u8PressedKey == '*' || Global_u8PressedKey == '/')
    390e:	80 91 ef 01 	lds	r24, 0x01EF
    3912:	8a 32       	cpi	r24, 0x2A	; 42
    3914:	21 f0       	breq	.+8      	; 0x391e <main+0x2728>
    3916:	80 91 ef 01 	lds	r24, 0x01EF
    391a:	8f 32       	cpi	r24, 0x2F	; 47
    391c:	59 f4       	brne	.+22     	; 0x3934 <main+0x273e>
				{
					Set_bit(Global_u16FLAGS, error);
    391e:	80 91 f1 01 	lds	r24, 0x01F1
    3922:	90 91 f2 01 	lds	r25, 0x01F2
    3926:	84 60       	ori	r24, 0x04	; 4
    3928:	90 93 f2 01 	sts	0x01F2, r25
    392c:	80 93 f1 01 	sts	0x01F1, r24
    3930:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <main+0x1e>
					continue;
				}
				else if(Global_u8PressedKey == '+')
    3934:	80 91 ef 01 	lds	r24, 0x01EF
    3938:	8b 32       	cpi	r24, 0x2B	; 43
    393a:	29 f4       	brne	.+10     	; 0x3946 <main+0x2750>
				{
					LCD_enuSendChar('+');
    393c:	8b e2       	ldi	r24, 0x2B	; 43
    393e:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    3942:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <main+0x1e>
					continue;
				}
			}

			if(Get_bit(Global_u16FLAGS,Sin))
    3946:	80 91 f1 01 	lds	r24, 0x01F1
    394a:	90 91 f2 01 	lds	r25, 0x01F2
    394e:	80 74       	andi	r24, 0x40	; 64
    3950:	90 70       	andi	r25, 0x00	; 0
    3952:	00 97       	sbiw	r24, 0x00	; 0
    3954:	09 f4       	brne	.+2      	; 0x3958 <main+0x2762>
    3956:	46 c0       	rjmp	.+140    	; 0x39e4 <main+0x27ee>
			{
				Global_Af32Operands[Local_u8It1] = _sin(Global_f32Num*(M_PI/180.0)*(1/Global_f32mode));
    3958:	80 91 6c 02 	lds	r24, 0x026C
    395c:	c8 2e       	mov	r12, r24
    395e:	dd 24       	eor	r13, r13
    3960:	80 91 6e 02 	lds	r24, 0x026E
    3964:	90 91 6f 02 	lds	r25, 0x026F
    3968:	a0 91 70 02 	lds	r26, 0x0270
    396c:	b0 91 71 02 	lds	r27, 0x0271
    3970:	bc 01       	movw	r22, r24
    3972:	cd 01       	movw	r24, r26
    3974:	25 e3       	ldi	r18, 0x35	; 53
    3976:	3a ef       	ldi	r19, 0xFA	; 250
    3978:	4e e8       	ldi	r20, 0x8E	; 142
    397a:	5c e3       	ldi	r21, 0x3C	; 60
    397c:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3980:	dc 01       	movw	r26, r24
    3982:	cb 01       	movw	r24, r22
    3984:	7c 01       	movw	r14, r24
    3986:	8d 01       	movw	r16, r26
    3988:	20 91 f3 01 	lds	r18, 0x01F3
    398c:	30 91 f4 01 	lds	r19, 0x01F4
    3990:	40 91 f5 01 	lds	r20, 0x01F5
    3994:	50 91 f6 01 	lds	r21, 0x01F6
    3998:	60 e0       	ldi	r22, 0x00	; 0
    399a:	70 e0       	ldi	r23, 0x00	; 0
    399c:	80 e8       	ldi	r24, 0x80	; 128
    399e:	9f e3       	ldi	r25, 0x3F	; 63
    39a0:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    39a4:	dc 01       	movw	r26, r24
    39a6:	cb 01       	movw	r24, r22
    39a8:	9c 01       	movw	r18, r24
    39aa:	ad 01       	movw	r20, r26
    39ac:	c8 01       	movw	r24, r16
    39ae:	b7 01       	movw	r22, r14
    39b0:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    39b4:	dc 01       	movw	r26, r24
    39b6:	cb 01       	movw	r24, r22
    39b8:	bc 01       	movw	r22, r24
    39ba:	cd 01       	movw	r24, r26
    39bc:	0e 94 3c 23 	call	0x4678	; 0x4678 <_sin>
    39c0:	9b 01       	movw	r18, r22
    39c2:	ac 01       	movw	r20, r24
    39c4:	c6 01       	movw	r24, r12
    39c6:	88 0f       	add	r24, r24
    39c8:	99 1f       	adc	r25, r25
    39ca:	88 0f       	add	r24, r24
    39cc:	99 1f       	adc	r25, r25
    39ce:	fc 01       	movw	r30, r24
    39d0:	ec 5b       	subi	r30, 0xBC	; 188
    39d2:	fd 4f       	sbci	r31, 0xFD	; 253
    39d4:	20 83       	st	Z, r18
    39d6:	31 83       	std	Z+1, r19	; 0x01
    39d8:	42 83       	std	Z+2, r20	; 0x02
    39da:	53 83       	std	Z+3, r21	; 0x03
				LCD_enuSendChar(')');
    39dc:	89 e2       	ldi	r24, 0x29	; 41
    39de:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    39e2:	fb c2       	rjmp	.+1526   	; 0x3fda <main+0x2de4>
			}
			else if(Get_bit(Global_u16FLAGS,Cos ))
    39e4:	80 91 f1 01 	lds	r24, 0x01F1
    39e8:	90 91 f2 01 	lds	r25, 0x01F2
    39ec:	80 78       	andi	r24, 0x80	; 128
    39ee:	90 70       	andi	r25, 0x00	; 0
    39f0:	00 97       	sbiw	r24, 0x00	; 0
    39f2:	09 f4       	brne	.+2      	; 0x39f6 <main+0x2800>
    39f4:	46 c0       	rjmp	.+140    	; 0x3a82 <main+0x288c>
			{
				Global_Af32Operands[Local_u8It1] = _cos(Global_f32Num*(M_PI/180.0)*(1/Global_f32mode));
    39f6:	80 91 6c 02 	lds	r24, 0x026C
    39fa:	c8 2e       	mov	r12, r24
    39fc:	dd 24       	eor	r13, r13
    39fe:	80 91 6e 02 	lds	r24, 0x026E
    3a02:	90 91 6f 02 	lds	r25, 0x026F
    3a06:	a0 91 70 02 	lds	r26, 0x0270
    3a0a:	b0 91 71 02 	lds	r27, 0x0271
    3a0e:	bc 01       	movw	r22, r24
    3a10:	cd 01       	movw	r24, r26
    3a12:	25 e3       	ldi	r18, 0x35	; 53
    3a14:	3a ef       	ldi	r19, 0xFA	; 250
    3a16:	4e e8       	ldi	r20, 0x8E	; 142
    3a18:	5c e3       	ldi	r21, 0x3C	; 60
    3a1a:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3a1e:	dc 01       	movw	r26, r24
    3a20:	cb 01       	movw	r24, r22
    3a22:	7c 01       	movw	r14, r24
    3a24:	8d 01       	movw	r16, r26
    3a26:	20 91 f3 01 	lds	r18, 0x01F3
    3a2a:	30 91 f4 01 	lds	r19, 0x01F4
    3a2e:	40 91 f5 01 	lds	r20, 0x01F5
    3a32:	50 91 f6 01 	lds	r21, 0x01F6
    3a36:	60 e0       	ldi	r22, 0x00	; 0
    3a38:	70 e0       	ldi	r23, 0x00	; 0
    3a3a:	80 e8       	ldi	r24, 0x80	; 128
    3a3c:	9f e3       	ldi	r25, 0x3F	; 63
    3a3e:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    3a42:	dc 01       	movw	r26, r24
    3a44:	cb 01       	movw	r24, r22
    3a46:	9c 01       	movw	r18, r24
    3a48:	ad 01       	movw	r20, r26
    3a4a:	c8 01       	movw	r24, r16
    3a4c:	b7 01       	movw	r22, r14
    3a4e:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3a52:	dc 01       	movw	r26, r24
    3a54:	cb 01       	movw	r24, r22
    3a56:	bc 01       	movw	r22, r24
    3a58:	cd 01       	movw	r24, r26
    3a5a:	0e 94 a2 21 	call	0x4344	; 0x4344 <_cos>
    3a5e:	9b 01       	movw	r18, r22
    3a60:	ac 01       	movw	r20, r24
    3a62:	c6 01       	movw	r24, r12
    3a64:	88 0f       	add	r24, r24
    3a66:	99 1f       	adc	r25, r25
    3a68:	88 0f       	add	r24, r24
    3a6a:	99 1f       	adc	r25, r25
    3a6c:	fc 01       	movw	r30, r24
    3a6e:	ec 5b       	subi	r30, 0xBC	; 188
    3a70:	fd 4f       	sbci	r31, 0xFD	; 253
    3a72:	20 83       	st	Z, r18
    3a74:	31 83       	std	Z+1, r19	; 0x01
    3a76:	42 83       	std	Z+2, r20	; 0x02
    3a78:	53 83       	std	Z+3, r21	; 0x03
				LCD_enuSendChar(')');
    3a7a:	89 e2       	ldi	r24, 0x29	; 41
    3a7c:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    3a80:	ac c2       	rjmp	.+1368   	; 0x3fda <main+0x2de4>
			}
			else if(Get_bit(Global_u16FLAGS,Sqrt))
    3a82:	80 91 f1 01 	lds	r24, 0x01F1
    3a86:	90 91 f2 01 	lds	r25, 0x01F2
    3a8a:	80 72       	andi	r24, 0x20	; 32
    3a8c:	90 70       	andi	r25, 0x00	; 0
    3a8e:	00 97       	sbiw	r24, 0x00	; 0
    3a90:	09 f4       	brne	.+2      	; 0x3a94 <main+0x289e>
    3a92:	40 c0       	rjmp	.+128    	; 0x3b14 <main+0x291e>
			{
				if(Global_f32Num < 0)
    3a94:	80 91 6e 02 	lds	r24, 0x026E
    3a98:	90 91 6f 02 	lds	r25, 0x026F
    3a9c:	a0 91 70 02 	lds	r26, 0x0270
    3aa0:	b0 91 71 02 	lds	r27, 0x0271
    3aa4:	bc 01       	movw	r22, r24
    3aa6:	cd 01       	movw	r24, r26
    3aa8:	20 e0       	ldi	r18, 0x00	; 0
    3aaa:	30 e0       	ldi	r19, 0x00	; 0
    3aac:	40 e0       	ldi	r20, 0x00	; 0
    3aae:	50 e0       	ldi	r21, 0x00	; 0
    3ab0:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    3ab4:	88 23       	and	r24, r24
    3ab6:	64 f4       	brge	.+24     	; 0x3ad0 <main+0x28da>
				{
					Set_bit(Global_u16FLAGS, error);
    3ab8:	80 91 f1 01 	lds	r24, 0x01F1
    3abc:	90 91 f2 01 	lds	r25, 0x01F2
    3ac0:	84 60       	ori	r24, 0x04	; 4
    3ac2:	90 93 f2 01 	sts	0x01F2, r25
    3ac6:	80 93 f1 01 	sts	0x01F1, r24
					LCD_enuSendChar(')');
    3aca:	89 e2       	ldi	r24, 0x29	; 41
    3acc:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>

				}
				Global_Af32Operands[Local_u8It1] = _sqrt(Global_f32Num);
    3ad0:	80 91 6c 02 	lds	r24, 0x026C
    3ad4:	08 2f       	mov	r16, r24
    3ad6:	10 e0       	ldi	r17, 0x00	; 0
    3ad8:	80 91 6e 02 	lds	r24, 0x026E
    3adc:	90 91 6f 02 	lds	r25, 0x026F
    3ae0:	a0 91 70 02 	lds	r26, 0x0270
    3ae4:	b0 91 71 02 	lds	r27, 0x0271
    3ae8:	bc 01       	movw	r22, r24
    3aea:	cd 01       	movw	r24, r26
    3aec:	0e 94 7d 24 	call	0x48fa	; 0x48fa <_sqrt>
    3af0:	9b 01       	movw	r18, r22
    3af2:	ac 01       	movw	r20, r24
    3af4:	c8 01       	movw	r24, r16
    3af6:	88 0f       	add	r24, r24
    3af8:	99 1f       	adc	r25, r25
    3afa:	88 0f       	add	r24, r24
    3afc:	99 1f       	adc	r25, r25
    3afe:	fc 01       	movw	r30, r24
    3b00:	ec 5b       	subi	r30, 0xBC	; 188
    3b02:	fd 4f       	sbci	r31, 0xFD	; 253
    3b04:	20 83       	st	Z, r18
    3b06:	31 83       	std	Z+1, r19	; 0x01
    3b08:	42 83       	std	Z+2, r20	; 0x02
    3b0a:	53 83       	std	Z+3, r21	; 0x03
				LCD_enuSendChar(')');
    3b0c:	89 e2       	ldi	r24, 0x29	; 41
    3b0e:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    3b12:	63 c2       	rjmp	.+1222   	; 0x3fda <main+0x2de4>
			}
			else if(Get_bit(Global_u16FLAGS,Tan))
    3b14:	80 91 f1 01 	lds	r24, 0x01F1
    3b18:	90 91 f2 01 	lds	r25, 0x01F2
    3b1c:	80 70       	andi	r24, 0x00	; 0
    3b1e:	91 70       	andi	r25, 0x01	; 1
    3b20:	00 97       	sbiw	r24, 0x00	; 0
    3b22:	09 f4       	brne	.+2      	; 0x3b26 <main+0x2930>
    3b24:	73 c0       	rjmp	.+230    	; 0x3c0c <main+0x2a16>
			{
				if(Global_f32Num == 90 || Global_f32Num == -90 )
    3b26:	80 91 6e 02 	lds	r24, 0x026E
    3b2a:	90 91 6f 02 	lds	r25, 0x026F
    3b2e:	a0 91 70 02 	lds	r26, 0x0270
    3b32:	b0 91 71 02 	lds	r27, 0x0271
    3b36:	bc 01       	movw	r22, r24
    3b38:	cd 01       	movw	r24, r26
    3b3a:	20 e0       	ldi	r18, 0x00	; 0
    3b3c:	30 e0       	ldi	r19, 0x00	; 0
    3b3e:	44 eb       	ldi	r20, 0xB4	; 180
    3b40:	52 e4       	ldi	r21, 0x42	; 66
    3b42:	0e 94 c3 04 	call	0x986	; 0x986 <__eqsf2>
    3b46:	88 23       	and	r24, r24
    3b48:	91 f0       	breq	.+36     	; 0x3b6e <main+0x2978>
    3b4a:	80 91 6e 02 	lds	r24, 0x026E
    3b4e:	90 91 6f 02 	lds	r25, 0x026F
    3b52:	a0 91 70 02 	lds	r26, 0x0270
    3b56:	b0 91 71 02 	lds	r27, 0x0271
    3b5a:	bc 01       	movw	r22, r24
    3b5c:	cd 01       	movw	r24, r26
    3b5e:	20 e0       	ldi	r18, 0x00	; 0
    3b60:	30 e0       	ldi	r19, 0x00	; 0
    3b62:	44 eb       	ldi	r20, 0xB4	; 180
    3b64:	52 ec       	ldi	r21, 0xC2	; 194
    3b66:	0e 94 c3 04 	call	0x986	; 0x986 <__eqsf2>
    3b6a:	88 23       	and	r24, r24
    3b6c:	49 f4       	brne	.+18     	; 0x3b80 <main+0x298a>
				{
					Set_bit(Global_u16FLAGS, error);
    3b6e:	80 91 f1 01 	lds	r24, 0x01F1
    3b72:	90 91 f2 01 	lds	r25, 0x01F2
    3b76:	84 60       	ori	r24, 0x04	; 4
    3b78:	90 93 f2 01 	sts	0x01F2, r25
    3b7c:	80 93 f1 01 	sts	0x01F1, r24
				}
				Global_Af32Operands[Local_u8It1] = _tan(Global_f32Num*(M_PI/180.0)*(1/Global_f32mode));
    3b80:	80 91 6c 02 	lds	r24, 0x026C
    3b84:	c8 2e       	mov	r12, r24
    3b86:	dd 24       	eor	r13, r13
    3b88:	80 91 6e 02 	lds	r24, 0x026E
    3b8c:	90 91 6f 02 	lds	r25, 0x026F
    3b90:	a0 91 70 02 	lds	r26, 0x0270
    3b94:	b0 91 71 02 	lds	r27, 0x0271
    3b98:	bc 01       	movw	r22, r24
    3b9a:	cd 01       	movw	r24, r26
    3b9c:	25 e3       	ldi	r18, 0x35	; 53
    3b9e:	3a ef       	ldi	r19, 0xFA	; 250
    3ba0:	4e e8       	ldi	r20, 0x8E	; 142
    3ba2:	5c e3       	ldi	r21, 0x3C	; 60
    3ba4:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3ba8:	dc 01       	movw	r26, r24
    3baa:	cb 01       	movw	r24, r22
    3bac:	7c 01       	movw	r14, r24
    3bae:	8d 01       	movw	r16, r26
    3bb0:	20 91 f3 01 	lds	r18, 0x01F3
    3bb4:	30 91 f4 01 	lds	r19, 0x01F4
    3bb8:	40 91 f5 01 	lds	r20, 0x01F5
    3bbc:	50 91 f6 01 	lds	r21, 0x01F6
    3bc0:	60 e0       	ldi	r22, 0x00	; 0
    3bc2:	70 e0       	ldi	r23, 0x00	; 0
    3bc4:	80 e8       	ldi	r24, 0x80	; 128
    3bc6:	9f e3       	ldi	r25, 0x3F	; 63
    3bc8:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    3bcc:	dc 01       	movw	r26, r24
    3bce:	cb 01       	movw	r24, r22
    3bd0:	9c 01       	movw	r18, r24
    3bd2:	ad 01       	movw	r20, r26
    3bd4:	c8 01       	movw	r24, r16
    3bd6:	b7 01       	movw	r22, r14
    3bd8:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3bdc:	dc 01       	movw	r26, r24
    3bde:	cb 01       	movw	r24, r22
    3be0:	bc 01       	movw	r22, r24
    3be2:	cd 01       	movw	r24, r26
    3be4:	0e 94 62 23 	call	0x46c4	; 0x46c4 <_tan>
    3be8:	9b 01       	movw	r18, r22
    3bea:	ac 01       	movw	r20, r24
    3bec:	c6 01       	movw	r24, r12
    3bee:	88 0f       	add	r24, r24
    3bf0:	99 1f       	adc	r25, r25
    3bf2:	88 0f       	add	r24, r24
    3bf4:	99 1f       	adc	r25, r25
    3bf6:	fc 01       	movw	r30, r24
    3bf8:	ec 5b       	subi	r30, 0xBC	; 188
    3bfa:	fd 4f       	sbci	r31, 0xFD	; 253
    3bfc:	20 83       	st	Z, r18
    3bfe:	31 83       	std	Z+1, r19	; 0x01
    3c00:	42 83       	std	Z+2, r20	; 0x02
    3c02:	53 83       	std	Z+3, r21	; 0x03
				LCD_enuSendChar(')');
    3c04:	89 e2       	ldi	r24, 0x29	; 41
    3c06:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    3c0a:	e7 c1       	rjmp	.+974    	; 0x3fda <main+0x2de4>
			}
			else if(Get_bit(Global_u16FLAGS,Exp ))
    3c0c:	80 91 f1 01 	lds	r24, 0x01F1
    3c10:	90 91 f2 01 	lds	r25, 0x01F2
    3c14:	80 70       	andi	r24, 0x00	; 0
    3c16:	94 70       	andi	r25, 0x04	; 4
    3c18:	00 97       	sbiw	r24, 0x00	; 0
    3c1a:	11 f1       	breq	.+68     	; 0x3c60 <main+0x2a6a>
			{
				Global_Af32Operands[Local_u8It1] = expo(Global_f32Num);
    3c1c:	80 91 6c 02 	lds	r24, 0x026C
    3c20:	08 2f       	mov	r16, r24
    3c22:	10 e0       	ldi	r17, 0x00	; 0
    3c24:	80 91 6e 02 	lds	r24, 0x026E
    3c28:	90 91 6f 02 	lds	r25, 0x026F
    3c2c:	a0 91 70 02 	lds	r26, 0x0270
    3c30:	b0 91 71 02 	lds	r27, 0x0271
    3c34:	bc 01       	movw	r22, r24
    3c36:	cd 01       	movw	r24, r26
    3c38:	0e 94 97 23 	call	0x472e	; 0x472e <expo>
    3c3c:	9b 01       	movw	r18, r22
    3c3e:	ac 01       	movw	r20, r24
    3c40:	c8 01       	movw	r24, r16
    3c42:	88 0f       	add	r24, r24
    3c44:	99 1f       	adc	r25, r25
    3c46:	88 0f       	add	r24, r24
    3c48:	99 1f       	adc	r25, r25
    3c4a:	fc 01       	movw	r30, r24
    3c4c:	ec 5b       	subi	r30, 0xBC	; 188
    3c4e:	fd 4f       	sbci	r31, 0xFD	; 253
    3c50:	20 83       	st	Z, r18
    3c52:	31 83       	std	Z+1, r19	; 0x01
    3c54:	42 83       	std	Z+2, r20	; 0x02
    3c56:	53 83       	std	Z+3, r21	; 0x03
				LCD_enuSendChar(')');
    3c58:	89 e2       	ldi	r24, 0x29	; 41
    3c5a:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    3c5e:	bd c1       	rjmp	.+890    	; 0x3fda <main+0x2de4>
			}
			else if(Get_bit(Global_u16HYP,Atan ))
    3c60:	80 91 72 02 	lds	r24, 0x0272
    3c64:	90 91 73 02 	lds	r25, 0x0273
    3c68:	80 72       	andi	r24, 0x20	; 32
    3c6a:	90 70       	andi	r25, 0x00	; 0
    3c6c:	00 97       	sbiw	r24, 0x00	; 0
    3c6e:	e1 f1       	breq	.+120    	; 0x3ce8 <main+0x2af2>
			{
				Global_Af32Operands[Local_u8It1] = my_atan(Global_f32Num)*(180.0/M_PI)*Global_f32mode;
    3c70:	80 91 6c 02 	lds	r24, 0x026C
    3c74:	08 2f       	mov	r16, r24
    3c76:	10 e0       	ldi	r17, 0x00	; 0
    3c78:	80 91 6e 02 	lds	r24, 0x026E
    3c7c:	90 91 6f 02 	lds	r25, 0x026F
    3c80:	a0 91 70 02 	lds	r26, 0x0270
    3c84:	b0 91 71 02 	lds	r27, 0x0271
    3c88:	bc 01       	movw	r22, r24
    3c8a:	cd 01       	movw	r24, r26
    3c8c:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <my_atan>
    3c90:	dc 01       	movw	r26, r24
    3c92:	cb 01       	movw	r24, r22
    3c94:	bc 01       	movw	r22, r24
    3c96:	cd 01       	movw	r24, r26
    3c98:	20 ee       	ldi	r18, 0xE0	; 224
    3c9a:	3e e2       	ldi	r19, 0x2E	; 46
    3c9c:	45 e6       	ldi	r20, 0x65	; 101
    3c9e:	52 e4       	ldi	r21, 0x42	; 66
    3ca0:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3ca4:	dc 01       	movw	r26, r24
    3ca6:	cb 01       	movw	r24, r22
    3ca8:	20 91 f3 01 	lds	r18, 0x01F3
    3cac:	30 91 f4 01 	lds	r19, 0x01F4
    3cb0:	40 91 f5 01 	lds	r20, 0x01F5
    3cb4:	50 91 f6 01 	lds	r21, 0x01F6
    3cb8:	bc 01       	movw	r22, r24
    3cba:	cd 01       	movw	r24, r26
    3cbc:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3cc0:	dc 01       	movw	r26, r24
    3cc2:	cb 01       	movw	r24, r22
    3cc4:	9c 01       	movw	r18, r24
    3cc6:	ad 01       	movw	r20, r26
    3cc8:	c8 01       	movw	r24, r16
    3cca:	88 0f       	add	r24, r24
    3ccc:	99 1f       	adc	r25, r25
    3cce:	88 0f       	add	r24, r24
    3cd0:	99 1f       	adc	r25, r25
    3cd2:	fc 01       	movw	r30, r24
    3cd4:	ec 5b       	subi	r30, 0xBC	; 188
    3cd6:	fd 4f       	sbci	r31, 0xFD	; 253
    3cd8:	20 83       	st	Z, r18
    3cda:	31 83       	std	Z+1, r19	; 0x01
    3cdc:	42 83       	std	Z+2, r20	; 0x02
    3cde:	53 83       	std	Z+3, r21	; 0x03
				LCD_enuSendChar(')');
    3ce0:	89 e2       	ldi	r24, 0x29	; 41
    3ce2:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    3ce6:	79 c1       	rjmp	.+754    	; 0x3fda <main+0x2de4>
			}
			else if(Get_bit(Global_u16HYP,Asin ))
    3ce8:	80 91 72 02 	lds	r24, 0x0272
    3cec:	90 91 73 02 	lds	r25, 0x0273
    3cf0:	88 70       	andi	r24, 0x08	; 8
    3cf2:	90 70       	andi	r25, 0x00	; 0
    3cf4:	00 97       	sbiw	r24, 0x00	; 0
    3cf6:	09 f4       	brne	.+2      	; 0x3cfa <main+0x2b04>
    3cf8:	69 c0       	rjmp	.+210    	; 0x3dcc <main+0x2bd6>
			{
				if(Global_f32Num > 1 || (Global_f32Num < -1))
    3cfa:	80 91 6e 02 	lds	r24, 0x026E
    3cfe:	90 91 6f 02 	lds	r25, 0x026F
    3d02:	a0 91 70 02 	lds	r26, 0x0270
    3d06:	b0 91 71 02 	lds	r27, 0x0271
    3d0a:	bc 01       	movw	r22, r24
    3d0c:	cd 01       	movw	r24, r26
    3d0e:	20 e0       	ldi	r18, 0x00	; 0
    3d10:	30 e0       	ldi	r19, 0x00	; 0
    3d12:	40 e8       	ldi	r20, 0x80	; 128
    3d14:	5f e3       	ldi	r21, 0x3F	; 63
    3d16:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    3d1a:	18 16       	cp	r1, r24
    3d1c:	94 f0       	brlt	.+36     	; 0x3d42 <main+0x2b4c>
    3d1e:	80 91 6e 02 	lds	r24, 0x026E
    3d22:	90 91 6f 02 	lds	r25, 0x026F
    3d26:	a0 91 70 02 	lds	r26, 0x0270
    3d2a:	b0 91 71 02 	lds	r27, 0x0271
    3d2e:	bc 01       	movw	r22, r24
    3d30:	cd 01       	movw	r24, r26
    3d32:	20 e0       	ldi	r18, 0x00	; 0
    3d34:	30 e0       	ldi	r19, 0x00	; 0
    3d36:	40 e8       	ldi	r20, 0x80	; 128
    3d38:	5f eb       	ldi	r21, 0xBF	; 191
    3d3a:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    3d3e:	88 23       	and	r24, r24
    3d40:	4c f4       	brge	.+18     	; 0x3d54 <main+0x2b5e>
				{
					Set_bit(Global_u16FLAGS, error);
    3d42:	80 91 f1 01 	lds	r24, 0x01F1
    3d46:	90 91 f2 01 	lds	r25, 0x01F2
    3d4a:	84 60       	ori	r24, 0x04	; 4
    3d4c:	90 93 f2 01 	sts	0x01F2, r25
    3d50:	80 93 f1 01 	sts	0x01F1, r24
				}
				Global_Af32Operands[Local_u8It1] = my_asin(Global_f32Num)*(180.0/M_PI)*Global_f32mode;
    3d54:	80 91 6c 02 	lds	r24, 0x026C
    3d58:	08 2f       	mov	r16, r24
    3d5a:	10 e0       	ldi	r17, 0x00	; 0
    3d5c:	80 91 6e 02 	lds	r24, 0x026E
    3d60:	90 91 6f 02 	lds	r25, 0x026F
    3d64:	a0 91 70 02 	lds	r26, 0x0270
    3d68:	b0 91 71 02 	lds	r27, 0x0271
    3d6c:	bc 01       	movw	r22, r24
    3d6e:	cd 01       	movw	r24, r26
    3d70:	0e 94 07 28 	call	0x500e	; 0x500e <my_asin>
    3d74:	dc 01       	movw	r26, r24
    3d76:	cb 01       	movw	r24, r22
    3d78:	bc 01       	movw	r22, r24
    3d7a:	cd 01       	movw	r24, r26
    3d7c:	20 ee       	ldi	r18, 0xE0	; 224
    3d7e:	3e e2       	ldi	r19, 0x2E	; 46
    3d80:	45 e6       	ldi	r20, 0x65	; 101
    3d82:	52 e4       	ldi	r21, 0x42	; 66
    3d84:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3d88:	dc 01       	movw	r26, r24
    3d8a:	cb 01       	movw	r24, r22
    3d8c:	20 91 f3 01 	lds	r18, 0x01F3
    3d90:	30 91 f4 01 	lds	r19, 0x01F4
    3d94:	40 91 f5 01 	lds	r20, 0x01F5
    3d98:	50 91 f6 01 	lds	r21, 0x01F6
    3d9c:	bc 01       	movw	r22, r24
    3d9e:	cd 01       	movw	r24, r26
    3da0:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3da4:	dc 01       	movw	r26, r24
    3da6:	cb 01       	movw	r24, r22
    3da8:	9c 01       	movw	r18, r24
    3daa:	ad 01       	movw	r20, r26
    3dac:	c8 01       	movw	r24, r16
    3dae:	88 0f       	add	r24, r24
    3db0:	99 1f       	adc	r25, r25
    3db2:	88 0f       	add	r24, r24
    3db4:	99 1f       	adc	r25, r25
    3db6:	fc 01       	movw	r30, r24
    3db8:	ec 5b       	subi	r30, 0xBC	; 188
    3dba:	fd 4f       	sbci	r31, 0xFD	; 253
    3dbc:	20 83       	st	Z, r18
    3dbe:	31 83       	std	Z+1, r19	; 0x01
    3dc0:	42 83       	std	Z+2, r20	; 0x02
    3dc2:	53 83       	std	Z+3, r21	; 0x03
				LCD_enuSendChar(')');
    3dc4:	89 e2       	ldi	r24, 0x29	; 41
    3dc6:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    3dca:	07 c1       	rjmp	.+526    	; 0x3fda <main+0x2de4>
			}
			else if(Get_bit(Global_u16HYP,Acos ))
    3dcc:	80 91 72 02 	lds	r24, 0x0272
    3dd0:	90 91 73 02 	lds	r25, 0x0273
    3dd4:	80 71       	andi	r24, 0x10	; 16
    3dd6:	90 70       	andi	r25, 0x00	; 0
    3dd8:	00 97       	sbiw	r24, 0x00	; 0
    3dda:	09 f4       	brne	.+2      	; 0x3dde <main+0x2be8>
    3ddc:	69 c0       	rjmp	.+210    	; 0x3eb0 <main+0x2cba>
			{
				if(Global_f32Num > 1 || (Global_f32Num < -1 ))
    3dde:	80 91 6e 02 	lds	r24, 0x026E
    3de2:	90 91 6f 02 	lds	r25, 0x026F
    3de6:	a0 91 70 02 	lds	r26, 0x0270
    3dea:	b0 91 71 02 	lds	r27, 0x0271
    3dee:	bc 01       	movw	r22, r24
    3df0:	cd 01       	movw	r24, r26
    3df2:	20 e0       	ldi	r18, 0x00	; 0
    3df4:	30 e0       	ldi	r19, 0x00	; 0
    3df6:	40 e8       	ldi	r20, 0x80	; 128
    3df8:	5f e3       	ldi	r21, 0x3F	; 63
    3dfa:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    3dfe:	18 16       	cp	r1, r24
    3e00:	94 f0       	brlt	.+36     	; 0x3e26 <main+0x2c30>
    3e02:	80 91 6e 02 	lds	r24, 0x026E
    3e06:	90 91 6f 02 	lds	r25, 0x026F
    3e0a:	a0 91 70 02 	lds	r26, 0x0270
    3e0e:	b0 91 71 02 	lds	r27, 0x0271
    3e12:	bc 01       	movw	r22, r24
    3e14:	cd 01       	movw	r24, r26
    3e16:	20 e0       	ldi	r18, 0x00	; 0
    3e18:	30 e0       	ldi	r19, 0x00	; 0
    3e1a:	40 e8       	ldi	r20, 0x80	; 128
    3e1c:	5f eb       	ldi	r21, 0xBF	; 191
    3e1e:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    3e22:	88 23       	and	r24, r24
    3e24:	4c f4       	brge	.+18     	; 0x3e38 <main+0x2c42>
				{
					Set_bit(Global_u16FLAGS, error);
    3e26:	80 91 f1 01 	lds	r24, 0x01F1
    3e2a:	90 91 f2 01 	lds	r25, 0x01F2
    3e2e:	84 60       	ori	r24, 0x04	; 4
    3e30:	90 93 f2 01 	sts	0x01F2, r25
    3e34:	80 93 f1 01 	sts	0x01F1, r24
				}
				Global_Af32Operands[Local_u8It1] = my_acos(Global_f32Num)*(180.0/M_PI)*Global_f32mode;
    3e38:	80 91 6c 02 	lds	r24, 0x026C
    3e3c:	08 2f       	mov	r16, r24
    3e3e:	10 e0       	ldi	r17, 0x00	; 0
    3e40:	80 91 6e 02 	lds	r24, 0x026E
    3e44:	90 91 6f 02 	lds	r25, 0x026F
    3e48:	a0 91 70 02 	lds	r26, 0x0270
    3e4c:	b0 91 71 02 	lds	r27, 0x0271
    3e50:	bc 01       	movw	r22, r24
    3e52:	cd 01       	movw	r24, r26
    3e54:	0e 94 44 28 	call	0x5088	; 0x5088 <my_acos>
    3e58:	dc 01       	movw	r26, r24
    3e5a:	cb 01       	movw	r24, r22
    3e5c:	bc 01       	movw	r22, r24
    3e5e:	cd 01       	movw	r24, r26
    3e60:	20 ee       	ldi	r18, 0xE0	; 224
    3e62:	3e e2       	ldi	r19, 0x2E	; 46
    3e64:	45 e6       	ldi	r20, 0x65	; 101
    3e66:	52 e4       	ldi	r21, 0x42	; 66
    3e68:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3e6c:	dc 01       	movw	r26, r24
    3e6e:	cb 01       	movw	r24, r22
    3e70:	20 91 f3 01 	lds	r18, 0x01F3
    3e74:	30 91 f4 01 	lds	r19, 0x01F4
    3e78:	40 91 f5 01 	lds	r20, 0x01F5
    3e7c:	50 91 f6 01 	lds	r21, 0x01F6
    3e80:	bc 01       	movw	r22, r24
    3e82:	cd 01       	movw	r24, r26
    3e84:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3e88:	dc 01       	movw	r26, r24
    3e8a:	cb 01       	movw	r24, r22
    3e8c:	9c 01       	movw	r18, r24
    3e8e:	ad 01       	movw	r20, r26
    3e90:	c8 01       	movw	r24, r16
    3e92:	88 0f       	add	r24, r24
    3e94:	99 1f       	adc	r25, r25
    3e96:	88 0f       	add	r24, r24
    3e98:	99 1f       	adc	r25, r25
    3e9a:	fc 01       	movw	r30, r24
    3e9c:	ec 5b       	subi	r30, 0xBC	; 188
    3e9e:	fd 4f       	sbci	r31, 0xFD	; 253
    3ea0:	20 83       	st	Z, r18
    3ea2:	31 83       	std	Z+1, r19	; 0x01
    3ea4:	42 83       	std	Z+2, r20	; 0x02
    3ea6:	53 83       	std	Z+3, r21	; 0x03
				LCD_enuSendChar(')');
    3ea8:	89 e2       	ldi	r24, 0x29	; 41
    3eaa:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    3eae:	95 c0       	rjmp	.+298    	; 0x3fda <main+0x2de4>
			}
			else if(Get_bit(Global_u16HYP,Sinh ))
    3eb0:	80 91 72 02 	lds	r24, 0x0272
    3eb4:	90 91 73 02 	lds	r25, 0x0273
    3eb8:	81 70       	andi	r24, 0x01	; 1
    3eba:	90 70       	andi	r25, 0x00	; 0
    3ebc:	88 23       	and	r24, r24
    3ebe:	11 f1       	breq	.+68     	; 0x3f04 <main+0x2d0e>
			{
				Global_Af32Operands[Local_u8It1] = _sinh(Global_f32Num);
    3ec0:	80 91 6c 02 	lds	r24, 0x026C
    3ec4:	08 2f       	mov	r16, r24
    3ec6:	10 e0       	ldi	r17, 0x00	; 0
    3ec8:	80 91 6e 02 	lds	r24, 0x026E
    3ecc:	90 91 6f 02 	lds	r25, 0x026F
    3ed0:	a0 91 70 02 	lds	r26, 0x0270
    3ed4:	b0 91 71 02 	lds	r27, 0x0271
    3ed8:	bc 01       	movw	r22, r24
    3eda:	cd 01       	movw	r24, r26
    3edc:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <_sinh>
    3ee0:	9b 01       	movw	r18, r22
    3ee2:	ac 01       	movw	r20, r24
    3ee4:	c8 01       	movw	r24, r16
    3ee6:	88 0f       	add	r24, r24
    3ee8:	99 1f       	adc	r25, r25
    3eea:	88 0f       	add	r24, r24
    3eec:	99 1f       	adc	r25, r25
    3eee:	fc 01       	movw	r30, r24
    3ef0:	ec 5b       	subi	r30, 0xBC	; 188
    3ef2:	fd 4f       	sbci	r31, 0xFD	; 253
    3ef4:	20 83       	st	Z, r18
    3ef6:	31 83       	std	Z+1, r19	; 0x01
    3ef8:	42 83       	std	Z+2, r20	; 0x02
    3efa:	53 83       	std	Z+3, r21	; 0x03
				LCD_enuSendChar(')');
    3efc:	89 e2       	ldi	r24, 0x29	; 41
    3efe:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    3f02:	6b c0       	rjmp	.+214    	; 0x3fda <main+0x2de4>
			}
			else if(Get_bit(Global_u16HYP,Cosh ))
    3f04:	80 91 72 02 	lds	r24, 0x0272
    3f08:	90 91 73 02 	lds	r25, 0x0273
    3f0c:	82 70       	andi	r24, 0x02	; 2
    3f0e:	90 70       	andi	r25, 0x00	; 0
    3f10:	00 97       	sbiw	r24, 0x00	; 0
    3f12:	11 f1       	breq	.+68     	; 0x3f58 <main+0x2d62>
			{
				Global_Af32Operands[Local_u8It1] = _cosh(Global_f32Num);
    3f14:	80 91 6c 02 	lds	r24, 0x026C
    3f18:	08 2f       	mov	r16, r24
    3f1a:	10 e0       	ldi	r17, 0x00	; 0
    3f1c:	80 91 6e 02 	lds	r24, 0x026E
    3f20:	90 91 6f 02 	lds	r25, 0x026F
    3f24:	a0 91 70 02 	lds	r26, 0x0270
    3f28:	b0 91 71 02 	lds	r27, 0x0271
    3f2c:	bc 01       	movw	r22, r24
    3f2e:	cd 01       	movw	r24, r26
    3f30:	0e 94 a9 2a 	call	0x5552	; 0x5552 <_cosh>
    3f34:	9b 01       	movw	r18, r22
    3f36:	ac 01       	movw	r20, r24
    3f38:	c8 01       	movw	r24, r16
    3f3a:	88 0f       	add	r24, r24
    3f3c:	99 1f       	adc	r25, r25
    3f3e:	88 0f       	add	r24, r24
    3f40:	99 1f       	adc	r25, r25
    3f42:	fc 01       	movw	r30, r24
    3f44:	ec 5b       	subi	r30, 0xBC	; 188
    3f46:	fd 4f       	sbci	r31, 0xFD	; 253
    3f48:	20 83       	st	Z, r18
    3f4a:	31 83       	std	Z+1, r19	; 0x01
    3f4c:	42 83       	std	Z+2, r20	; 0x02
    3f4e:	53 83       	std	Z+3, r21	; 0x03
				LCD_enuSendChar(')');
    3f50:	89 e2       	ldi	r24, 0x29	; 41
    3f52:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    3f56:	41 c0       	rjmp	.+130    	; 0x3fda <main+0x2de4>
			}
			else if(Get_bit(Global_u16HYP,Tanh ))
    3f58:	80 91 72 02 	lds	r24, 0x0272
    3f5c:	90 91 73 02 	lds	r25, 0x0273
    3f60:	84 70       	andi	r24, 0x04	; 4
    3f62:	90 70       	andi	r25, 0x00	; 0
    3f64:	00 97       	sbiw	r24, 0x00	; 0
    3f66:	11 f1       	breq	.+68     	; 0x3fac <main+0x2db6>
			{
				Global_Af32Operands[Local_u8It1] = _tanh(Global_f32Num);
    3f68:	80 91 6c 02 	lds	r24, 0x026C
    3f6c:	08 2f       	mov	r16, r24
    3f6e:	10 e0       	ldi	r17, 0x00	; 0
    3f70:	80 91 6e 02 	lds	r24, 0x026E
    3f74:	90 91 6f 02 	lds	r25, 0x026F
    3f78:	a0 91 70 02 	lds	r26, 0x0270
    3f7c:	b0 91 71 02 	lds	r27, 0x0271
    3f80:	bc 01       	movw	r22, r24
    3f82:	cd 01       	movw	r24, r26
    3f84:	0e 94 e9 2a 	call	0x55d2	; 0x55d2 <_tanh>
    3f88:	9b 01       	movw	r18, r22
    3f8a:	ac 01       	movw	r20, r24
    3f8c:	c8 01       	movw	r24, r16
    3f8e:	88 0f       	add	r24, r24
    3f90:	99 1f       	adc	r25, r25
    3f92:	88 0f       	add	r24, r24
    3f94:	99 1f       	adc	r25, r25
    3f96:	fc 01       	movw	r30, r24
    3f98:	ec 5b       	subi	r30, 0xBC	; 188
    3f9a:	fd 4f       	sbci	r31, 0xFD	; 253
    3f9c:	20 83       	st	Z, r18
    3f9e:	31 83       	std	Z+1, r19	; 0x01
    3fa0:	42 83       	std	Z+2, r20	; 0x02
    3fa2:	53 83       	std	Z+3, r21	; 0x03
				LCD_enuSendChar(')');
    3fa4:	89 e2       	ldi	r24, 0x29	; 41
    3fa6:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    3faa:	17 c0       	rjmp	.+46     	; 0x3fda <main+0x2de4>
			}
			else{ Global_Af32Operands[Local_u8It1] = Global_f32Num;
    3fac:	80 91 6c 02 	lds	r24, 0x026C
    3fb0:	88 2f       	mov	r24, r24
    3fb2:	90 e0       	ldi	r25, 0x00	; 0
    3fb4:	20 91 6e 02 	lds	r18, 0x026E
    3fb8:	30 91 6f 02 	lds	r19, 0x026F
    3fbc:	40 91 70 02 	lds	r20, 0x0270
    3fc0:	50 91 71 02 	lds	r21, 0x0271
    3fc4:	88 0f       	add	r24, r24
    3fc6:	99 1f       	adc	r25, r25
    3fc8:	88 0f       	add	r24, r24
    3fca:	99 1f       	adc	r25, r25
    3fcc:	fc 01       	movw	r30, r24
    3fce:	ec 5b       	subi	r30, 0xBC	; 188
    3fd0:	fd 4f       	sbci	r31, 0xFD	; 253
    3fd2:	20 83       	st	Z, r18
    3fd4:	31 83       	std	Z+1, r19	; 0x01
    3fd6:	42 83       	std	Z+2, r20	; 0x02
    3fd8:	53 83       	std	Z+3, r21	; 0x03
			}
			Local_u8It1++;
    3fda:	80 91 6c 02 	lds	r24, 0x026C
    3fde:	8f 5f       	subi	r24, 0xFF	; 255
    3fe0:	80 93 6c 02 	sts	0x026C, r24
			if(Get_bit(Global_u16FLAGS, last_is_tri)) Global_u8Shift++;
    3fe4:	80 91 f1 01 	lds	r24, 0x01F1
    3fe8:	90 91 f2 01 	lds	r25, 0x01F2
    3fec:	80 70       	andi	r24, 0x00	; 0
    3fee:	98 70       	andi	r25, 0x08	; 8
    3ff0:	00 97       	sbiw	r24, 0x00	; 0
    3ff2:	29 f0       	breq	.+10     	; 0x3ffe <main+0x2e08>
    3ff4:	80 91 79 02 	lds	r24, 0x0279
    3ff8:	8f 5f       	subi	r24, 0xFF	; 255
    3ffa:	80 93 79 02 	sts	0x0279, r24

			Clr_bit(Global_u16FLAGS,Sin);
    3ffe:	80 91 f1 01 	lds	r24, 0x01F1
    4002:	90 91 f2 01 	lds	r25, 0x01F2
    4006:	8f 7b       	andi	r24, 0xBF	; 191
    4008:	90 93 f2 01 	sts	0x01F2, r25
    400c:	80 93 f1 01 	sts	0x01F1, r24
			Clr_bit(Global_u16FLAGS,Cos );
    4010:	80 91 f1 01 	lds	r24, 0x01F1
    4014:	90 91 f2 01 	lds	r25, 0x01F2
    4018:	8f 77       	andi	r24, 0x7F	; 127
    401a:	90 93 f2 01 	sts	0x01F2, r25
    401e:	80 93 f1 01 	sts	0x01F1, r24
			Clr_bit(Global_u16FLAGS,Sqrt);
    4022:	80 91 f1 01 	lds	r24, 0x01F1
    4026:	90 91 f2 01 	lds	r25, 0x01F2
    402a:	8f 7d       	andi	r24, 0xDF	; 223
    402c:	90 93 f2 01 	sts	0x01F2, r25
    4030:	80 93 f1 01 	sts	0x01F1, r24
			Clr_bit(Global_u16FLAGS,Tan);
    4034:	80 91 f1 01 	lds	r24, 0x01F1
    4038:	90 91 f2 01 	lds	r25, 0x01F2
    403c:	9e 7f       	andi	r25, 0xFE	; 254
    403e:	90 93 f2 01 	sts	0x01F2, r25
    4042:	80 93 f1 01 	sts	0x01F1, r24
			Clr_bit(Global_u16FLAGS,Exp);
    4046:	80 91 f1 01 	lds	r24, 0x01F1
    404a:	90 91 f2 01 	lds	r25, 0x01F2
    404e:	9b 7f       	andi	r25, 0xFB	; 251
    4050:	90 93 f2 01 	sts	0x01F2, r25
    4054:	80 93 f1 01 	sts	0x01F1, r24
			Clr_bit(Global_u16HYP,Atan);
    4058:	80 91 72 02 	lds	r24, 0x0272
    405c:	90 91 73 02 	lds	r25, 0x0273
    4060:	8f 7d       	andi	r24, 0xDF	; 223
    4062:	90 93 73 02 	sts	0x0273, r25
    4066:	80 93 72 02 	sts	0x0272, r24
			Clr_bit(Global_u16HYP,Acos);
    406a:	80 91 72 02 	lds	r24, 0x0272
    406e:	90 91 73 02 	lds	r25, 0x0273
    4072:	8f 7e       	andi	r24, 0xEF	; 239
    4074:	90 93 73 02 	sts	0x0273, r25
    4078:	80 93 72 02 	sts	0x0272, r24
			Clr_bit(Global_u16HYP,Asin);
    407c:	80 91 72 02 	lds	r24, 0x0272
    4080:	90 91 73 02 	lds	r25, 0x0273
    4084:	87 7f       	andi	r24, 0xF7	; 247
    4086:	90 93 73 02 	sts	0x0273, r25
    408a:	80 93 72 02 	sts	0x0272, r24
			Clr_bit(Global_u16HYP,Sinh);
    408e:	80 91 72 02 	lds	r24, 0x0272
    4092:	90 91 73 02 	lds	r25, 0x0273
    4096:	8e 7f       	andi	r24, 0xFE	; 254
    4098:	90 93 73 02 	sts	0x0273, r25
    409c:	80 93 72 02 	sts	0x0272, r24
			Clr_bit(Global_u16HYP,Cosh);
    40a0:	80 91 72 02 	lds	r24, 0x0272
    40a4:	90 91 73 02 	lds	r25, 0x0273
    40a8:	8d 7f       	andi	r24, 0xFD	; 253
    40aa:	90 93 73 02 	sts	0x0273, r25
    40ae:	80 93 72 02 	sts	0x0272, r24
			Clr_bit(Global_u16HYP,Tanh);
    40b2:	80 91 72 02 	lds	r24, 0x0272
    40b6:	90 91 73 02 	lds	r25, 0x0273
    40ba:	8b 7f       	andi	r24, 0xFB	; 251
    40bc:	90 93 73 02 	sts	0x0273, r25
    40c0:	80 93 72 02 	sts	0x0272, r24

			Clr_bit(Global_u16FLAGS, last_is_tri);
    40c4:	80 91 f1 01 	lds	r24, 0x01F1
    40c8:	90 91 f2 01 	lds	r25, 0x01F2
    40cc:	97 7f       	andi	r25, 0xF7	; 247
    40ce:	90 93 f2 01 	sts	0x01F2, r25
    40d2:	80 93 f1 01 	sts	0x01F1, r24

			if(Global_u8PressedKey == '+')
    40d6:	80 91 ef 01 	lds	r24, 0x01EF
    40da:	8b 32       	cpi	r24, 0x2B	; 43
    40dc:	69 f4       	brne	.+26     	; 0x40f8 <main+0x2f02>
			{
				Global_u8Operations[Local_u8It2] ='+';
    40de:	80 91 6d 02 	lds	r24, 0x026D
    40e2:	88 2f       	mov	r24, r24
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	fc 01       	movw	r30, r24
    40e8:	ec 59       	subi	r30, 0x9C	; 156
    40ea:	fd 4f       	sbci	r31, 0xFD	; 253
    40ec:	8b e2       	ldi	r24, 0x2B	; 43
    40ee:	80 83       	st	Z, r24
				LCD_enuSendChar('+');
    40f0:	8b e2       	ldi	r24, 0x2B	; 43
    40f2:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    40f6:	43 c0       	rjmp	.+134    	; 0x417e <main+0x2f88>
			}
			else if(Global_u8PressedKey == '-')
    40f8:	80 91 ef 01 	lds	r24, 0x01EF
    40fc:	8d 32       	cpi	r24, 0x2D	; 45
    40fe:	69 f4       	brne	.+26     	; 0x411a <main+0x2f24>
			{
				Global_u8Operations[Local_u8It2] ='-';
    4100:	80 91 6d 02 	lds	r24, 0x026D
    4104:	88 2f       	mov	r24, r24
    4106:	90 e0       	ldi	r25, 0x00	; 0
    4108:	fc 01       	movw	r30, r24
    410a:	ec 59       	subi	r30, 0x9C	; 156
    410c:	fd 4f       	sbci	r31, 0xFD	; 253
    410e:	8d e2       	ldi	r24, 0x2D	; 45
    4110:	80 83       	st	Z, r24
				LCD_enuSendChar('-');
    4112:	8d e2       	ldi	r24, 0x2D	; 45
    4114:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    4118:	32 c0       	rjmp	.+100    	; 0x417e <main+0x2f88>
			}
			else if(Global_u8PressedKey == '*')
    411a:	80 91 ef 01 	lds	r24, 0x01EF
    411e:	8a 32       	cpi	r24, 0x2A	; 42
    4120:	69 f4       	brne	.+26     	; 0x413c <main+0x2f46>
			{
				Global_u8Operations[Local_u8It2] ='*';
    4122:	80 91 6d 02 	lds	r24, 0x026D
    4126:	88 2f       	mov	r24, r24
    4128:	90 e0       	ldi	r25, 0x00	; 0
    412a:	fc 01       	movw	r30, r24
    412c:	ec 59       	subi	r30, 0x9C	; 156
    412e:	fd 4f       	sbci	r31, 0xFD	; 253
    4130:	8a e2       	ldi	r24, 0x2A	; 42
    4132:	80 83       	st	Z, r24
				LCD_enuSendChar('*');
    4134:	8a e2       	ldi	r24, 0x2A	; 42
    4136:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    413a:	21 c0       	rjmp	.+66     	; 0x417e <main+0x2f88>
			}
			else if(Global_u8PressedKey == '/')
    413c:	80 91 ef 01 	lds	r24, 0x01EF
    4140:	8f 32       	cpi	r24, 0x2F	; 47
    4142:	69 f4       	brne	.+26     	; 0x415e <main+0x2f68>
			{
				Global_u8Operations[Local_u8It2] ='/';
    4144:	80 91 6d 02 	lds	r24, 0x026D
    4148:	88 2f       	mov	r24, r24
    414a:	90 e0       	ldi	r25, 0x00	; 0
    414c:	fc 01       	movw	r30, r24
    414e:	ec 59       	subi	r30, 0x9C	; 156
    4150:	fd 4f       	sbci	r31, 0xFD	; 253
    4152:	8f e2       	ldi	r24, 0x2F	; 47
    4154:	80 83       	st	Z, r24
				LCD_enuSendChar('/');
    4156:	8f e2       	ldi	r24, 0x2F	; 47
    4158:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    415c:	10 c0       	rjmp	.+32     	; 0x417e <main+0x2f88>
			}
			else if(Global_u8PressedKey == ';')
    415e:	80 91 ef 01 	lds	r24, 0x01EF
    4162:	8b 33       	cpi	r24, 0x3B	; 59
    4164:	61 f4       	brne	.+24     	; 0x417e <main+0x2f88>
			{
				Global_u8Operations[Local_u8It2] =';';
    4166:	80 91 6d 02 	lds	r24, 0x026D
    416a:	88 2f       	mov	r24, r24
    416c:	90 e0       	ldi	r25, 0x00	; 0
    416e:	fc 01       	movw	r30, r24
    4170:	ec 59       	subi	r30, 0x9C	; 156
    4172:	fd 4f       	sbci	r31, 0xFD	; 253
    4174:	8b e3       	ldi	r24, 0x3B	; 59
    4176:	80 83       	st	Z, r24
				LCD_enuSendChar('^');
    4178:	8e e5       	ldi	r24, 0x5E	; 94
    417a:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
			}

			Local_u8It2++;
    417e:	80 91 6d 02 	lds	r24, 0x026D
    4182:	8f 5f       	subi	r24, 0xFF	; 255
    4184:	80 93 6d 02 	sts	0x026D, r24
			Global_f32Num =0;
    4188:	80 e0       	ldi	r24, 0x00	; 0
    418a:	90 e0       	ldi	r25, 0x00	; 0
    418c:	a0 e0       	ldi	r26, 0x00	; 0
    418e:	b0 e0       	ldi	r27, 0x00	; 0
    4190:	80 93 6e 02 	sts	0x026E, r24
    4194:	90 93 6f 02 	sts	0x026F, r25
    4198:	a0 93 70 02 	sts	0x0270, r26
    419c:	b0 93 71 02 	sts	0x0271, r27
			Clr_bit(Global_u16FLAGS, last_is_num);
    41a0:	80 91 f1 01 	lds	r24, 0x01F1
    41a4:	90 91 f2 01 	lds	r25, 0x01F2
    41a8:	87 7f       	andi	r24, 0xF7	; 247
    41aa:	90 93 f2 01 	sts	0x01F2, r25
    41ae:	80 93 f1 01 	sts	0x01F1, r24
			Clr_bit(Global_u16FLAGS,last_is_tri);
    41b2:	80 91 f1 01 	lds	r24, 0x01F1
    41b6:	90 91 f2 01 	lds	r25, 0x01F2
    41ba:	97 7f       	andi	r25, 0xF7	; 247
    41bc:	90 93 f2 01 	sts	0x01F2, r25
    41c0:	80 93 f1 01 	sts	0x01F1, r24
			if(Global_u8Shift>16)
    41c4:	80 91 79 02 	lds	r24, 0x0279
    41c8:	81 31       	cpi	r24, 0x11	; 17
    41ca:	10 f4       	brcc	.+4      	; 0x41d0 <main+0x2fda>
    41cc:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <main+0x1e>
			{
				for(k=0;k<(Global_u8Shift-16); ++k)
    41d0:	10 92 7c 02 	sts	0x027C, r1
    41d4:	0d c0       	rjmp	.+26     	; 0x41f0 <main+0x2ffa>
				{
					LCD_enuSendCommand(0x18);
    41d6:	88 e1       	ldi	r24, 0x18	; 24
    41d8:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <LCD_enuSendCommand>
					Global_u8ShiftCnt++;
    41dc:	80 91 78 02 	lds	r24, 0x0278
    41e0:	8f 5f       	subi	r24, 0xFF	; 255
    41e2:	80 93 78 02 	sts	0x0278, r24
			Global_f32Num =0;
			Clr_bit(Global_u16FLAGS, last_is_num);
			Clr_bit(Global_u16FLAGS,last_is_tri);
			if(Global_u8Shift>16)
			{
				for(k=0;k<(Global_u8Shift-16); ++k)
    41e6:	80 91 7c 02 	lds	r24, 0x027C
    41ea:	8f 5f       	subi	r24, 0xFF	; 255
    41ec:	80 93 7c 02 	sts	0x027C, r24
    41f0:	80 91 7c 02 	lds	r24, 0x027C
    41f4:	28 2f       	mov	r18, r24
    41f6:	30 e0       	ldi	r19, 0x00	; 0
    41f8:	80 91 79 02 	lds	r24, 0x0279
    41fc:	88 2f       	mov	r24, r24
    41fe:	90 e0       	ldi	r25, 0x00	; 0
    4200:	40 97       	sbiw	r24, 0x10	; 16
    4202:	28 17       	cp	r18, r24
    4204:	39 07       	cpc	r19, r25
    4206:	3c f3       	brlt	.-50     	; 0x41d6 <main+0x2fe0>
				{
					LCD_enuSendCommand(0x18);
					Global_u8ShiftCnt++;
				}
				Global_u8Shift=16;
    4208:	80 e1       	ldi	r24, 0x10	; 16
    420a:	80 93 79 02 	sts	0x0279, r24
    420e:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <main+0x1e>

00004212 <_pow>:
#include "../HAL/LCD/LCD_int.h"
#include "../HAL/Keypad/Keypad_int.h"



float _pow(float a, signed char b) {
    4212:	df 93       	push	r29
    4214:	cf 93       	push	r28
    4216:	cd b7       	in	r28, 0x3d	; 61
    4218:	de b7       	in	r29, 0x3e	; 62
    421a:	62 97       	sbiw	r28, 0x12	; 18
    421c:	0f b6       	in	r0, 0x3f	; 63
    421e:	f8 94       	cli
    4220:	de bf       	out	0x3e, r29	; 62
    4222:	0f be       	out	0x3f, r0	; 63
    4224:	cd bf       	out	0x3d, r28	; 61
    4226:	6d 83       	std	Y+5, r22	; 0x05
    4228:	7e 83       	std	Y+6, r23	; 0x06
    422a:	8f 83       	std	Y+7, r24	; 0x07
    422c:	98 87       	std	Y+8, r25	; 0x08
    422e:	49 87       	std	Y+9, r20	; 0x09
    if (b == 0)
    4230:	89 85       	ldd	r24, Y+9	; 0x09
    4232:	88 23       	and	r24, r24
    4234:	49 f4       	brne	.+18     	; 0x4248 <_pow+0x36>
        return 1;
    4236:	80 e0       	ldi	r24, 0x00	; 0
    4238:	90 e0       	ldi	r25, 0x00	; 0
    423a:	a0 e8       	ldi	r26, 0x80	; 128
    423c:	bf e3       	ldi	r27, 0x3F	; 63
    423e:	8e 87       	std	Y+14, r24	; 0x0e
    4240:	9f 87       	std	Y+15, r25	; 0x0f
    4242:	a8 8b       	std	Y+16, r26	; 0x10
    4244:	b9 8b       	std	Y+17, r27	; 0x11
    4246:	6f c0       	rjmp	.+222    	; 0x4326 <_pow+0x114>
    else if (b == 1)
    4248:	89 85       	ldd	r24, Y+9	; 0x09
    424a:	81 30       	cpi	r24, 0x01	; 1
    424c:	49 f4       	brne	.+18     	; 0x4260 <_pow+0x4e>
        return a;
    424e:	8d 81       	ldd	r24, Y+5	; 0x05
    4250:	9e 81       	ldd	r25, Y+6	; 0x06
    4252:	af 81       	ldd	r26, Y+7	; 0x07
    4254:	b8 85       	ldd	r27, Y+8	; 0x08
    4256:	8e 87       	std	Y+14, r24	; 0x0e
    4258:	9f 87       	std	Y+15, r25	; 0x0f
    425a:	a8 8b       	std	Y+16, r26	; 0x10
    425c:	b9 8b       	std	Y+17, r27	; 0x11
    425e:	63 c0       	rjmp	.+198    	; 0x4326 <_pow+0x114>
    else if (b < 0)
    4260:	89 85       	ldd	r24, Y+9	; 0x09
    4262:	88 23       	and	r24, r24
    4264:	dc f4       	brge	.+54     	; 0x429c <_pow+0x8a>
        return 1 / _pow(a, -b);
    4266:	89 85       	ldd	r24, Y+9	; 0x09
    4268:	28 2f       	mov	r18, r24
    426a:	21 95       	neg	r18
    426c:	8d 81       	ldd	r24, Y+5	; 0x05
    426e:	9e 81       	ldd	r25, Y+6	; 0x06
    4270:	af 81       	ldd	r26, Y+7	; 0x07
    4272:	b8 85       	ldd	r27, Y+8	; 0x08
    4274:	bc 01       	movw	r22, r24
    4276:	cd 01       	movw	r24, r26
    4278:	42 2f       	mov	r20, r18
    427a:	0e 94 09 21 	call	0x4212	; 0x4212 <_pow>
    427e:	9b 01       	movw	r18, r22
    4280:	ac 01       	movw	r20, r24
    4282:	60 e0       	ldi	r22, 0x00	; 0
    4284:	70 e0       	ldi	r23, 0x00	; 0
    4286:	80 e8       	ldi	r24, 0x80	; 128
    4288:	9f e3       	ldi	r25, 0x3F	; 63
    428a:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    428e:	dc 01       	movw	r26, r24
    4290:	cb 01       	movw	r24, r22
    4292:	8e 87       	std	Y+14, r24	; 0x0e
    4294:	9f 87       	std	Y+15, r25	; 0x0f
    4296:	a8 8b       	std	Y+16, r26	; 0x10
    4298:	b9 8b       	std	Y+17, r27	; 0x11
    429a:	45 c0       	rjmp	.+138    	; 0x4326 <_pow+0x114>
    else {
        float temp = _pow(a * a, b / 2);
    429c:	6d 81       	ldd	r22, Y+5	; 0x05
    429e:	7e 81       	ldd	r23, Y+6	; 0x06
    42a0:	8f 81       	ldd	r24, Y+7	; 0x07
    42a2:	98 85       	ldd	r25, Y+8	; 0x08
    42a4:	2d 81       	ldd	r18, Y+5	; 0x05
    42a6:	3e 81       	ldd	r19, Y+6	; 0x06
    42a8:	4f 81       	ldd	r20, Y+7	; 0x07
    42aa:	58 85       	ldd	r21, Y+8	; 0x08
    42ac:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    42b0:	dc 01       	movw	r26, r24
    42b2:	cb 01       	movw	r24, r22
    42b4:	8a 87       	std	Y+10, r24	; 0x0a
    42b6:	9b 87       	std	Y+11, r25	; 0x0b
    42b8:	ac 87       	std	Y+12, r26	; 0x0c
    42ba:	bd 87       	std	Y+13, r27	; 0x0d
    42bc:	89 85       	ldd	r24, Y+9	; 0x09
    42be:	8a 8b       	std	Y+18, r24	; 0x12
    42c0:	9a 89       	ldd	r25, Y+18	; 0x12
    42c2:	99 23       	and	r25, r25
    42c4:	1c f4       	brge	.+6      	; 0x42cc <_pow+0xba>
    42c6:	aa 89       	ldd	r26, Y+18	; 0x12
    42c8:	af 5f       	subi	r26, 0xFF	; 255
    42ca:	aa 8b       	std	Y+18, r26	; 0x12
    42cc:	8a 89       	ldd	r24, Y+18	; 0x12
    42ce:	85 95       	asr	r24
    42d0:	28 2f       	mov	r18, r24
    42d2:	6a 85       	ldd	r22, Y+10	; 0x0a
    42d4:	7b 85       	ldd	r23, Y+11	; 0x0b
    42d6:	8c 85       	ldd	r24, Y+12	; 0x0c
    42d8:	9d 85       	ldd	r25, Y+13	; 0x0d
    42da:	42 2f       	mov	r20, r18
    42dc:	0e 94 09 21 	call	0x4212	; 0x4212 <_pow>
    42e0:	dc 01       	movw	r26, r24
    42e2:	cb 01       	movw	r24, r22
    42e4:	89 83       	std	Y+1, r24	; 0x01
    42e6:	9a 83       	std	Y+2, r25	; 0x02
    42e8:	ab 83       	std	Y+3, r26	; 0x03
    42ea:	bc 83       	std	Y+4, r27	; 0x04
        if ((int)b % 2 == 0)
    42ec:	89 85       	ldd	r24, Y+9	; 0x09
    42ee:	81 70       	andi	r24, 0x01	; 1
    42f0:	88 23       	and	r24, r24
    42f2:	49 f4       	brne	.+18     	; 0x4306 <_pow+0xf4>
            return temp;
    42f4:	89 81       	ldd	r24, Y+1	; 0x01
    42f6:	9a 81       	ldd	r25, Y+2	; 0x02
    42f8:	ab 81       	ldd	r26, Y+3	; 0x03
    42fa:	bc 81       	ldd	r27, Y+4	; 0x04
    42fc:	8e 87       	std	Y+14, r24	; 0x0e
    42fe:	9f 87       	std	Y+15, r25	; 0x0f
    4300:	a8 8b       	std	Y+16, r26	; 0x10
    4302:	b9 8b       	std	Y+17, r27	; 0x11
    4304:	10 c0       	rjmp	.+32     	; 0x4326 <_pow+0x114>
        else
            return a * temp;
    4306:	6d 81       	ldd	r22, Y+5	; 0x05
    4308:	7e 81       	ldd	r23, Y+6	; 0x06
    430a:	8f 81       	ldd	r24, Y+7	; 0x07
    430c:	98 85       	ldd	r25, Y+8	; 0x08
    430e:	29 81       	ldd	r18, Y+1	; 0x01
    4310:	3a 81       	ldd	r19, Y+2	; 0x02
    4312:	4b 81       	ldd	r20, Y+3	; 0x03
    4314:	5c 81       	ldd	r21, Y+4	; 0x04
    4316:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    431a:	dc 01       	movw	r26, r24
    431c:	cb 01       	movw	r24, r22
    431e:	8e 87       	std	Y+14, r24	; 0x0e
    4320:	9f 87       	std	Y+15, r25	; 0x0f
    4322:	a8 8b       	std	Y+16, r26	; 0x10
    4324:	b9 8b       	std	Y+17, r27	; 0x11
    4326:	8e 85       	ldd	r24, Y+14	; 0x0e
    4328:	9f 85       	ldd	r25, Y+15	; 0x0f
    432a:	a8 89       	ldd	r26, Y+16	; 0x10
    432c:	b9 89       	ldd	r27, Y+17	; 0x11
    }
}
    432e:	bc 01       	movw	r22, r24
    4330:	cd 01       	movw	r24, r26
    4332:	62 96       	adiw	r28, 0x12	; 18
    4334:	0f b6       	in	r0, 0x3f	; 63
    4336:	f8 94       	cli
    4338:	de bf       	out	0x3e, r29	; 62
    433a:	0f be       	out	0x3f, r0	; 63
    433c:	cd bf       	out	0x3d, r28	; 61
    433e:	cf 91       	pop	r28
    4340:	df 91       	pop	r29
    4342:	08 95       	ret

00004344 <_cos>:

float _cos(float x)
{
    4344:	df 93       	push	r29
    4346:	cf 93       	push	r28
    4348:	cd b7       	in	r28, 0x3d	; 61
    434a:	de b7       	in	r29, 0x3e	; 62
    434c:	6b 97       	sbiw	r28, 0x1b	; 27
    434e:	0f b6       	in	r0, 0x3f	; 63
    4350:	f8 94       	cli
    4352:	de bf       	out	0x3e, r29	; 62
    4354:	0f be       	out	0x3f, r0	; 63
    4356:	cd bf       	out	0x3d, r28	; 61
    4358:	6a 8b       	std	Y+18, r22	; 0x12
    435a:	7b 8b       	std	Y+19, r23	; 0x13
    435c:	8c 8b       	std	Y+20, r24	; 0x14
    435e:	9d 8b       	std	Y+21, r25	; 0x15
    4360:	10 c0       	rjmp	.+32     	; 0x4382 <_cos+0x3e>
    while (x < -M_PI) x += 2 * M_PI;
    4362:	6a 89       	ldd	r22, Y+18	; 0x12
    4364:	7b 89       	ldd	r23, Y+19	; 0x13
    4366:	8c 89       	ldd	r24, Y+20	; 0x14
    4368:	9d 89       	ldd	r25, Y+21	; 0x15
    436a:	2b ed       	ldi	r18, 0xDB	; 219
    436c:	3f e0       	ldi	r19, 0x0F	; 15
    436e:	49 ec       	ldi	r20, 0xC9	; 201
    4370:	50 e4       	ldi	r21, 0x40	; 64
    4372:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__addsf3>
    4376:	dc 01       	movw	r26, r24
    4378:	cb 01       	movw	r24, r22
    437a:	8a 8b       	std	Y+18, r24	; 0x12
    437c:	9b 8b       	std	Y+19, r25	; 0x13
    437e:	ac 8b       	std	Y+20, r26	; 0x14
    4380:	bd 8b       	std	Y+21, r27	; 0x15
    4382:	6a 89       	ldd	r22, Y+18	; 0x12
    4384:	7b 89       	ldd	r23, Y+19	; 0x13
    4386:	8c 89       	ldd	r24, Y+20	; 0x14
    4388:	9d 89       	ldd	r25, Y+21	; 0x15
    438a:	2b ed       	ldi	r18, 0xDB	; 219
    438c:	3f e0       	ldi	r19, 0x0F	; 15
    438e:	49 e4       	ldi	r20, 0x49	; 73
    4390:	50 ec       	ldi	r21, 0xC0	; 192
    4392:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    4396:	88 23       	and	r24, r24
    4398:	24 f3       	brlt	.-56     	; 0x4362 <_cos+0x1e>
    439a:	10 c0       	rjmp	.+32     	; 0x43bc <_cos+0x78>
    while (x > M_PI) x -= 2 * M_PI;
    439c:	6a 89       	ldd	r22, Y+18	; 0x12
    439e:	7b 89       	ldd	r23, Y+19	; 0x13
    43a0:	8c 89       	ldd	r24, Y+20	; 0x14
    43a2:	9d 89       	ldd	r25, Y+21	; 0x15
    43a4:	2b ed       	ldi	r18, 0xDB	; 219
    43a6:	3f e0       	ldi	r19, 0x0F	; 15
    43a8:	49 ec       	ldi	r20, 0xC9	; 201
    43aa:	50 e4       	ldi	r21, 0x40	; 64
    43ac:	0e 94 bf 02 	call	0x57e	; 0x57e <__subsf3>
    43b0:	dc 01       	movw	r26, r24
    43b2:	cb 01       	movw	r24, r22
    43b4:	8a 8b       	std	Y+18, r24	; 0x12
    43b6:	9b 8b       	std	Y+19, r25	; 0x13
    43b8:	ac 8b       	std	Y+20, r26	; 0x14
    43ba:	bd 8b       	std	Y+21, r27	; 0x15
    43bc:	6a 89       	ldd	r22, Y+18	; 0x12
    43be:	7b 89       	ldd	r23, Y+19	; 0x13
    43c0:	8c 89       	ldd	r24, Y+20	; 0x14
    43c2:	9d 89       	ldd	r25, Y+21	; 0x15
    43c4:	2b ed       	ldi	r18, 0xDB	; 219
    43c6:	3f e0       	ldi	r19, 0x0F	; 15
    43c8:	49 e4       	ldi	r20, 0x49	; 73
    43ca:	50 e4       	ldi	r21, 0x40	; 64
    43cc:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    43d0:	18 16       	cp	r1, r24
    43d2:	24 f3       	brlt	.-56     	; 0x439c <_cos+0x58>

    u8 f =0;
    43d4:	19 8a       	std	Y+17, r1	; 0x11

    if((x > 3*M_PI/2.0 && x < 2*M_PI) || (x<0 && x>= -1*M_PI/2)) {
    43d6:	1b 8e       	std	Y+27, r1	; 0x1b
    43d8:	6a 89       	ldd	r22, Y+18	; 0x12
    43da:	7b 89       	ldd	r23, Y+19	; 0x13
    43dc:	8c 89       	ldd	r24, Y+20	; 0x14
    43de:	9d 89       	ldd	r25, Y+21	; 0x15
    43e0:	24 ee       	ldi	r18, 0xE4	; 228
    43e2:	3b ec       	ldi	r19, 0xCB	; 203
    43e4:	46 e9       	ldi	r20, 0x96	; 150
    43e6:	50 e4       	ldi	r21, 0x40	; 64
    43e8:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    43ec:	18 16       	cp	r1, r24
    43ee:	14 f4       	brge	.+4      	; 0x43f4 <_cos+0xb0>
    43f0:	21 e0       	ldi	r18, 0x01	; 1
    43f2:	2b 8f       	std	Y+27, r18	; 0x1b
    43f4:	81 e0       	ldi	r24, 0x01	; 1
    43f6:	3b 8d       	ldd	r19, Y+27	; 0x1b
    43f8:	83 27       	eor	r24, r19
    43fa:	88 23       	and	r24, r24
    43fc:	61 f4       	brne	.+24     	; 0x4416 <_cos+0xd2>
    43fe:	6a 89       	ldd	r22, Y+18	; 0x12
    4400:	7b 89       	ldd	r23, Y+19	; 0x13
    4402:	8c 89       	ldd	r24, Y+20	; 0x14
    4404:	9d 89       	ldd	r25, Y+21	; 0x15
    4406:	2b ed       	ldi	r18, 0xDB	; 219
    4408:	3f e0       	ldi	r19, 0x0F	; 15
    440a:	49 ec       	ldi	r20, 0xC9	; 201
    440c:	50 e4       	ldi	r21, 0x40	; 64
    440e:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    4412:	88 23       	and	r24, r24
    4414:	04 f1       	brlt	.+64     	; 0x4456 <_cos+0x112>
    4416:	1a 8e       	std	Y+26, r1	; 0x1a
    4418:	6a 89       	ldd	r22, Y+18	; 0x12
    441a:	7b 89       	ldd	r23, Y+19	; 0x13
    441c:	8c 89       	ldd	r24, Y+20	; 0x14
    441e:	9d 89       	ldd	r25, Y+21	; 0x15
    4420:	20 e0       	ldi	r18, 0x00	; 0
    4422:	30 e0       	ldi	r19, 0x00	; 0
    4424:	40 e0       	ldi	r20, 0x00	; 0
    4426:	50 e0       	ldi	r21, 0x00	; 0
    4428:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    442c:	88 23       	and	r24, r24
    442e:	14 f4       	brge	.+4      	; 0x4434 <_cos+0xf0>
    4430:	41 e0       	ldi	r20, 0x01	; 1
    4432:	4a 8f       	std	Y+26, r20	; 0x1a
    4434:	81 e0       	ldi	r24, 0x01	; 1
    4436:	5a 8d       	ldd	r21, Y+26	; 0x1a
    4438:	85 27       	eor	r24, r21
    443a:	88 23       	and	r24, r24
    443c:	f1 f4       	brne	.+60     	; 0x447a <_cos+0x136>
    443e:	6a 89       	ldd	r22, Y+18	; 0x12
    4440:	7b 89       	ldd	r23, Y+19	; 0x13
    4442:	8c 89       	ldd	r24, Y+20	; 0x14
    4444:	9d 89       	ldd	r25, Y+21	; 0x15
    4446:	2b ed       	ldi	r18, 0xDB	; 219
    4448:	3f e0       	ldi	r19, 0x0F	; 15
    444a:	49 ec       	ldi	r20, 0xC9	; 201
    444c:	5f eb       	ldi	r21, 0xBF	; 191
    444e:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__gesf2>
    4452:	88 23       	and	r24, r24
    4454:	94 f0       	brlt	.+36     	; 0x447a <_cos+0x136>
    	x = 2.0*M_PI + x ;
    4456:	6a 89       	ldd	r22, Y+18	; 0x12
    4458:	7b 89       	ldd	r23, Y+19	; 0x13
    445a:	8c 89       	ldd	r24, Y+20	; 0x14
    445c:	9d 89       	ldd	r25, Y+21	; 0x15
    445e:	2b ed       	ldi	r18, 0xDB	; 219
    4460:	3f e0       	ldi	r19, 0x0F	; 15
    4462:	49 ec       	ldi	r20, 0xC9	; 201
    4464:	50 e4       	ldi	r21, 0x40	; 64
    4466:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__addsf3>
    446a:	dc 01       	movw	r26, r24
    446c:	cb 01       	movw	r24, r22
    446e:	8a 8b       	std	Y+18, r24	; 0x12
    4470:	9b 8b       	std	Y+19, r25	; 0x13
    4472:	ac 8b       	std	Y+20, r26	; 0x14
    4474:	bd 8b       	std	Y+21, r27	; 0x15
    	f=2;
    4476:	82 e0       	ldi	r24, 0x02	; 2
    4478:	89 8b       	std	Y+17, r24	; 0x11
    }


    if(x > 0 && x < M_PI/2) {
    447a:	6a 89       	ldd	r22, Y+18	; 0x12
    447c:	7b 89       	ldd	r23, Y+19	; 0x13
    447e:	8c 89       	ldd	r24, Y+20	; 0x14
    4480:	9d 89       	ldd	r25, Y+21	; 0x15
    4482:	20 e0       	ldi	r18, 0x00	; 0
    4484:	30 e0       	ldi	r19, 0x00	; 0
    4486:	40 e0       	ldi	r20, 0x00	; 0
    4488:	50 e0       	ldi	r21, 0x00	; 0
    448a:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    448e:	18 16       	cp	r1, r24
    4490:	f4 f4       	brge	.+60     	; 0x44ce <_cos+0x18a>
    4492:	6a 89       	ldd	r22, Y+18	; 0x12
    4494:	7b 89       	ldd	r23, Y+19	; 0x13
    4496:	8c 89       	ldd	r24, Y+20	; 0x14
    4498:	9d 89       	ldd	r25, Y+21	; 0x15
    449a:	2b ed       	ldi	r18, 0xDB	; 219
    449c:	3f e0       	ldi	r19, 0x0F	; 15
    449e:	49 ec       	ldi	r20, 0xC9	; 201
    44a0:	5f e3       	ldi	r21, 0x3F	; 63
    44a2:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    44a6:	88 23       	and	r24, r24
    44a8:	94 f4       	brge	.+36     	; 0x44ce <_cos+0x18a>
    	x = M_PI -x ;
    44aa:	6b ed       	ldi	r22, 0xDB	; 219
    44ac:	7f e0       	ldi	r23, 0x0F	; 15
    44ae:	89 e4       	ldi	r24, 0x49	; 73
    44b0:	90 e4       	ldi	r25, 0x40	; 64
    44b2:	2a 89       	ldd	r18, Y+18	; 0x12
    44b4:	3b 89       	ldd	r19, Y+19	; 0x13
    44b6:	4c 89       	ldd	r20, Y+20	; 0x14
    44b8:	5d 89       	ldd	r21, Y+21	; 0x15
    44ba:	0e 94 bf 02 	call	0x57e	; 0x57e <__subsf3>
    44be:	dc 01       	movw	r26, r24
    44c0:	cb 01       	movw	r24, r22
    44c2:	8a 8b       	std	Y+18, r24	; 0x12
    44c4:	9b 8b       	std	Y+19, r25	; 0x13
    44c6:	ac 8b       	std	Y+20, r26	; 0x14
    44c8:	bd 8b       	std	Y+21, r27	; 0x15
    	f=1;
    44ca:	81 e0       	ldi	r24, 0x01	; 1
    44cc:	89 8b       	std	Y+17, r24	; 0x11
    }


    double result = 1.0;
    44ce:	80 e0       	ldi	r24, 0x00	; 0
    44d0:	90 e0       	ldi	r25, 0x00	; 0
    44d2:	a0 e8       	ldi	r26, 0x80	; 128
    44d4:	bf e3       	ldi	r27, 0x3F	; 63
    44d6:	8d 87       	std	Y+13, r24	; 0x0d
    44d8:	9e 87       	std	Y+14, r25	; 0x0e
    44da:	af 87       	std	Y+15, r26	; 0x0f
    44dc:	b8 8b       	std	Y+16, r27	; 0x10
    double term = 1.0;
    44de:	80 e0       	ldi	r24, 0x00	; 0
    44e0:	90 e0       	ldi	r25, 0x00	; 0
    44e2:	a0 e8       	ldi	r26, 0x80	; 128
    44e4:	bf e3       	ldi	r27, 0x3F	; 63
    44e6:	89 87       	std	Y+9, r24	; 0x09
    44e8:	9a 87       	std	Y+10, r25	; 0x0a
    44ea:	ab 87       	std	Y+11, r26	; 0x0b
    44ec:	bc 87       	std	Y+12, r27	; 0x0c
    double x_squared = x * x;
    44ee:	6a 89       	ldd	r22, Y+18	; 0x12
    44f0:	7b 89       	ldd	r23, Y+19	; 0x13
    44f2:	8c 89       	ldd	r24, Y+20	; 0x14
    44f4:	9d 89       	ldd	r25, Y+21	; 0x15
    44f6:	2a 89       	ldd	r18, Y+18	; 0x12
    44f8:	3b 89       	ldd	r19, Y+19	; 0x13
    44fa:	4c 89       	ldd	r20, Y+20	; 0x14
    44fc:	5d 89       	ldd	r21, Y+21	; 0x15
    44fe:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    4502:	dc 01       	movw	r26, r24
    4504:	cb 01       	movw	r24, r22
    4506:	8d 83       	std	Y+5, r24	; 0x05
    4508:	9e 83       	std	Y+6, r25	; 0x06
    450a:	af 83       	std	Y+7, r26	; 0x07
    450c:	b8 87       	std	Y+8, r27	; 0x08
    int sign = -1;
    450e:	8f ef       	ldi	r24, 0xFF	; 255
    4510:	9f ef       	ldi	r25, 0xFF	; 255
    4512:	9c 83       	std	Y+4, r25	; 0x04
    4514:	8b 83       	std	Y+3, r24	; 0x03

    for (int i = 2; i <= 20; i += 2) {
    4516:	82 e0       	ldi	r24, 0x02	; 2
    4518:	90 e0       	ldi	r25, 0x00	; 0
    451a:	9a 83       	std	Y+2, r25	; 0x02
    451c:	89 83       	std	Y+1, r24	; 0x01
    451e:	5f c0       	rjmp	.+190    	; 0x45de <_cos+0x29a>
        term *= x_squared / ((i - 1) * i);
    4520:	89 81       	ldd	r24, Y+1	; 0x01
    4522:	9a 81       	ldd	r25, Y+2	; 0x02
    4524:	9c 01       	movw	r18, r24
    4526:	21 50       	subi	r18, 0x01	; 1
    4528:	30 40       	sbci	r19, 0x00	; 0
    452a:	89 81       	ldd	r24, Y+1	; 0x01
    452c:	9a 81       	ldd	r25, Y+2	; 0x02
    452e:	dc 01       	movw	r26, r24
    4530:	2a 9f       	mul	r18, r26
    4532:	c0 01       	movw	r24, r0
    4534:	2b 9f       	mul	r18, r27
    4536:	90 0d       	add	r25, r0
    4538:	3a 9f       	mul	r19, r26
    453a:	90 0d       	add	r25, r0
    453c:	11 24       	eor	r1, r1
    453e:	aa 27       	eor	r26, r26
    4540:	97 fd       	sbrc	r25, 7
    4542:	a0 95       	com	r26
    4544:	ba 2f       	mov	r27, r26
    4546:	bc 01       	movw	r22, r24
    4548:	cd 01       	movw	r24, r26
    454a:	0e 94 b3 05 	call	0xb66	; 0xb66 <__floatsisf>
    454e:	9b 01       	movw	r18, r22
    4550:	ac 01       	movw	r20, r24
    4552:	6d 81       	ldd	r22, Y+5	; 0x05
    4554:	7e 81       	ldd	r23, Y+6	; 0x06
    4556:	8f 81       	ldd	r24, Y+7	; 0x07
    4558:	98 85       	ldd	r25, Y+8	; 0x08
    455a:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    455e:	dc 01       	movw	r26, r24
    4560:	cb 01       	movw	r24, r22
    4562:	9c 01       	movw	r18, r24
    4564:	ad 01       	movw	r20, r26
    4566:	69 85       	ldd	r22, Y+9	; 0x09
    4568:	7a 85       	ldd	r23, Y+10	; 0x0a
    456a:	8b 85       	ldd	r24, Y+11	; 0x0b
    456c:	9c 85       	ldd	r25, Y+12	; 0x0c
    456e:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    4572:	dc 01       	movw	r26, r24
    4574:	cb 01       	movw	r24, r22
    4576:	89 87       	std	Y+9, r24	; 0x09
    4578:	9a 87       	std	Y+10, r25	; 0x0a
    457a:	ab 87       	std	Y+11, r26	; 0x0b
    457c:	bc 87       	std	Y+12, r27	; 0x0c
        result += sign * term;
    457e:	8b 81       	ldd	r24, Y+3	; 0x03
    4580:	9c 81       	ldd	r25, Y+4	; 0x04
    4582:	aa 27       	eor	r26, r26
    4584:	97 fd       	sbrc	r25, 7
    4586:	a0 95       	com	r26
    4588:	ba 2f       	mov	r27, r26
    458a:	bc 01       	movw	r22, r24
    458c:	cd 01       	movw	r24, r26
    458e:	0e 94 b3 05 	call	0xb66	; 0xb66 <__floatsisf>
    4592:	dc 01       	movw	r26, r24
    4594:	cb 01       	movw	r24, r22
    4596:	bc 01       	movw	r22, r24
    4598:	cd 01       	movw	r24, r26
    459a:	29 85       	ldd	r18, Y+9	; 0x09
    459c:	3a 85       	ldd	r19, Y+10	; 0x0a
    459e:	4b 85       	ldd	r20, Y+11	; 0x0b
    45a0:	5c 85       	ldd	r21, Y+12	; 0x0c
    45a2:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    45a6:	dc 01       	movw	r26, r24
    45a8:	cb 01       	movw	r24, r22
    45aa:	9c 01       	movw	r18, r24
    45ac:	ad 01       	movw	r20, r26
    45ae:	6d 85       	ldd	r22, Y+13	; 0x0d
    45b0:	7e 85       	ldd	r23, Y+14	; 0x0e
    45b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    45b4:	98 89       	ldd	r25, Y+16	; 0x10
    45b6:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__addsf3>
    45ba:	dc 01       	movw	r26, r24
    45bc:	cb 01       	movw	r24, r22
    45be:	8d 87       	std	Y+13, r24	; 0x0d
    45c0:	9e 87       	std	Y+14, r25	; 0x0e
    45c2:	af 87       	std	Y+15, r26	; 0x0f
    45c4:	b8 8b       	std	Y+16, r27	; 0x10
        sign *= -1;
    45c6:	8b 81       	ldd	r24, Y+3	; 0x03
    45c8:	9c 81       	ldd	r25, Y+4	; 0x04
    45ca:	90 95       	com	r25
    45cc:	81 95       	neg	r24
    45ce:	9f 4f       	sbci	r25, 0xFF	; 255
    45d0:	9c 83       	std	Y+4, r25	; 0x04
    45d2:	8b 83       	std	Y+3, r24	; 0x03
    double result = 1.0;
    double term = 1.0;
    double x_squared = x * x;
    int sign = -1;

    for (int i = 2; i <= 20; i += 2) {
    45d4:	89 81       	ldd	r24, Y+1	; 0x01
    45d6:	9a 81       	ldd	r25, Y+2	; 0x02
    45d8:	02 96       	adiw	r24, 0x02	; 2
    45da:	9a 83       	std	Y+2, r25	; 0x02
    45dc:	89 83       	std	Y+1, r24	; 0x01
    45de:	89 81       	ldd	r24, Y+1	; 0x01
    45e0:	9a 81       	ldd	r25, Y+2	; 0x02
    45e2:	85 31       	cpi	r24, 0x15	; 21
    45e4:	91 05       	cpc	r25, r1
    45e6:	0c f4       	brge	.+2      	; 0x45ea <_cos+0x2a6>
    45e8:	9b cf       	rjmp	.-202    	; 0x4520 <_cos+0x1dc>
        term *= x_squared / ((i - 1) * i);
        result += sign * term;
        sign *= -1;
    }

    if(result > -0.0001 && result < 0.0001 ) return 0;
    45ea:	6d 85       	ldd	r22, Y+13	; 0x0d
    45ec:	7e 85       	ldd	r23, Y+14	; 0x0e
    45ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    45f0:	98 89       	ldd	r25, Y+16	; 0x10
    45f2:	27 e1       	ldi	r18, 0x17	; 23
    45f4:	37 eb       	ldi	r19, 0xB7	; 183
    45f6:	41 ed       	ldi	r20, 0xD1	; 209
    45f8:	58 eb       	ldi	r21, 0xB8	; 184
    45fa:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    45fe:	18 16       	cp	r1, r24
    4600:	ac f4       	brge	.+42     	; 0x462c <_cos+0x2e8>
    4602:	6d 85       	ldd	r22, Y+13	; 0x0d
    4604:	7e 85       	ldd	r23, Y+14	; 0x0e
    4606:	8f 85       	ldd	r24, Y+15	; 0x0f
    4608:	98 89       	ldd	r25, Y+16	; 0x10
    460a:	27 e1       	ldi	r18, 0x17	; 23
    460c:	37 eb       	ldi	r19, 0xB7	; 183
    460e:	41 ed       	ldi	r20, 0xD1	; 209
    4610:	58 e3       	ldi	r21, 0x38	; 56
    4612:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    4616:	88 23       	and	r24, r24
    4618:	4c f4       	brge	.+18     	; 0x462c <_cos+0x2e8>
    461a:	20 e0       	ldi	r18, 0x00	; 0
    461c:	30 e0       	ldi	r19, 0x00	; 0
    461e:	40 e0       	ldi	r20, 0x00	; 0
    4620:	50 e0       	ldi	r21, 0x00	; 0
    4622:	2e 8b       	std	Y+22, r18	; 0x16
    4624:	3f 8b       	std	Y+23, r19	; 0x17
    4626:	48 8f       	std	Y+24, r20	; 0x18
    4628:	59 8f       	std	Y+25, r21	; 0x19
    462a:	17 c0       	rjmp	.+46     	; 0x465a <_cos+0x316>

    if(f==1) return -1*result;
    462c:	89 89       	ldd	r24, Y+17	; 0x11
    462e:	81 30       	cpi	r24, 0x01	; 1
    4630:	61 f4       	brne	.+24     	; 0x464a <_cos+0x306>
    4632:	8d 85       	ldd	r24, Y+13	; 0x0d
    4634:	9e 85       	ldd	r25, Y+14	; 0x0e
    4636:	af 85       	ldd	r26, Y+15	; 0x0f
    4638:	b8 89       	ldd	r27, Y+16	; 0x10
    463a:	9c 01       	movw	r18, r24
    463c:	ad 01       	movw	r20, r26
    463e:	50 58       	subi	r21, 0x80	; 128
    4640:	2e 8b       	std	Y+22, r18	; 0x16
    4642:	3f 8b       	std	Y+23, r19	; 0x17
    4644:	48 8f       	std	Y+24, r20	; 0x18
    4646:	59 8f       	std	Y+25, r21	; 0x19
    4648:	08 c0       	rjmp	.+16     	; 0x465a <_cos+0x316>
    return result;
    464a:	8d 85       	ldd	r24, Y+13	; 0x0d
    464c:	9e 85       	ldd	r25, Y+14	; 0x0e
    464e:	af 85       	ldd	r26, Y+15	; 0x0f
    4650:	b8 89       	ldd	r27, Y+16	; 0x10
    4652:	8e 8b       	std	Y+22, r24	; 0x16
    4654:	9f 8b       	std	Y+23, r25	; 0x17
    4656:	a8 8f       	std	Y+24, r26	; 0x18
    4658:	b9 8f       	std	Y+25, r27	; 0x19
    465a:	8e 89       	ldd	r24, Y+22	; 0x16
    465c:	9f 89       	ldd	r25, Y+23	; 0x17
    465e:	a8 8d       	ldd	r26, Y+24	; 0x18
    4660:	b9 8d       	ldd	r27, Y+25	; 0x19
}
    4662:	bc 01       	movw	r22, r24
    4664:	cd 01       	movw	r24, r26
    4666:	6b 96       	adiw	r28, 0x1b	; 27
    4668:	0f b6       	in	r0, 0x3f	; 63
    466a:	f8 94       	cli
    466c:	de bf       	out	0x3e, r29	; 62
    466e:	0f be       	out	0x3f, r0	; 63
    4670:	cd bf       	out	0x3d, r28	; 61
    4672:	cf 91       	pop	r28
    4674:	df 91       	pop	r29
    4676:	08 95       	ret

00004678 <_sin>:

float _sin(float x)
{
    4678:	df 93       	push	r29
    467a:	cf 93       	push	r28
    467c:	00 d0       	rcall	.+0      	; 0x467e <_sin+0x6>
    467e:	00 d0       	rcall	.+0      	; 0x4680 <_sin+0x8>
    4680:	cd b7       	in	r28, 0x3d	; 61
    4682:	de b7       	in	r29, 0x3e	; 62
    4684:	69 83       	std	Y+1, r22	; 0x01
    4686:	7a 83       	std	Y+2, r23	; 0x02
    4688:	8b 83       	std	Y+3, r24	; 0x03
    468a:	9c 83       	std	Y+4, r25	; 0x04
	return -1 * _cos((M_PI/2) + x);
    468c:	69 81       	ldd	r22, Y+1	; 0x01
    468e:	7a 81       	ldd	r23, Y+2	; 0x02
    4690:	8b 81       	ldd	r24, Y+3	; 0x03
    4692:	9c 81       	ldd	r25, Y+4	; 0x04
    4694:	2b ed       	ldi	r18, 0xDB	; 219
    4696:	3f e0       	ldi	r19, 0x0F	; 15
    4698:	49 ec       	ldi	r20, 0xC9	; 201
    469a:	5f e3       	ldi	r21, 0x3F	; 63
    469c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__addsf3>
    46a0:	dc 01       	movw	r26, r24
    46a2:	cb 01       	movw	r24, r22
    46a4:	bc 01       	movw	r22, r24
    46a6:	cd 01       	movw	r24, r26
    46a8:	0e 94 a2 21 	call	0x4344	; 0x4344 <_cos>
    46ac:	dc 01       	movw	r26, r24
    46ae:	cb 01       	movw	r24, r22
    46b0:	b0 58       	subi	r27, 0x80	; 128
}
    46b2:	bc 01       	movw	r22, r24
    46b4:	cd 01       	movw	r24, r26
    46b6:	0f 90       	pop	r0
    46b8:	0f 90       	pop	r0
    46ba:	0f 90       	pop	r0
    46bc:	0f 90       	pop	r0
    46be:	cf 91       	pop	r28
    46c0:	df 91       	pop	r29
    46c2:	08 95       	ret

000046c4 <_tan>:

float _tan(float x)
{
    46c4:	ef 92       	push	r14
    46c6:	ff 92       	push	r15
    46c8:	0f 93       	push	r16
    46ca:	1f 93       	push	r17
    46cc:	df 93       	push	r29
    46ce:	cf 93       	push	r28
    46d0:	00 d0       	rcall	.+0      	; 0x46d2 <_tan+0xe>
    46d2:	00 d0       	rcall	.+0      	; 0x46d4 <_tan+0x10>
    46d4:	cd b7       	in	r28, 0x3d	; 61
    46d6:	de b7       	in	r29, 0x3e	; 62
    46d8:	69 83       	std	Y+1, r22	; 0x01
    46da:	7a 83       	std	Y+2, r23	; 0x02
    46dc:	8b 83       	std	Y+3, r24	; 0x03
    46de:	9c 83       	std	Y+4, r25	; 0x04
	return (_sin(x)/_cos(x));
    46e0:	89 81       	ldd	r24, Y+1	; 0x01
    46e2:	9a 81       	ldd	r25, Y+2	; 0x02
    46e4:	ab 81       	ldd	r26, Y+3	; 0x03
    46e6:	bc 81       	ldd	r27, Y+4	; 0x04
    46e8:	bc 01       	movw	r22, r24
    46ea:	cd 01       	movw	r24, r26
    46ec:	0e 94 3c 23 	call	0x4678	; 0x4678 <_sin>
    46f0:	7b 01       	movw	r14, r22
    46f2:	8c 01       	movw	r16, r24
    46f4:	89 81       	ldd	r24, Y+1	; 0x01
    46f6:	9a 81       	ldd	r25, Y+2	; 0x02
    46f8:	ab 81       	ldd	r26, Y+3	; 0x03
    46fa:	bc 81       	ldd	r27, Y+4	; 0x04
    46fc:	bc 01       	movw	r22, r24
    46fe:	cd 01       	movw	r24, r26
    4700:	0e 94 a2 21 	call	0x4344	; 0x4344 <_cos>
    4704:	9b 01       	movw	r18, r22
    4706:	ac 01       	movw	r20, r24
    4708:	c8 01       	movw	r24, r16
    470a:	b7 01       	movw	r22, r14
    470c:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    4710:	dc 01       	movw	r26, r24
    4712:	cb 01       	movw	r24, r22
}
    4714:	bc 01       	movw	r22, r24
    4716:	cd 01       	movw	r24, r26
    4718:	0f 90       	pop	r0
    471a:	0f 90       	pop	r0
    471c:	0f 90       	pop	r0
    471e:	0f 90       	pop	r0
    4720:	cf 91       	pop	r28
    4722:	df 91       	pop	r29
    4724:	1f 91       	pop	r17
    4726:	0f 91       	pop	r16
    4728:	ff 90       	pop	r15
    472a:	ef 90       	pop	r14
    472c:	08 95       	ret

0000472e <expo>:

float expo(float n)
{
    472e:	ef 92       	push	r14
    4730:	ff 92       	push	r15
    4732:	0f 93       	push	r16
    4734:	1f 93       	push	r17
    4736:	df 93       	push	r29
    4738:	cf 93       	push	r28
    473a:	cd b7       	in	r28, 0x3d	; 61
    473c:	de b7       	in	r29, 0x3e	; 62
    473e:	69 97       	sbiw	r28, 0x19	; 25
    4740:	0f b6       	in	r0, 0x3f	; 63
    4742:	f8 94       	cli
    4744:	de bf       	out	0x3e, r29	; 62
    4746:	0f be       	out	0x3f, r0	; 63
    4748:	cd bf       	out	0x3d, r28	; 61
    474a:	69 8b       	std	Y+17, r22	; 0x11
    474c:	7a 8b       	std	Y+18, r23	; 0x12
    474e:	8b 8b       	std	Y+19, r24	; 0x13
    4750:	9c 8b       	std	Y+20, r25	; 0x14
    int a = 0, b = n > 0;
    4752:	18 8a       	std	Y+16, r1	; 0x10
    4754:	1f 86       	std	Y+15, r1	; 0x0f
    4756:	1e 86       	std	Y+14, r1	; 0x0e
    4758:	1d 86       	std	Y+13, r1	; 0x0d
    475a:	69 89       	ldd	r22, Y+17	; 0x11
    475c:	7a 89       	ldd	r23, Y+18	; 0x12
    475e:	8b 89       	ldd	r24, Y+19	; 0x13
    4760:	9c 89       	ldd	r25, Y+20	; 0x14
    4762:	20 e0       	ldi	r18, 0x00	; 0
    4764:	30 e0       	ldi	r19, 0x00	; 0
    4766:	40 e0       	ldi	r20, 0x00	; 0
    4768:	50 e0       	ldi	r21, 0x00	; 0
    476a:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    476e:	18 16       	cp	r1, r24
    4770:	24 f4       	brge	.+8      	; 0x477a <expo+0x4c>
    4772:	81 e0       	ldi	r24, 0x01	; 1
    4774:	90 e0       	ldi	r25, 0x00	; 0
    4776:	9e 87       	std	Y+14, r25	; 0x0e
    4778:	8d 87       	std	Y+13, r24	; 0x0d
    float c = 1, d = 1, e = 1;
    477a:	80 e0       	ldi	r24, 0x00	; 0
    477c:	90 e0       	ldi	r25, 0x00	; 0
    477e:	a0 e8       	ldi	r26, 0x80	; 128
    4780:	bf e3       	ldi	r27, 0x3F	; 63
    4782:	89 87       	std	Y+9, r24	; 0x09
    4784:	9a 87       	std	Y+10, r25	; 0x0a
    4786:	ab 87       	std	Y+11, r26	; 0x0b
    4788:	bc 87       	std	Y+12, r27	; 0x0c
    478a:	80 e0       	ldi	r24, 0x00	; 0
    478c:	90 e0       	ldi	r25, 0x00	; 0
    478e:	a0 e8       	ldi	r26, 0x80	; 128
    4790:	bf e3       	ldi	r27, 0x3F	; 63
    4792:	8d 83       	std	Y+5, r24	; 0x05
    4794:	9e 83       	std	Y+6, r25	; 0x06
    4796:	af 83       	std	Y+7, r26	; 0x07
    4798:	b8 87       	std	Y+8, r27	; 0x08
    479a:	80 e0       	ldi	r24, 0x00	; 0
    479c:	90 e0       	ldi	r25, 0x00	; 0
    479e:	a0 e8       	ldi	r26, 0x80	; 128
    47a0:	bf e3       	ldi	r27, 0x3F	; 63
    47a2:	89 83       	std	Y+1, r24	; 0x01
    47a4:	9a 83       	std	Y+2, r25	; 0x02
    47a6:	ab 83       	std	Y+3, r26	; 0x03
    47a8:	bc 83       	std	Y+4, r27	; 0x04
    for (b || (n = -n); e + .00001 < (e += (d *= n) / (c *= ++a)););
    47aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    47ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    47ae:	00 97       	sbiw	r24, 0x00	; 0
    47b0:	a1 f4       	brne	.+40     	; 0x47da <expo+0xac>
    47b2:	89 89       	ldd	r24, Y+17	; 0x11
    47b4:	9a 89       	ldd	r25, Y+18	; 0x12
    47b6:	ab 89       	ldd	r26, Y+19	; 0x13
    47b8:	bc 89       	ldd	r27, Y+20	; 0x14
    47ba:	b0 58       	subi	r27, 0x80	; 128
    47bc:	89 8b       	std	Y+17, r24	; 0x11
    47be:	9a 8b       	std	Y+18, r25	; 0x12
    47c0:	ab 8b       	std	Y+19, r26	; 0x13
    47c2:	bc 8b       	std	Y+20, r27	; 0x14
    47c4:	69 89       	ldd	r22, Y+17	; 0x11
    47c6:	7a 89       	ldd	r23, Y+18	; 0x12
    47c8:	8b 89       	ldd	r24, Y+19	; 0x13
    47ca:	9c 89       	ldd	r25, Y+20	; 0x14
    47cc:	20 e0       	ldi	r18, 0x00	; 0
    47ce:	30 e0       	ldi	r19, 0x00	; 0
    47d0:	40 e0       	ldi	r20, 0x00	; 0
    47d2:	50 e0       	ldi	r21, 0x00	; 0
    47d4:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__nesf2>
    47d8:	89 8f       	std	Y+25, r24	; 0x19
    47da:	69 81       	ldd	r22, Y+1	; 0x01
    47dc:	7a 81       	ldd	r23, Y+2	; 0x02
    47de:	8b 81       	ldd	r24, Y+3	; 0x03
    47e0:	9c 81       	ldd	r25, Y+4	; 0x04
    47e2:	2c ea       	ldi	r18, 0xAC	; 172
    47e4:	35 ec       	ldi	r19, 0xC5	; 197
    47e6:	47 e2       	ldi	r20, 0x27	; 39
    47e8:	57 e3       	ldi	r21, 0x37	; 55
    47ea:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__addsf3>
    47ee:	dc 01       	movw	r26, r24
    47f0:	cb 01       	movw	r24, r22
    47f2:	7c 01       	movw	r14, r24
    47f4:	8d 01       	movw	r16, r26
    47f6:	6d 81       	ldd	r22, Y+5	; 0x05
    47f8:	7e 81       	ldd	r23, Y+6	; 0x06
    47fa:	8f 81       	ldd	r24, Y+7	; 0x07
    47fc:	98 85       	ldd	r25, Y+8	; 0x08
    47fe:	29 89       	ldd	r18, Y+17	; 0x11
    4800:	3a 89       	ldd	r19, Y+18	; 0x12
    4802:	4b 89       	ldd	r20, Y+19	; 0x13
    4804:	5c 89       	ldd	r21, Y+20	; 0x14
    4806:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    480a:	dc 01       	movw	r26, r24
    480c:	cb 01       	movw	r24, r22
    480e:	8d 83       	std	Y+5, r24	; 0x05
    4810:	9e 83       	std	Y+6, r25	; 0x06
    4812:	af 83       	std	Y+7, r26	; 0x07
    4814:	b8 87       	std	Y+8, r27	; 0x08
    4816:	8f 85       	ldd	r24, Y+15	; 0x0f
    4818:	98 89       	ldd	r25, Y+16	; 0x10
    481a:	01 96       	adiw	r24, 0x01	; 1
    481c:	98 8b       	std	Y+16, r25	; 0x10
    481e:	8f 87       	std	Y+15, r24	; 0x0f
    4820:	8f 85       	ldd	r24, Y+15	; 0x0f
    4822:	98 89       	ldd	r25, Y+16	; 0x10
    4824:	aa 27       	eor	r26, r26
    4826:	97 fd       	sbrc	r25, 7
    4828:	a0 95       	com	r26
    482a:	ba 2f       	mov	r27, r26
    482c:	bc 01       	movw	r22, r24
    482e:	cd 01       	movw	r24, r26
    4830:	0e 94 b3 05 	call	0xb66	; 0xb66 <__floatsisf>
    4834:	9b 01       	movw	r18, r22
    4836:	ac 01       	movw	r20, r24
    4838:	69 85       	ldd	r22, Y+9	; 0x09
    483a:	7a 85       	ldd	r23, Y+10	; 0x0a
    483c:	8b 85       	ldd	r24, Y+11	; 0x0b
    483e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4840:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    4844:	dc 01       	movw	r26, r24
    4846:	cb 01       	movw	r24, r22
    4848:	89 87       	std	Y+9, r24	; 0x09
    484a:	9a 87       	std	Y+10, r25	; 0x0a
    484c:	ab 87       	std	Y+11, r26	; 0x0b
    484e:	bc 87       	std	Y+12, r27	; 0x0c
    4850:	6d 81       	ldd	r22, Y+5	; 0x05
    4852:	7e 81       	ldd	r23, Y+6	; 0x06
    4854:	8f 81       	ldd	r24, Y+7	; 0x07
    4856:	98 85       	ldd	r25, Y+8	; 0x08
    4858:	29 85       	ldd	r18, Y+9	; 0x09
    485a:	3a 85       	ldd	r19, Y+10	; 0x0a
    485c:	4b 85       	ldd	r20, Y+11	; 0x0b
    485e:	5c 85       	ldd	r21, Y+12	; 0x0c
    4860:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    4864:	dc 01       	movw	r26, r24
    4866:	cb 01       	movw	r24, r22
    4868:	9c 01       	movw	r18, r24
    486a:	ad 01       	movw	r20, r26
    486c:	69 81       	ldd	r22, Y+1	; 0x01
    486e:	7a 81       	ldd	r23, Y+2	; 0x02
    4870:	8b 81       	ldd	r24, Y+3	; 0x03
    4872:	9c 81       	ldd	r25, Y+4	; 0x04
    4874:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__addsf3>
    4878:	dc 01       	movw	r26, r24
    487a:	cb 01       	movw	r24, r22
    487c:	89 83       	std	Y+1, r24	; 0x01
    487e:	9a 83       	std	Y+2, r25	; 0x02
    4880:	ab 83       	std	Y+3, r26	; 0x03
    4882:	bc 83       	std	Y+4, r27	; 0x04
    4884:	c8 01       	movw	r24, r16
    4886:	b7 01       	movw	r22, r14
    4888:	29 81       	ldd	r18, Y+1	; 0x01
    488a:	3a 81       	ldd	r19, Y+2	; 0x02
    488c:	4b 81       	ldd	r20, Y+3	; 0x03
    488e:	5c 81       	ldd	r21, Y+4	; 0x04
    4890:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    4894:	88 23       	and	r24, r24
    4896:	0c f4       	brge	.+2      	; 0x489a <expo+0x16c>
    4898:	a0 cf       	rjmp	.-192    	; 0x47da <expo+0xac>
    return b ? e : 1 / e;
    489a:	8d 85       	ldd	r24, Y+13	; 0x0d
    489c:	9e 85       	ldd	r25, Y+14	; 0x0e
    489e:	00 97       	sbiw	r24, 0x00	; 0
    48a0:	89 f4       	brne	.+34     	; 0x48c4 <expo+0x196>
    48a2:	60 e0       	ldi	r22, 0x00	; 0
    48a4:	70 e0       	ldi	r23, 0x00	; 0
    48a6:	80 e8       	ldi	r24, 0x80	; 128
    48a8:	9f e3       	ldi	r25, 0x3F	; 63
    48aa:	29 81       	ldd	r18, Y+1	; 0x01
    48ac:	3a 81       	ldd	r19, Y+2	; 0x02
    48ae:	4b 81       	ldd	r20, Y+3	; 0x03
    48b0:	5c 81       	ldd	r21, Y+4	; 0x04
    48b2:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    48b6:	dc 01       	movw	r26, r24
    48b8:	cb 01       	movw	r24, r22
    48ba:	8d 8b       	std	Y+21, r24	; 0x15
    48bc:	9e 8b       	std	Y+22, r25	; 0x16
    48be:	af 8b       	std	Y+23, r26	; 0x17
    48c0:	b8 8f       	std	Y+24, r27	; 0x18
    48c2:	08 c0       	rjmp	.+16     	; 0x48d4 <expo+0x1a6>
    48c4:	89 81       	ldd	r24, Y+1	; 0x01
    48c6:	9a 81       	ldd	r25, Y+2	; 0x02
    48c8:	ab 81       	ldd	r26, Y+3	; 0x03
    48ca:	bc 81       	ldd	r27, Y+4	; 0x04
    48cc:	8d 8b       	std	Y+21, r24	; 0x15
    48ce:	9e 8b       	std	Y+22, r25	; 0x16
    48d0:	af 8b       	std	Y+23, r26	; 0x17
    48d2:	b8 8f       	std	Y+24, r27	; 0x18
    48d4:	8d 89       	ldd	r24, Y+21	; 0x15
    48d6:	9e 89       	ldd	r25, Y+22	; 0x16
    48d8:	af 89       	ldd	r26, Y+23	; 0x17
    48da:	b8 8d       	ldd	r27, Y+24	; 0x18
}
    48dc:	bc 01       	movw	r22, r24
    48de:	cd 01       	movw	r24, r26
    48e0:	69 96       	adiw	r28, 0x19	; 25
    48e2:	0f b6       	in	r0, 0x3f	; 63
    48e4:	f8 94       	cli
    48e6:	de bf       	out	0x3e, r29	; 62
    48e8:	0f be       	out	0x3f, r0	; 63
    48ea:	cd bf       	out	0x3d, r28	; 61
    48ec:	cf 91       	pop	r28
    48ee:	df 91       	pop	r29
    48f0:	1f 91       	pop	r17
    48f2:	0f 91       	pop	r16
    48f4:	ff 90       	pop	r15
    48f6:	ef 90       	pop	r14
    48f8:	08 95       	ret

000048fa <_sqrt>:


float _sqrt(float n)
{
    48fa:	df 93       	push	r29
    48fc:	cf 93       	push	r28
    48fe:	cd b7       	in	r28, 0x3d	; 61
    4900:	de b7       	in	r29, 0x3e	; 62
    4902:	60 97       	sbiw	r28, 0x10	; 16
    4904:	0f b6       	in	r0, 0x3f	; 63
    4906:	f8 94       	cli
    4908:	de bf       	out	0x3e, r29	; 62
    490a:	0f be       	out	0x3f, r0	; 63
    490c:	cd bf       	out	0x3d, r28	; 61
    490e:	6d 87       	std	Y+13, r22	; 0x0d
    4910:	7e 87       	std	Y+14, r23	; 0x0e
    4912:	8f 87       	std	Y+15, r24	; 0x0f
    4914:	98 8b       	std	Y+16, r25	; 0x10

    float x = n;
    4916:	8d 85       	ldd	r24, Y+13	; 0x0d
    4918:	9e 85       	ldd	r25, Y+14	; 0x0e
    491a:	af 85       	ldd	r26, Y+15	; 0x0f
    491c:	b8 89       	ldd	r27, Y+16	; 0x10
    491e:	89 87       	std	Y+9, r24	; 0x09
    4920:	9a 87       	std	Y+10, r25	; 0x0a
    4922:	ab 87       	std	Y+11, r26	; 0x0b
    4924:	bc 87       	std	Y+12, r27	; 0x0c
    float y = 1;
    4926:	80 e0       	ldi	r24, 0x00	; 0
    4928:	90 e0       	ldi	r25, 0x00	; 0
    492a:	a0 e8       	ldi	r26, 0x80	; 128
    492c:	bf e3       	ldi	r27, 0x3F	; 63
    492e:	8d 83       	std	Y+5, r24	; 0x05
    4930:	9e 83       	std	Y+6, r25	; 0x06
    4932:	af 83       	std	Y+7, r26	; 0x07
    4934:	b8 87       	std	Y+8, r27	; 0x08

    double e = 0.000001;
    4936:	8d eb       	ldi	r24, 0xBD	; 189
    4938:	97 e3       	ldi	r25, 0x37	; 55
    493a:	a6 e8       	ldi	r26, 0x86	; 134
    493c:	b5 e3       	ldi	r27, 0x35	; 53
    493e:	89 83       	std	Y+1, r24	; 0x01
    4940:	9a 83       	std	Y+2, r25	; 0x02
    4942:	ab 83       	std	Y+3, r26	; 0x03
    4944:	bc 83       	std	Y+4, r27	; 0x04
    4946:	2a c0       	rjmp	.+84     	; 0x499c <_sqrt+0xa2>
    while(x - y > e)
    {
        x = (x + y)/2;
    4948:	69 85       	ldd	r22, Y+9	; 0x09
    494a:	7a 85       	ldd	r23, Y+10	; 0x0a
    494c:	8b 85       	ldd	r24, Y+11	; 0x0b
    494e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4950:	2d 81       	ldd	r18, Y+5	; 0x05
    4952:	3e 81       	ldd	r19, Y+6	; 0x06
    4954:	4f 81       	ldd	r20, Y+7	; 0x07
    4956:	58 85       	ldd	r21, Y+8	; 0x08
    4958:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__addsf3>
    495c:	dc 01       	movw	r26, r24
    495e:	cb 01       	movw	r24, r22
    4960:	bc 01       	movw	r22, r24
    4962:	cd 01       	movw	r24, r26
    4964:	20 e0       	ldi	r18, 0x00	; 0
    4966:	30 e0       	ldi	r19, 0x00	; 0
    4968:	40 e0       	ldi	r20, 0x00	; 0
    496a:	50 e4       	ldi	r21, 0x40	; 64
    496c:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    4970:	dc 01       	movw	r26, r24
    4972:	cb 01       	movw	r24, r22
    4974:	89 87       	std	Y+9, r24	; 0x09
    4976:	9a 87       	std	Y+10, r25	; 0x0a
    4978:	ab 87       	std	Y+11, r26	; 0x0b
    497a:	bc 87       	std	Y+12, r27	; 0x0c
        y = n/x;
    497c:	6d 85       	ldd	r22, Y+13	; 0x0d
    497e:	7e 85       	ldd	r23, Y+14	; 0x0e
    4980:	8f 85       	ldd	r24, Y+15	; 0x0f
    4982:	98 89       	ldd	r25, Y+16	; 0x10
    4984:	29 85       	ldd	r18, Y+9	; 0x09
    4986:	3a 85       	ldd	r19, Y+10	; 0x0a
    4988:	4b 85       	ldd	r20, Y+11	; 0x0b
    498a:	5c 85       	ldd	r21, Y+12	; 0x0c
    498c:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    4990:	dc 01       	movw	r26, r24
    4992:	cb 01       	movw	r24, r22
    4994:	8d 83       	std	Y+5, r24	; 0x05
    4996:	9e 83       	std	Y+6, r25	; 0x06
    4998:	af 83       	std	Y+7, r26	; 0x07
    499a:	b8 87       	std	Y+8, r27	; 0x08

    float x = n;
    float y = 1;

    double e = 0.000001;
    while(x - y > e)
    499c:	69 85       	ldd	r22, Y+9	; 0x09
    499e:	7a 85       	ldd	r23, Y+10	; 0x0a
    49a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    49a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    49a4:	2d 81       	ldd	r18, Y+5	; 0x05
    49a6:	3e 81       	ldd	r19, Y+6	; 0x06
    49a8:	4f 81       	ldd	r20, Y+7	; 0x07
    49aa:	58 85       	ldd	r21, Y+8	; 0x08
    49ac:	0e 94 bf 02 	call	0x57e	; 0x57e <__subsf3>
    49b0:	dc 01       	movw	r26, r24
    49b2:	cb 01       	movw	r24, r22
    49b4:	bc 01       	movw	r22, r24
    49b6:	cd 01       	movw	r24, r26
    49b8:	29 81       	ldd	r18, Y+1	; 0x01
    49ba:	3a 81       	ldd	r19, Y+2	; 0x02
    49bc:	4b 81       	ldd	r20, Y+3	; 0x03
    49be:	5c 81       	ldd	r21, Y+4	; 0x04
    49c0:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    49c4:	18 16       	cp	r1, r24
    49c6:	0c f4       	brge	.+2      	; 0x49ca <_sqrt+0xd0>
    49c8:	bf cf       	rjmp	.-130    	; 0x4948 <_sqrt+0x4e>
    {
        x = (x + y)/2;
        y = n/x;
    }
    return x;
    49ca:	89 85       	ldd	r24, Y+9	; 0x09
    49cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    49ce:	ab 85       	ldd	r26, Y+11	; 0x0b
    49d0:	bc 85       	ldd	r27, Y+12	; 0x0c
}
    49d2:	bc 01       	movw	r22, r24
    49d4:	cd 01       	movw	r24, r26
    49d6:	60 96       	adiw	r28, 0x10	; 16
    49d8:	0f b6       	in	r0, 0x3f	; 63
    49da:	f8 94       	cli
    49dc:	de bf       	out	0x3e, r29	; 62
    49de:	0f be       	out	0x3f, r0	; 63
    49e0:	cd bf       	out	0x3d, r28	; 61
    49e2:	cf 91       	pop	r28
    49e4:	df 91       	pop	r29
    49e6:	08 95       	ret

000049e8 <my_atan>:


double my_atan (double x)
{
    49e8:	ef 92       	push	r14
    49ea:	ff 92       	push	r15
    49ec:	0f 93       	push	r16
    49ee:	1f 93       	push	r17
    49f0:	df 93       	push	r29
    49f2:	cf 93       	push	r28
    49f4:	cd b7       	in	r28, 0x3d	; 61
    49f6:	de b7       	in	r29, 0x3e	; 62
    49f8:	ac 97       	sbiw	r28, 0x2c	; 44
    49fa:	0f b6       	in	r0, 0x3f	; 63
    49fc:	f8 94       	cli
    49fe:	de bf       	out	0x3e, r29	; 62
    4a00:	0f be       	out	0x3f, r0	; 63
    4a02:	cd bf       	out	0x3d, r28	; 61
    4a04:	6d 8f       	std	Y+29, r22	; 0x1d
    4a06:	7e 8f       	std	Y+30, r23	; 0x1e
    4a08:	8f 8f       	std	Y+31, r24	; 0x1f
    4a0a:	98 a3       	std	Y+32, r25	; 0x20
    /* argument reduction:
       arctan (-x) = -arctan(x);
       arctan (1/x) = 1/2 * pi - arctan (x), when x > 0
    */

    if (x>=1000000) return M_PI/2;
    4a0c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4a0e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    4a10:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4a12:	98 a1       	ldd	r25, Y+32	; 0x20
    4a14:	20 e0       	ldi	r18, 0x00	; 0
    4a16:	34 e2       	ldi	r19, 0x24	; 36
    4a18:	44 e7       	ldi	r20, 0x74	; 116
    4a1a:	59 e4       	ldi	r21, 0x49	; 73
    4a1c:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__gesf2>
    4a20:	88 23       	and	r24, r24
    4a22:	4c f0       	brlt	.+18     	; 0x4a36 <my_atan+0x4e>
    4a24:	4b ed       	ldi	r20, 0xDB	; 219
    4a26:	5f e0       	ldi	r21, 0x0F	; 15
    4a28:	69 ec       	ldi	r22, 0xC9	; 201
    4a2a:	7f e3       	ldi	r23, 0x3F	; 63
    4a2c:	49 a7       	std	Y+41, r20	; 0x29
    4a2e:	5a a7       	std	Y+42, r21	; 0x2a
    4a30:	6b a7       	std	Y+43, r22	; 0x2b
    4a32:	7c a7       	std	Y+44, r23	; 0x2c
    4a34:	d9 c2       	rjmp	.+1458   	; 0x4fe8 <my_atan+0x600>
    else if (x<-100000)return -M_PI/2;
    4a36:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4a38:	7e 8d       	ldd	r23, Y+30	; 0x1e
    4a3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4a3c:	98 a1       	ldd	r25, Y+32	; 0x20
    4a3e:	20 e0       	ldi	r18, 0x00	; 0
    4a40:	30 e5       	ldi	r19, 0x50	; 80
    4a42:	43 ec       	ldi	r20, 0xC3	; 195
    4a44:	57 ec       	ldi	r21, 0xC7	; 199
    4a46:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    4a4a:	88 23       	and	r24, r24
    4a4c:	4c f4       	brge	.+18     	; 0x4a60 <my_atan+0x78>
    4a4e:	6b ed       	ldi	r22, 0xDB	; 219
    4a50:	7f e0       	ldi	r23, 0x0F	; 15
    4a52:	89 ec       	ldi	r24, 0xC9	; 201
    4a54:	9f eb       	ldi	r25, 0xBF	; 191
    4a56:	69 a7       	std	Y+41, r22	; 0x29
    4a58:	7a a7       	std	Y+42, r23	; 0x2a
    4a5a:	8b a7       	std	Y+43, r24	; 0x2b
    4a5c:	9c a7       	std	Y+44, r25	; 0x2c
    4a5e:	c4 c2       	rjmp	.+1416   	; 0x4fe8 <my_atan+0x600>
    z = fabs (x);
    4a60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4a62:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4a64:	af 8d       	ldd	r26, Y+31	; 0x1f
    4a66:	b8 a1       	ldd	r27, Y+32	; 0x20
    4a68:	bf 77       	andi	r27, 0x7F	; 127
    4a6a:	8d 8b       	std	Y+21, r24	; 0x15
    4a6c:	9e 8b       	std	Y+22, r25	; 0x16
    4a6e:	af 8b       	std	Y+23, r26	; 0x17
    4a70:	b8 8f       	std	Y+24, r27	; 0x18
    a = (z > 1.0) ? (1.0 / z) : z;
    4a72:	6d 89       	ldd	r22, Y+21	; 0x15
    4a74:	7e 89       	ldd	r23, Y+22	; 0x16
    4a76:	8f 89       	ldd	r24, Y+23	; 0x17
    4a78:	98 8d       	ldd	r25, Y+24	; 0x18
    4a7a:	20 e0       	ldi	r18, 0x00	; 0
    4a7c:	30 e0       	ldi	r19, 0x00	; 0
    4a7e:	40 e8       	ldi	r20, 0x80	; 128
    4a80:	5f e3       	ldi	r21, 0x3F	; 63
    4a82:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    4a86:	18 16       	cp	r1, r24
    4a88:	8c f4       	brge	.+34     	; 0x4aac <my_atan+0xc4>
    4a8a:	60 e0       	ldi	r22, 0x00	; 0
    4a8c:	70 e0       	ldi	r23, 0x00	; 0
    4a8e:	80 e8       	ldi	r24, 0x80	; 128
    4a90:	9f e3       	ldi	r25, 0x3F	; 63
    4a92:	2d 89       	ldd	r18, Y+21	; 0x15
    4a94:	3e 89       	ldd	r19, Y+22	; 0x16
    4a96:	4f 89       	ldd	r20, Y+23	; 0x17
    4a98:	58 8d       	ldd	r21, Y+24	; 0x18
    4a9a:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    4a9e:	dc 01       	movw	r26, r24
    4aa0:	cb 01       	movw	r24, r22
    4aa2:	8d a3       	std	Y+37, r24	; 0x25
    4aa4:	9e a3       	std	Y+38, r25	; 0x26
    4aa6:	af a3       	std	Y+39, r26	; 0x27
    4aa8:	b8 a7       	std	Y+40, r27	; 0x28
    4aaa:	08 c0       	rjmp	.+16     	; 0x4abc <my_atan+0xd4>
    4aac:	8d 89       	ldd	r24, Y+21	; 0x15
    4aae:	9e 89       	ldd	r25, Y+22	; 0x16
    4ab0:	af 89       	ldd	r26, Y+23	; 0x17
    4ab2:	b8 8d       	ldd	r27, Y+24	; 0x18
    4ab4:	8d a3       	std	Y+37, r24	; 0x25
    4ab6:	9e a3       	std	Y+38, r25	; 0x26
    4ab8:	af a3       	std	Y+39, r26	; 0x27
    4aba:	b8 a7       	std	Y+40, r27	; 0x28
    4abc:	4d a1       	ldd	r20, Y+37	; 0x25
    4abe:	5e a1       	ldd	r21, Y+38	; 0x26
    4ac0:	6f a1       	ldd	r22, Y+39	; 0x27
    4ac2:	78 a5       	ldd	r23, Y+40	; 0x28
    4ac4:	49 8f       	std	Y+25, r20	; 0x19
    4ac6:	5a 8f       	std	Y+26, r21	; 0x1a
    4ac8:	6b 8f       	std	Y+27, r22	; 0x1b
    4aca:	7c 8f       	std	Y+28, r23	; 0x1c
    s = a * a;
    4acc:	69 8d       	ldd	r22, Y+25	; 0x19
    4ace:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4ad0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ad2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ad4:	29 8d       	ldd	r18, Y+25	; 0x19
    4ad6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4ad8:	4b 8d       	ldd	r20, Y+27	; 0x1b
    4ada:	5c 8d       	ldd	r21, Y+28	; 0x1c
    4adc:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    4ae0:	dc 01       	movw	r26, r24
    4ae2:	cb 01       	movw	r24, r22
    4ae4:	8d 83       	std	Y+5, r24	; 0x05
    4ae6:	9e 83       	std	Y+6, r25	; 0x06
    4ae8:	af 83       	std	Y+7, r26	; 0x07
    4aea:	b8 87       	std	Y+8, r27	; 0x08
    q = s * s;
    4aec:	6d 81       	ldd	r22, Y+5	; 0x05
    4aee:	7e 81       	ldd	r23, Y+6	; 0x06
    4af0:	8f 81       	ldd	r24, Y+7	; 0x07
    4af2:	98 85       	ldd	r25, Y+8	; 0x08
    4af4:	2d 81       	ldd	r18, Y+5	; 0x05
    4af6:	3e 81       	ldd	r19, Y+6	; 0x06
    4af8:	4f 81       	ldd	r20, Y+7	; 0x07
    4afa:	58 85       	ldd	r21, Y+8	; 0x08
    4afc:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    4b00:	dc 01       	movw	r26, r24
    4b02:	cb 01       	movw	r24, r22
    4b04:	89 87       	std	Y+9, r24	; 0x09
    4b06:	9a 87       	std	Y+10, r25	; 0x0a
    4b08:	ab 87       	std	Y+11, r26	; 0x0b
    4b0a:	bc 87       	std	Y+12, r27	; 0x0c
    /* core approximation: approximate atan(x) on [0,1] */
    p =            -2.0258553044340116e-5;  // -0x1.53e1d2a258e3ap-16
    4b0c:	89 ee       	ldi	r24, 0xE9	; 233
    4b0e:	90 ef       	ldi	r25, 0xF0	; 240
    4b10:	a9 ea       	ldi	r26, 0xA9	; 169
    4b12:	b7 eb       	ldi	r27, 0xB7	; 183
    4b14:	89 8b       	std	Y+17, r24	; 0x11
    4b16:	9a 8b       	std	Y+18, r25	; 0x12
    4b18:	ab 8b       	std	Y+19, r26	; 0x13
    4b1a:	bc 8b       	std	Y+20, r27	; 0x14
    t =             2.2302240345710764e-4;  //  0x1.d3b63dbb6167ap-13
    4b1c:	8f e1       	ldi	r24, 0x1F	; 31
    4b1e:	9b ed       	ldi	r25, 0xDB	; 219
    4b20:	a9 e6       	ldi	r26, 0x69	; 105
    4b22:	b9 e3       	ldi	r27, 0x39	; 57
    4b24:	89 83       	std	Y+1, r24	; 0x01
    4b26:	9a 83       	std	Y+2, r25	; 0x02
    4b28:	ab 83       	std	Y+3, r26	; 0x03
    4b2a:	bc 83       	std	Y+4, r27	; 0x04
    p = fma (p, q, -1.1640717779912220e-3); // -0x1.312788ddde71dp-10
    4b2c:	89 89       	ldd	r24, Y+17	; 0x11
    4b2e:	9a 89       	ldd	r25, Y+18	; 0x12
    4b30:	ab 89       	ldd	r26, Y+19	; 0x13
    4b32:	bc 89       	ldd	r27, Y+20	; 0x14
    4b34:	29 85       	ldd	r18, Y+9	; 0x09
    4b36:	3a 85       	ldd	r19, Y+10	; 0x0a
    4b38:	4b 85       	ldd	r20, Y+11	; 0x0b
    4b3a:	5c 85       	ldd	r21, Y+12	; 0x0c
    4b3c:	bc 01       	movw	r22, r24
    4b3e:	cd 01       	movw	r24, r26
    4b40:	0f 2e       	mov	r0, r31
    4b42:	f4 ec       	ldi	r31, 0xC4	; 196
    4b44:	ef 2e       	mov	r14, r31
    4b46:	f3 e9       	ldi	r31, 0x93	; 147
    4b48:	ff 2e       	mov	r15, r31
    4b4a:	f8 e9       	ldi	r31, 0x98	; 152
    4b4c:	0f 2f       	mov	r16, r31
    4b4e:	fa eb       	ldi	r31, 0xBA	; 186
    4b50:	1f 2f       	mov	r17, r31
    4b52:	f0 2d       	mov	r31, r0
    4b54:	0e 94 2e 3c 	call	0x785c	; 0x785c <fma>
    4b58:	dc 01       	movw	r26, r24
    4b5a:	cb 01       	movw	r24, r22
    4b5c:	89 8b       	std	Y+17, r24	; 0x11
    4b5e:	9a 8b       	std	Y+18, r25	; 0x12
    4b60:	ab 8b       	std	Y+19, r26	; 0x13
    4b62:	bc 8b       	std	Y+20, r27	; 0x14
    t = fma (t, q,  3.8559749383656407e-3); //  0x1.f9690c824aaf1p-9
    4b64:	89 81       	ldd	r24, Y+1	; 0x01
    4b66:	9a 81       	ldd	r25, Y+2	; 0x02
    4b68:	ab 81       	ldd	r26, Y+3	; 0x03
    4b6a:	bc 81       	ldd	r27, Y+4	; 0x04
    4b6c:	29 85       	ldd	r18, Y+9	; 0x09
    4b6e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4b70:	4b 85       	ldd	r20, Y+11	; 0x0b
    4b72:	5c 85       	ldd	r21, Y+12	; 0x0c
    4b74:	bc 01       	movw	r22, r24
    4b76:	cd 01       	movw	r24, r26
    4b78:	0f 2e       	mov	r0, r31
    4b7a:	f6 e8       	ldi	r31, 0x86	; 134
    4b7c:	ef 2e       	mov	r14, r31
    4b7e:	f4 eb       	ldi	r31, 0xB4	; 180
    4b80:	ff 2e       	mov	r15, r31
    4b82:	fc e7       	ldi	r31, 0x7C	; 124
    4b84:	0f 2f       	mov	r16, r31
    4b86:	fb e3       	ldi	r31, 0x3B	; 59
    4b88:	1f 2f       	mov	r17, r31
    4b8a:	f0 2d       	mov	r31, r0
    4b8c:	0e 94 2e 3c 	call	0x785c	; 0x785c <fma>
    4b90:	dc 01       	movw	r26, r24
    4b92:	cb 01       	movw	r24, r22
    4b94:	89 83       	std	Y+1, r24	; 0x01
    4b96:	9a 83       	std	Y+2, r25	; 0x02
    4b98:	ab 83       	std	Y+3, r26	; 0x03
    4b9a:	bc 83       	std	Y+4, r27	; 0x04
    p = fma (p, q, -9.1845592187222193e-3); // -0x1.2cf5aabc7dbd2p-7
    4b9c:	89 89       	ldd	r24, Y+17	; 0x11
    4b9e:	9a 89       	ldd	r25, Y+18	; 0x12
    4ba0:	ab 89       	ldd	r26, Y+19	; 0x13
    4ba2:	bc 89       	ldd	r27, Y+20	; 0x14
    4ba4:	29 85       	ldd	r18, Y+9	; 0x09
    4ba6:	3a 85       	ldd	r19, Y+10	; 0x0a
    4ba8:	4b 85       	ldd	r20, Y+11	; 0x0b
    4baa:	5c 85       	ldd	r21, Y+12	; 0x0c
    4bac:	bc 01       	movw	r22, r24
    4bae:	cd 01       	movw	r24, r26
    4bb0:	0f 2e       	mov	r0, r31
    4bb2:	f5 ed       	ldi	r31, 0xD5	; 213
    4bb4:	ef 2e       	mov	r14, r31
    4bb6:	fa e7       	ldi	r31, 0x7A	; 122
    4bb8:	ff 2e       	mov	r15, r31
    4bba:	f6 e1       	ldi	r31, 0x16	; 22
    4bbc:	0f 2f       	mov	r16, r31
    4bbe:	fc eb       	ldi	r31, 0xBC	; 188
    4bc0:	1f 2f       	mov	r17, r31
    4bc2:	f0 2d       	mov	r31, r0
    4bc4:	0e 94 2e 3c 	call	0x785c	; 0x785c <fma>
    4bc8:	dc 01       	movw	r26, r24
    4bca:	cb 01       	movw	r24, r22
    4bcc:	89 8b       	std	Y+17, r24	; 0x11
    4bce:	9a 8b       	std	Y+18, r25	; 0x12
    4bd0:	ab 8b       	std	Y+19, r26	; 0x13
    4bd2:	bc 8b       	std	Y+20, r27	; 0x14
    t = fma (t, q,  1.6978035834594660e-2); //  0x1.162b0b2a3bcdcp-6
    4bd4:	89 81       	ldd	r24, Y+1	; 0x01
    4bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    4bd8:	ab 81       	ldd	r26, Y+3	; 0x03
    4bda:	bc 81       	ldd	r27, Y+4	; 0x04
    4bdc:	29 85       	ldd	r18, Y+9	; 0x09
    4bde:	3a 85       	ldd	r19, Y+10	; 0x0a
    4be0:	4b 85       	ldd	r20, Y+11	; 0x0b
    4be2:	5c 85       	ldd	r21, Y+12	; 0x0c
    4be4:	bc 01       	movw	r22, r24
    4be6:	cd 01       	movw	r24, r26
    4be8:	0f 2e       	mov	r0, r31
    4bea:	f6 e8       	ldi	r31, 0x86	; 134
    4bec:	ef 2e       	mov	r14, r31
    4bee:	f5 e1       	ldi	r31, 0x15	; 21
    4bf0:	ff 2e       	mov	r15, r31
    4bf2:	fb e8       	ldi	r31, 0x8B	; 139
    4bf4:	0f 2f       	mov	r16, r31
    4bf6:	fc e3       	ldi	r31, 0x3C	; 60
    4bf8:	1f 2f       	mov	r17, r31
    4bfa:	f0 2d       	mov	r31, r0
    4bfc:	0e 94 2e 3c 	call	0x785c	; 0x785c <fma>
    4c00:	dc 01       	movw	r26, r24
    4c02:	cb 01       	movw	r24, r22
    4c04:	89 83       	std	Y+1, r24	; 0x01
    4c06:	9a 83       	std	Y+2, r25	; 0x02
    4c08:	ab 83       	std	Y+3, r26	; 0x03
    4c0a:	bc 83       	std	Y+4, r27	; 0x04
    p = fma (p, q, -2.5826796814492296e-2); // -0x1.a7256feb6f841p-6
    4c0c:	89 89       	ldd	r24, Y+17	; 0x11
    4c0e:	9a 89       	ldd	r25, Y+18	; 0x12
    4c10:	ab 89       	ldd	r26, Y+19	; 0x13
    4c12:	bc 89       	ldd	r27, Y+20	; 0x14
    4c14:	29 85       	ldd	r18, Y+9	; 0x09
    4c16:	3a 85       	ldd	r19, Y+10	; 0x0a
    4c18:	4b 85       	ldd	r20, Y+11	; 0x0b
    4c1a:	5c 85       	ldd	r21, Y+12	; 0x0c
    4c1c:	bc 01       	movw	r22, r24
    4c1e:	cd 01       	movw	r24, r26
    4c20:	0f 2e       	mov	r0, r31
    4c22:	f8 eb       	ldi	r31, 0xB8	; 184
    4c24:	ef 2e       	mov	r14, r31
    4c26:	f2 e9       	ldi	r31, 0x92	; 146
    4c28:	ff 2e       	mov	r15, r31
    4c2a:	f3 ed       	ldi	r31, 0xD3	; 211
    4c2c:	0f 2f       	mov	r16, r31
    4c2e:	fc eb       	ldi	r31, 0xBC	; 188
    4c30:	1f 2f       	mov	r17, r31
    4c32:	f0 2d       	mov	r31, r0
    4c34:	0e 94 2e 3c 	call	0x785c	; 0x785c <fma>
    4c38:	dc 01       	movw	r26, r24
    4c3a:	cb 01       	movw	r24, r22
    4c3c:	89 8b       	std	Y+17, r24	; 0x11
    4c3e:	9a 8b       	std	Y+18, r25	; 0x12
    4c40:	ab 8b       	std	Y+19, r26	; 0x13
    4c42:	bc 8b       	std	Y+20, r27	; 0x14
    t = fma (t, q,  3.4067811082715810e-2); //  0x1.171560ce4a4ecp-5
    4c44:	89 81       	ldd	r24, Y+1	; 0x01
    4c46:	9a 81       	ldd	r25, Y+2	; 0x02
    4c48:	ab 81       	ldd	r26, Y+3	; 0x03
    4c4a:	bc 81       	ldd	r27, Y+4	; 0x04
    4c4c:	29 85       	ldd	r18, Y+9	; 0x09
    4c4e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4c50:	4b 85       	ldd	r20, Y+11	; 0x0b
    4c52:	5c 85       	ldd	r21, Y+12	; 0x0c
    4c54:	bc 01       	movw	r22, r24
    4c56:	cd 01       	movw	r24, r26
    4c58:	0f 2e       	mov	r0, r31
    4c5a:	f0 eb       	ldi	r31, 0xB0	; 176
    4c5c:	ef 2e       	mov	r14, r31
    4c5e:	fa e8       	ldi	r31, 0x8A	; 138
    4c60:	ff 2e       	mov	r15, r31
    4c62:	fb e0       	ldi	r31, 0x0B	; 11
    4c64:	0f 2f       	mov	r16, r31
    4c66:	fd e3       	ldi	r31, 0x3D	; 61
    4c68:	1f 2f       	mov	r17, r31
    4c6a:	f0 2d       	mov	r31, r0
    4c6c:	0e 94 2e 3c 	call	0x785c	; 0x785c <fma>
    4c70:	dc 01       	movw	r26, r24
    4c72:	cb 01       	movw	r24, r22
    4c74:	89 83       	std	Y+1, r24	; 0x01
    4c76:	9a 83       	std	Y+2, r25	; 0x02
    4c78:	ab 83       	std	Y+3, r26	; 0x03
    4c7a:	bc 83       	std	Y+4, r27	; 0x04
    p = fma (p, q, -4.0926382420509999e-2); // -0x1.4f44d841450e8p-5
    4c7c:	89 89       	ldd	r24, Y+17	; 0x11
    4c7e:	9a 89       	ldd	r25, Y+18	; 0x12
    4c80:	ab 89       	ldd	r26, Y+19	; 0x13
    4c82:	bc 89       	ldd	r27, Y+20	; 0x14
    4c84:	29 85       	ldd	r18, Y+9	; 0x09
    4c86:	3a 85       	ldd	r19, Y+10	; 0x0a
    4c88:	4b 85       	ldd	r20, Y+11	; 0x0b
    4c8a:	5c 85       	ldd	r21, Y+12	; 0x0c
    4c8c:	bc 01       	movw	r22, r24
    4c8e:	cd 01       	movw	r24, r26
    4c90:	0f 2e       	mov	r0, r31
    4c92:	fc e6       	ldi	r31, 0x6C	; 108
    4c94:	ef 2e       	mov	r14, r31
    4c96:	f2 ea       	ldi	r31, 0xA2	; 162
    4c98:	ff 2e       	mov	r15, r31
    4c9a:	f7 e2       	ldi	r31, 0x27	; 39
    4c9c:	0f 2f       	mov	r16, r31
    4c9e:	fd eb       	ldi	r31, 0xBD	; 189
    4ca0:	1f 2f       	mov	r17, r31
    4ca2:	f0 2d       	mov	r31, r0
    4ca4:	0e 94 2e 3c 	call	0x785c	; 0x785c <fma>
    4ca8:	dc 01       	movw	r26, r24
    4caa:	cb 01       	movw	r24, r22
    4cac:	89 8b       	std	Y+17, r24	; 0x11
    4cae:	9a 8b       	std	Y+18, r25	; 0x12
    4cb0:	ab 8b       	std	Y+19, r26	; 0x13
    4cb2:	bc 8b       	std	Y+20, r27	; 0x14
    t = fma (t, q,  4.6739496199158334e-2); //  0x1.7ee3d3f36bbc6p-5
    4cb4:	89 81       	ldd	r24, Y+1	; 0x01
    4cb6:	9a 81       	ldd	r25, Y+2	; 0x02
    4cb8:	ab 81       	ldd	r26, Y+3	; 0x03
    4cba:	bc 81       	ldd	r27, Y+4	; 0x04
    4cbc:	29 85       	ldd	r18, Y+9	; 0x09
    4cbe:	3a 85       	ldd	r19, Y+10	; 0x0a
    4cc0:	4b 85       	ldd	r20, Y+11	; 0x0b
    4cc2:	5c 85       	ldd	r21, Y+12	; 0x0c
    4cc4:	bc 01       	movw	r22, r24
    4cc6:	cd 01       	movw	r24, r26
    4cc8:	0f 2e       	mov	r0, r31
    4cca:	fa ee       	ldi	r31, 0xEA	; 234
    4ccc:	ef 2e       	mov	r14, r31
    4cce:	f1 e7       	ldi	r31, 0x71	; 113
    4cd0:	ff 2e       	mov	r15, r31
    4cd2:	ff e3       	ldi	r31, 0x3F	; 63
    4cd4:	0f 2f       	mov	r16, r31
    4cd6:	fd e3       	ldi	r31, 0x3D	; 61
    4cd8:	1f 2f       	mov	r17, r31
    4cda:	f0 2d       	mov	r31, r0
    4cdc:	0e 94 2e 3c 	call	0x785c	; 0x785c <fma>
    4ce0:	dc 01       	movw	r26, r24
    4ce2:	cb 01       	movw	r24, r22
    4ce4:	89 83       	std	Y+1, r24	; 0x01
    4ce6:	9a 83       	std	Y+2, r25	; 0x02
    4ce8:	ab 83       	std	Y+3, r26	; 0x03
    4cea:	bc 83       	std	Y+4, r27	; 0x04
    p = fma (p, q, -5.2392330054601366e-2); // -0x1.ad32ae04a9fd8p-5
    4cec:	89 89       	ldd	r24, Y+17	; 0x11
    4cee:	9a 89       	ldd	r25, Y+18	; 0x12
    4cf0:	ab 89       	ldd	r26, Y+19	; 0x13
    4cf2:	bc 89       	ldd	r27, Y+20	; 0x14
    4cf4:	29 85       	ldd	r18, Y+9	; 0x09
    4cf6:	3a 85       	ldd	r19, Y+10	; 0x0a
    4cf8:	4b 85       	ldd	r20, Y+11	; 0x0b
    4cfa:	5c 85       	ldd	r21, Y+12	; 0x0c
    4cfc:	bc 01       	movw	r22, r24
    4cfe:	cd 01       	movw	r24, r26
    4d00:	0f 2e       	mov	r0, r31
    4d02:	f7 e5       	ldi	r31, 0x57	; 87
    4d04:	ef 2e       	mov	r14, r31
    4d06:	f9 e9       	ldi	r31, 0x99	; 153
    4d08:	ff 2e       	mov	r15, r31
    4d0a:	f6 e5       	ldi	r31, 0x56	; 86
    4d0c:	0f 2f       	mov	r16, r31
    4d0e:	fd eb       	ldi	r31, 0xBD	; 189
    4d10:	1f 2f       	mov	r17, r31
    4d12:	f0 2d       	mov	r31, r0
    4d14:	0e 94 2e 3c 	call	0x785c	; 0x785c <fma>
    4d18:	dc 01       	movw	r26, r24
    4d1a:	cb 01       	movw	r24, r22
    4d1c:	89 8b       	std	Y+17, r24	; 0x11
    4d1e:	9a 8b       	std	Y+18, r25	; 0x12
    4d20:	ab 8b       	std	Y+19, r26	; 0x13
    4d22:	bc 8b       	std	Y+20, r27	; 0x14
    t = fma (t, q,  5.8773077721790683e-2); //  0x1.e17813d669537p-5
    4d24:	89 81       	ldd	r24, Y+1	; 0x01
    4d26:	9a 81       	ldd	r25, Y+2	; 0x02
    4d28:	ab 81       	ldd	r26, Y+3	; 0x03
    4d2a:	bc 81       	ldd	r27, Y+4	; 0x04
    4d2c:	29 85       	ldd	r18, Y+9	; 0x09
    4d2e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4d30:	4b 85       	ldd	r20, Y+11	; 0x0b
    4d32:	5c 85       	ldd	r21, Y+12	; 0x0c
    4d34:	bc 01       	movw	r22, r24
    4d36:	cd 01       	movw	r24, r26
    4d38:	0f 2e       	mov	r0, r31
    4d3a:	fa e0       	ldi	r31, 0x0A	; 10
    4d3c:	ef 2e       	mov	r14, r31
    4d3e:	fc eb       	ldi	r31, 0xBC	; 188
    4d40:	ff 2e       	mov	r15, r31
    4d42:	f0 e7       	ldi	r31, 0x70	; 112
    4d44:	0f 2f       	mov	r16, r31
    4d46:	fd e3       	ldi	r31, 0x3D	; 61
    4d48:	1f 2f       	mov	r17, r31
    4d4a:	f0 2d       	mov	r31, r0
    4d4c:	0e 94 2e 3c 	call	0x785c	; 0x785c <fma>
    4d50:	dc 01       	movw	r26, r24
    4d52:	cb 01       	movw	r24, r22
    4d54:	89 83       	std	Y+1, r24	; 0x01
    4d56:	9a 83       	std	Y+2, r25	; 0x02
    4d58:	ab 83       	std	Y+3, r26	; 0x03
    4d5a:	bc 83       	std	Y+4, r27	; 0x04
    p = fma (p, q, -6.6658603633512892e-2); // -0x1.11089ca9a5be4p-4
    4d5c:	89 89       	ldd	r24, Y+17	; 0x11
    4d5e:	9a 89       	ldd	r25, Y+18	; 0x12
    4d60:	ab 89       	ldd	r26, Y+19	; 0x13
    4d62:	bc 89       	ldd	r27, Y+20	; 0x14
    4d64:	29 85       	ldd	r18, Y+9	; 0x09
    4d66:	3a 85       	ldd	r19, Y+10	; 0x0a
    4d68:	4b 85       	ldd	r20, Y+11	; 0x0b
    4d6a:	5c 85       	ldd	r21, Y+12	; 0x0c
    4d6c:	bc 01       	movw	r22, r24
    4d6e:	cd 01       	movw	r24, r26
    4d70:	0f 2e       	mov	r0, r31
    4d72:	fe e4       	ldi	r31, 0x4E	; 78
    4d74:	ef 2e       	mov	r14, r31
    4d76:	f4 e8       	ldi	r31, 0x84	; 132
    4d78:	ff 2e       	mov	r15, r31
    4d7a:	f8 e8       	ldi	r31, 0x88	; 136
    4d7c:	0f 2f       	mov	r16, r31
    4d7e:	fd eb       	ldi	r31, 0xBD	; 189
    4d80:	1f 2f       	mov	r17, r31
    4d82:	f0 2d       	mov	r31, r0
    4d84:	0e 94 2e 3c 	call	0x785c	; 0x785c <fma>
    4d88:	dc 01       	movw	r26, r24
    4d8a:	cb 01       	movw	r24, r22
    4d8c:	89 8b       	std	Y+17, r24	; 0x11
    4d8e:	9a 8b       	std	Y+18, r25	; 0x12
    4d90:	ab 8b       	std	Y+19, r26	; 0x13
    4d92:	bc 8b       	std	Y+20, r27	; 0x14
    t = fma (t, q,  7.6922129305867892e-2); //  0x1.3b12b2db5173cp-4
    4d94:	89 81       	ldd	r24, Y+1	; 0x01
    4d96:	9a 81       	ldd	r25, Y+2	; 0x02
    4d98:	ab 81       	ldd	r26, Y+3	; 0x03
    4d9a:	bc 81       	ldd	r27, Y+4	; 0x04
    4d9c:	29 85       	ldd	r18, Y+9	; 0x09
    4d9e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4da0:	4b 85       	ldd	r20, Y+11	; 0x0b
    4da2:	5c 85       	ldd	r21, Y+12	; 0x0c
    4da4:	bc 01       	movw	r22, r24
    4da6:	cd 01       	movw	r24, r26
    4da8:	0f 2e       	mov	r0, r31
    4daa:	f9 e5       	ldi	r31, 0x59	; 89
    4dac:	ef 2e       	mov	r14, r31
    4dae:	f9 e8       	ldi	r31, 0x89	; 137
    4db0:	ff 2e       	mov	r15, r31
    4db2:	fd e9       	ldi	r31, 0x9D	; 157
    4db4:	0f 2f       	mov	r16, r31
    4db6:	fd e3       	ldi	r31, 0x3D	; 61
    4db8:	1f 2f       	mov	r17, r31
    4dba:	f0 2d       	mov	r31, r0
    4dbc:	0e 94 2e 3c 	call	0x785c	; 0x785c <fma>
    4dc0:	dc 01       	movw	r26, r24
    4dc2:	cb 01       	movw	r24, r22
    4dc4:	89 83       	std	Y+1, r24	; 0x01
    4dc6:	9a 83       	std	Y+2, r25	; 0x02
    4dc8:	ab 83       	std	Y+3, r26	; 0x03
    4dca:	bc 83       	std	Y+4, r27	; 0x04
    p = fma (p, s, t);
    4dcc:	89 89       	ldd	r24, Y+17	; 0x11
    4dce:	9a 89       	ldd	r25, Y+18	; 0x12
    4dd0:	ab 89       	ldd	r26, Y+19	; 0x13
    4dd2:	bc 89       	ldd	r27, Y+20	; 0x14
    4dd4:	2d 81       	ldd	r18, Y+5	; 0x05
    4dd6:	3e 81       	ldd	r19, Y+6	; 0x06
    4dd8:	4f 81       	ldd	r20, Y+7	; 0x07
    4dda:	58 85       	ldd	r21, Y+8	; 0x08
    4ddc:	e9 80       	ldd	r14, Y+1	; 0x01
    4dde:	fa 80       	ldd	r15, Y+2	; 0x02
    4de0:	0b 81       	ldd	r16, Y+3	; 0x03
    4de2:	1c 81       	ldd	r17, Y+4	; 0x04
    4de4:	bc 01       	movw	r22, r24
    4de6:	cd 01       	movw	r24, r26
    4de8:	0e 94 2e 3c 	call	0x785c	; 0x785c <fma>
    4dec:	dc 01       	movw	r26, r24
    4dee:	cb 01       	movw	r24, r22
    4df0:	89 8b       	std	Y+17, r24	; 0x11
    4df2:	9a 8b       	std	Y+18, r25	; 0x12
    4df4:	ab 8b       	std	Y+19, r26	; 0x13
    4df6:	bc 8b       	std	Y+20, r27	; 0x14
    p = fma (p, s, -9.0909012354005267e-2); // -0x1.745d022f8dc5fp-4
    4df8:	89 89       	ldd	r24, Y+17	; 0x11
    4dfa:	9a 89       	ldd	r25, Y+18	; 0x12
    4dfc:	ab 89       	ldd	r26, Y+19	; 0x13
    4dfe:	bc 89       	ldd	r27, Y+20	; 0x14
    4e00:	2d 81       	ldd	r18, Y+5	; 0x05
    4e02:	3e 81       	ldd	r19, Y+6	; 0x06
    4e04:	4f 81       	ldd	r20, Y+7	; 0x07
    4e06:	58 85       	ldd	r21, Y+8	; 0x08
    4e08:	bc 01       	movw	r22, r24
    4e0a:	cd 01       	movw	r24, r26
    4e0c:	0f 2e       	mov	r0, r31
    4e0e:	f1 e8       	ldi	r31, 0x81	; 129
    4e10:	ef 2e       	mov	r14, r31
    4e12:	fe e2       	ldi	r31, 0x2E	; 46
    4e14:	ff 2e       	mov	r15, r31
    4e16:	fa eb       	ldi	r31, 0xBA	; 186
    4e18:	0f 2f       	mov	r16, r31
    4e1a:	fd eb       	ldi	r31, 0xBD	; 189
    4e1c:	1f 2f       	mov	r17, r31
    4e1e:	f0 2d       	mov	r31, r0
    4e20:	0e 94 2e 3c 	call	0x785c	; 0x785c <fma>
    4e24:	dc 01       	movw	r26, r24
    4e26:	cb 01       	movw	r24, r22
    4e28:	89 8b       	std	Y+17, r24	; 0x11
    4e2a:	9a 8b       	std	Y+18, r25	; 0x12
    4e2c:	ab 8b       	std	Y+19, r26	; 0x13
    4e2e:	bc 8b       	std	Y+20, r27	; 0x14
    p = fma (p, s,  1.1111110678749421e-1); //  0x1.c71c709dfe925p-4
    4e30:	89 89       	ldd	r24, Y+17	; 0x11
    4e32:	9a 89       	ldd	r25, Y+18	; 0x12
    4e34:	ab 89       	ldd	r26, Y+19	; 0x13
    4e36:	bc 89       	ldd	r27, Y+20	; 0x14
    4e38:	2d 81       	ldd	r18, Y+5	; 0x05
    4e3a:	3e 81       	ldd	r19, Y+6	; 0x06
    4e3c:	4f 81       	ldd	r20, Y+7	; 0x07
    4e3e:	58 85       	ldd	r21, Y+8	; 0x08
    4e40:	bc 01       	movw	r22, r24
    4e42:	cd 01       	movw	r24, r26
    4e44:	0f 2e       	mov	r0, r31
    4e46:	f8 e3       	ldi	r31, 0x38	; 56
    4e48:	ef 2e       	mov	r14, r31
    4e4a:	fe e8       	ldi	r31, 0x8E	; 142
    4e4c:	ff 2e       	mov	r15, r31
    4e4e:	f3 ee       	ldi	r31, 0xE3	; 227
    4e50:	0f 2f       	mov	r16, r31
    4e52:	fd e3       	ldi	r31, 0x3D	; 61
    4e54:	1f 2f       	mov	r17, r31
    4e56:	f0 2d       	mov	r31, r0
    4e58:	0e 94 2e 3c 	call	0x785c	; 0x785c <fma>
    4e5c:	dc 01       	movw	r26, r24
    4e5e:	cb 01       	movw	r24, r22
    4e60:	89 8b       	std	Y+17, r24	; 0x11
    4e62:	9a 8b       	std	Y+18, r25	; 0x12
    4e64:	ab 8b       	std	Y+19, r26	; 0x13
    4e66:	bc 8b       	std	Y+20, r27	; 0x14
    p = fma (p, s, -1.4285714271334810e-1); // -0x1.2492491fa1742p-3
    4e68:	89 89       	ldd	r24, Y+17	; 0x11
    4e6a:	9a 89       	ldd	r25, Y+18	; 0x12
    4e6c:	ab 89       	ldd	r26, Y+19	; 0x13
    4e6e:	bc 89       	ldd	r27, Y+20	; 0x14
    4e70:	2d 81       	ldd	r18, Y+5	; 0x05
    4e72:	3e 81       	ldd	r19, Y+6	; 0x06
    4e74:	4f 81       	ldd	r20, Y+7	; 0x07
    4e76:	58 85       	ldd	r21, Y+8	; 0x08
    4e78:	bc 01       	movw	r22, r24
    4e7a:	cd 01       	movw	r24, r26
    4e7c:	0f 2e       	mov	r0, r31
    4e7e:	f5 e2       	ldi	r31, 0x25	; 37
    4e80:	ef 2e       	mov	r14, r31
    4e82:	f9 e4       	ldi	r31, 0x49	; 73
    4e84:	ff 2e       	mov	r15, r31
    4e86:	f2 e1       	ldi	r31, 0x12	; 18
    4e88:	0f 2f       	mov	r16, r31
    4e8a:	fe eb       	ldi	r31, 0xBE	; 190
    4e8c:	1f 2f       	mov	r17, r31
    4e8e:	f0 2d       	mov	r31, r0
    4e90:	0e 94 2e 3c 	call	0x785c	; 0x785c <fma>
    4e94:	dc 01       	movw	r26, r24
    4e96:	cb 01       	movw	r24, r22
    4e98:	89 8b       	std	Y+17, r24	; 0x11
    4e9a:	9a 8b       	std	Y+18, r25	; 0x12
    4e9c:	ab 8b       	std	Y+19, r26	; 0x13
    4e9e:	bc 8b       	std	Y+20, r27	; 0x14
    p = fma (p, s,  1.9999999999755005e-1); //  0x1.99999999840cdp-3
    4ea0:	89 89       	ldd	r24, Y+17	; 0x11
    4ea2:	9a 89       	ldd	r25, Y+18	; 0x12
    4ea4:	ab 89       	ldd	r26, Y+19	; 0x13
    4ea6:	bc 89       	ldd	r27, Y+20	; 0x14
    4ea8:	2d 81       	ldd	r18, Y+5	; 0x05
    4eaa:	3e 81       	ldd	r19, Y+6	; 0x06
    4eac:	4f 81       	ldd	r20, Y+7	; 0x07
    4eae:	58 85       	ldd	r21, Y+8	; 0x08
    4eb0:	bc 01       	movw	r22, r24
    4eb2:	cd 01       	movw	r24, r26
    4eb4:	0f 2e       	mov	r0, r31
    4eb6:	fd ec       	ldi	r31, 0xCD	; 205
    4eb8:	ef 2e       	mov	r14, r31
    4eba:	fc ec       	ldi	r31, 0xCC	; 204
    4ebc:	ff 2e       	mov	r15, r31
    4ebe:	fc e4       	ldi	r31, 0x4C	; 76
    4ec0:	0f 2f       	mov	r16, r31
    4ec2:	fe e3       	ldi	r31, 0x3E	; 62
    4ec4:	1f 2f       	mov	r17, r31
    4ec6:	f0 2d       	mov	r31, r0
    4ec8:	0e 94 2e 3c 	call	0x785c	; 0x785c <fma>
    4ecc:	dc 01       	movw	r26, r24
    4ece:	cb 01       	movw	r24, r22
    4ed0:	89 8b       	std	Y+17, r24	; 0x11
    4ed2:	9a 8b       	std	Y+18, r25	; 0x12
    4ed4:	ab 8b       	std	Y+19, r26	; 0x13
    4ed6:	bc 8b       	std	Y+20, r27	; 0x14
    p = fma (p, s, -3.3333333333331838e-1); // -0x1.5555555555448p-2
    4ed8:	89 89       	ldd	r24, Y+17	; 0x11
    4eda:	9a 89       	ldd	r25, Y+18	; 0x12
    4edc:	ab 89       	ldd	r26, Y+19	; 0x13
    4ede:	bc 89       	ldd	r27, Y+20	; 0x14
    4ee0:	2d 81       	ldd	r18, Y+5	; 0x05
    4ee2:	3e 81       	ldd	r19, Y+6	; 0x06
    4ee4:	4f 81       	ldd	r20, Y+7	; 0x07
    4ee6:	58 85       	ldd	r21, Y+8	; 0x08
    4ee8:	bc 01       	movw	r22, r24
    4eea:	cd 01       	movw	r24, r26
    4eec:	0f 2e       	mov	r0, r31
    4eee:	fb ea       	ldi	r31, 0xAB	; 171
    4ef0:	ef 2e       	mov	r14, r31
    4ef2:	fa ea       	ldi	r31, 0xAA	; 170
    4ef4:	ff 2e       	mov	r15, r31
    4ef6:	fa ea       	ldi	r31, 0xAA	; 170
    4ef8:	0f 2f       	mov	r16, r31
    4efa:	fe eb       	ldi	r31, 0xBE	; 190
    4efc:	1f 2f       	mov	r17, r31
    4efe:	f0 2d       	mov	r31, r0
    4f00:	0e 94 2e 3c 	call	0x785c	; 0x785c <fma>
    4f04:	dc 01       	movw	r26, r24
    4f06:	cb 01       	movw	r24, r22
    4f08:	89 8b       	std	Y+17, r24	; 0x11
    4f0a:	9a 8b       	std	Y+18, r25	; 0x12
    4f0c:	ab 8b       	std	Y+19, r26	; 0x13
    4f0e:	bc 8b       	std	Y+20, r27	; 0x14
    p = fma (p * s, a, a);
    4f10:	69 89       	ldd	r22, Y+17	; 0x11
    4f12:	7a 89       	ldd	r23, Y+18	; 0x12
    4f14:	8b 89       	ldd	r24, Y+19	; 0x13
    4f16:	9c 89       	ldd	r25, Y+20	; 0x14
    4f18:	2d 81       	ldd	r18, Y+5	; 0x05
    4f1a:	3e 81       	ldd	r19, Y+6	; 0x06
    4f1c:	4f 81       	ldd	r20, Y+7	; 0x07
    4f1e:	58 85       	ldd	r21, Y+8	; 0x08
    4f20:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    4f24:	dc 01       	movw	r26, r24
    4f26:	cb 01       	movw	r24, r22
    4f28:	29 8d       	ldd	r18, Y+25	; 0x19
    4f2a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4f2c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    4f2e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    4f30:	e9 8c       	ldd	r14, Y+25	; 0x19
    4f32:	fa 8c       	ldd	r15, Y+26	; 0x1a
    4f34:	0b 8d       	ldd	r16, Y+27	; 0x1b
    4f36:	1c 8d       	ldd	r17, Y+28	; 0x1c
    4f38:	bc 01       	movw	r22, r24
    4f3a:	cd 01       	movw	r24, r26
    4f3c:	0e 94 2e 3c 	call	0x785c	; 0x785c <fma>
    4f40:	dc 01       	movw	r26, r24
    4f42:	cb 01       	movw	r24, r22
    4f44:	89 8b       	std	Y+17, r24	; 0x11
    4f46:	9a 8b       	std	Y+18, r25	; 0x12
    4f48:	ab 8b       	std	Y+19, r26	; 0x13
    4f4a:	bc 8b       	std	Y+20, r27	; 0x14
    /* back substitution in accordance with argument reduction */
    /* double-precision factorization of PI/2 courtesy of Tor Myklebust */
    r = (z > 1.0) ? fma (0.93282184640716537, 1.6839188885261840, -p) : p;
    4f4c:	6d 89       	ldd	r22, Y+21	; 0x15
    4f4e:	7e 89       	ldd	r23, Y+22	; 0x16
    4f50:	8f 89       	ldd	r24, Y+23	; 0x17
    4f52:	98 8d       	ldd	r25, Y+24	; 0x18
    4f54:	20 e0       	ldi	r18, 0x00	; 0
    4f56:	30 e0       	ldi	r19, 0x00	; 0
    4f58:	40 e8       	ldi	r20, 0x80	; 128
    4f5a:	5f e3       	ldi	r21, 0x3F	; 63
    4f5c:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    4f60:	18 16       	cp	r1, r24
    4f62:	cc f4       	brge	.+50     	; 0x4f96 <my_atan+0x5ae>
    4f64:	89 89       	ldd	r24, Y+17	; 0x11
    4f66:	9a 89       	ldd	r25, Y+18	; 0x12
    4f68:	ab 89       	ldd	r26, Y+19	; 0x13
    4f6a:	bc 89       	ldd	r27, Y+20	; 0x14
    4f6c:	7c 01       	movw	r14, r24
    4f6e:	8d 01       	movw	r16, r26
    4f70:	17 fb       	bst	r17, 7
    4f72:	10 95       	com	r17
    4f74:	17 f9       	bld	r17, 7
    4f76:	10 95       	com	r17
    4f78:	6a e6       	ldi	r22, 0x6A	; 106
    4f7a:	7d ec       	ldi	r23, 0xCD	; 205
    4f7c:	8e e6       	ldi	r24, 0x6E	; 110
    4f7e:	9f e3       	ldi	r25, 0x3F	; 63
    4f80:	27 ea       	ldi	r18, 0xA7	; 167
    4f82:	3a e8       	ldi	r19, 0x8A	; 138
    4f84:	47 ed       	ldi	r20, 0xD7	; 215
    4f86:	5f e3       	ldi	r21, 0x3F	; 63
    4f88:	0e 94 2e 3c 	call	0x785c	; 0x785c <fma>
    4f8c:	69 a3       	std	Y+33, r22	; 0x21
    4f8e:	7a a3       	std	Y+34, r23	; 0x22
    4f90:	8b a3       	std	Y+35, r24	; 0x23
    4f92:	9c a3       	std	Y+36, r25	; 0x24
    4f94:	08 c0       	rjmp	.+16     	; 0x4fa6 <my_atan+0x5be>
    4f96:	69 89       	ldd	r22, Y+17	; 0x11
    4f98:	7a 89       	ldd	r23, Y+18	; 0x12
    4f9a:	8b 89       	ldd	r24, Y+19	; 0x13
    4f9c:	9c 89       	ldd	r25, Y+20	; 0x14
    4f9e:	69 a3       	std	Y+33, r22	; 0x21
    4fa0:	7a a3       	std	Y+34, r23	; 0x22
    4fa2:	8b a3       	std	Y+35, r24	; 0x23
    4fa4:	9c a3       	std	Y+36, r25	; 0x24
    4fa6:	89 a1       	ldd	r24, Y+33	; 0x21
    4fa8:	9a a1       	ldd	r25, Y+34	; 0x22
    4faa:	ab a1       	ldd	r26, Y+35	; 0x23
    4fac:	bc a1       	ldd	r27, Y+36	; 0x24
    4fae:	8d 87       	std	Y+13, r24	; 0x0d
    4fb0:	9e 87       	std	Y+14, r25	; 0x0e
    4fb2:	af 87       	std	Y+15, r26	; 0x0f
    4fb4:	b8 8b       	std	Y+16, r27	; 0x10
    return (copysign (r, x) ) ;
    4fb6:	88 a1       	ldd	r24, Y+32	; 0x20
    4fb8:	28 2f       	mov	r18, r24
    4fba:	20 78       	andi	r18, 0x80	; 128
    4fbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fc0:	af 85       	ldd	r26, Y+15	; 0x0f
    4fc2:	b8 89       	ldd	r27, Y+16	; 0x10
    4fc4:	ac 01       	movw	r20, r24
    4fc6:	bd 01       	movw	r22, r26
    4fc8:	7f 77       	andi	r23, 0x7F	; 127
    4fca:	49 a7       	std	Y+41, r20	; 0x29
    4fcc:	5a a7       	std	Y+42, r21	; 0x2a
    4fce:	6b a7       	std	Y+43, r22	; 0x2b
    4fd0:	7c a7       	std	Y+44, r23	; 0x2c
    4fd2:	22 23       	and	r18, r18
    4fd4:	49 f0       	breq	.+18     	; 0x4fe8 <my_atan+0x600>
    4fd6:	69 a5       	ldd	r22, Y+41	; 0x29
    4fd8:	7a a5       	ldd	r23, Y+42	; 0x2a
    4fda:	8b a5       	ldd	r24, Y+43	; 0x2b
    4fdc:	9c a5       	ldd	r25, Y+44	; 0x2c
    4fde:	90 58       	subi	r25, 0x80	; 128
    4fe0:	69 a7       	std	Y+41, r22	; 0x29
    4fe2:	7a a7       	std	Y+42, r23	; 0x2a
    4fe4:	8b a7       	std	Y+43, r24	; 0x2b
    4fe6:	9c a7       	std	Y+44, r25	; 0x2c
    4fe8:	89 a5       	ldd	r24, Y+41	; 0x29
    4fea:	9a a5       	ldd	r25, Y+42	; 0x2a
    4fec:	ab a5       	ldd	r26, Y+43	; 0x2b
    4fee:	bc a5       	ldd	r27, Y+44	; 0x2c
}
    4ff0:	bc 01       	movw	r22, r24
    4ff2:	cd 01       	movw	r24, r26
    4ff4:	ac 96       	adiw	r28, 0x2c	; 44
    4ff6:	0f b6       	in	r0, 0x3f	; 63
    4ff8:	f8 94       	cli
    4ffa:	de bf       	out	0x3e, r29	; 62
    4ffc:	0f be       	out	0x3f, r0	; 63
    4ffe:	cd bf       	out	0x3d, r28	; 61
    5000:	cf 91       	pop	r28
    5002:	df 91       	pop	r29
    5004:	1f 91       	pop	r17
    5006:	0f 91       	pop	r16
    5008:	ff 90       	pop	r15
    500a:	ef 90       	pop	r14
    500c:	08 95       	ret

0000500e <my_asin>:

double my_asin(double x)
{
    500e:	df 93       	push	r29
    5010:	cf 93       	push	r28
    5012:	00 d0       	rcall	.+0      	; 0x5014 <my_asin+0x6>
    5014:	00 d0       	rcall	.+0      	; 0x5016 <my_asin+0x8>
    5016:	cd b7       	in	r28, 0x3d	; 61
    5018:	de b7       	in	r29, 0x3e	; 62
    501a:	69 83       	std	Y+1, r22	; 0x01
    501c:	7a 83       	std	Y+2, r23	; 0x02
    501e:	8b 83       	std	Y+3, r24	; 0x03
    5020:	9c 83       	std	Y+4, r25	; 0x04
	return (my_atan(x/sqrt(1-(x*x))));
    5022:	69 81       	ldd	r22, Y+1	; 0x01
    5024:	7a 81       	ldd	r23, Y+2	; 0x02
    5026:	8b 81       	ldd	r24, Y+3	; 0x03
    5028:	9c 81       	ldd	r25, Y+4	; 0x04
    502a:	29 81       	ldd	r18, Y+1	; 0x01
    502c:	3a 81       	ldd	r19, Y+2	; 0x02
    502e:	4b 81       	ldd	r20, Y+3	; 0x03
    5030:	5c 81       	ldd	r21, Y+4	; 0x04
    5032:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    5036:	dc 01       	movw	r26, r24
    5038:	cb 01       	movw	r24, r22
    503a:	9c 01       	movw	r18, r24
    503c:	ad 01       	movw	r20, r26
    503e:	60 e0       	ldi	r22, 0x00	; 0
    5040:	70 e0       	ldi	r23, 0x00	; 0
    5042:	80 e8       	ldi	r24, 0x80	; 128
    5044:	9f e3       	ldi	r25, 0x3F	; 63
    5046:	0e 94 bf 02 	call	0x57e	; 0x57e <__subsf3>
    504a:	dc 01       	movw	r26, r24
    504c:	cb 01       	movw	r24, r22
    504e:	bc 01       	movw	r22, r24
    5050:	cd 01       	movw	r24, r26
    5052:	0e 94 aa 3c 	call	0x7954	; 0x7954 <sqrt>
    5056:	9b 01       	movw	r18, r22
    5058:	ac 01       	movw	r20, r24
    505a:	69 81       	ldd	r22, Y+1	; 0x01
    505c:	7a 81       	ldd	r23, Y+2	; 0x02
    505e:	8b 81       	ldd	r24, Y+3	; 0x03
    5060:	9c 81       	ldd	r25, Y+4	; 0x04
    5062:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    5066:	dc 01       	movw	r26, r24
    5068:	cb 01       	movw	r24, r22
    506a:	bc 01       	movw	r22, r24
    506c:	cd 01       	movw	r24, r26
    506e:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <my_atan>
    5072:	dc 01       	movw	r26, r24
    5074:	cb 01       	movw	r24, r22
}
    5076:	bc 01       	movw	r22, r24
    5078:	cd 01       	movw	r24, r26
    507a:	0f 90       	pop	r0
    507c:	0f 90       	pop	r0
    507e:	0f 90       	pop	r0
    5080:	0f 90       	pop	r0
    5082:	cf 91       	pop	r28
    5084:	df 91       	pop	r29
    5086:	08 95       	ret

00005088 <my_acos>:

double my_acos(double x)
{
    5088:	df 93       	push	r29
    508a:	cf 93       	push	r28
    508c:	00 d0       	rcall	.+0      	; 0x508e <my_acos+0x6>
    508e:	00 d0       	rcall	.+0      	; 0x5090 <my_acos+0x8>
    5090:	cd b7       	in	r28, 0x3d	; 61
    5092:	de b7       	in	r29, 0x3e	; 62
    5094:	69 83       	std	Y+1, r22	; 0x01
    5096:	7a 83       	std	Y+2, r23	; 0x02
    5098:	8b 83       	std	Y+3, r24	; 0x03
    509a:	9c 83       	std	Y+4, r25	; 0x04
	return M_PI*0.5 - my_asin(x);
    509c:	89 81       	ldd	r24, Y+1	; 0x01
    509e:	9a 81       	ldd	r25, Y+2	; 0x02
    50a0:	ab 81       	ldd	r26, Y+3	; 0x03
    50a2:	bc 81       	ldd	r27, Y+4	; 0x04
    50a4:	bc 01       	movw	r22, r24
    50a6:	cd 01       	movw	r24, r26
    50a8:	0e 94 07 28 	call	0x500e	; 0x500e <my_asin>
    50ac:	9b 01       	movw	r18, r22
    50ae:	ac 01       	movw	r20, r24
    50b0:	6b ed       	ldi	r22, 0xDB	; 219
    50b2:	7f e0       	ldi	r23, 0x0F	; 15
    50b4:	89 ec       	ldi	r24, 0xC9	; 201
    50b6:	9f e3       	ldi	r25, 0x3F	; 63
    50b8:	0e 94 bf 02 	call	0x57e	; 0x57e <__subsf3>
    50bc:	dc 01       	movw	r26, r24
    50be:	cb 01       	movw	r24, r22
}
    50c0:	bc 01       	movw	r22, r24
    50c2:	cd 01       	movw	r24, r26
    50c4:	0f 90       	pop	r0
    50c6:	0f 90       	pop	r0
    50c8:	0f 90       	pop	r0
    50ca:	0f 90       	pop	r0
    50cc:	cf 91       	pop	r28
    50ce:	df 91       	pop	r29
    50d0:	08 95       	ret

000050d2 <Dec2Hex>:
/****************** Number Representation ******************/


s8 i;
void Dec2Hex(u16 DecNumber, u8 * HexNumber)
{
    50d2:	df 93       	push	r29
    50d4:	cf 93       	push	r28
    50d6:	00 d0       	rcall	.+0      	; 0x50d8 <Dec2Hex+0x6>
    50d8:	00 d0       	rcall	.+0      	; 0x50da <Dec2Hex+0x8>
    50da:	cd b7       	in	r28, 0x3d	; 61
    50dc:	de b7       	in	r29, 0x3e	; 62
    50de:	9a 83       	std	Y+2, r25	; 0x02
    50e0:	89 83       	std	Y+1, r24	; 0x01
    50e2:	7c 83       	std	Y+4, r23	; 0x04
    50e4:	6b 83       	std	Y+3, r22	; 0x03
	 i = 0;
    50e6:	10 92 7f 02 	sts	0x027F, r1
    50ea:	3f c0       	rjmp	.+126    	; 0x516a <Dec2Hex+0x98>
	while (DecNumber != 0)
	{
		if ((DecNumber % 16) < 10)
    50ec:	89 81       	ldd	r24, Y+1	; 0x01
    50ee:	9a 81       	ldd	r25, Y+2	; 0x02
    50f0:	8f 70       	andi	r24, 0x0F	; 15
    50f2:	90 70       	andi	r25, 0x00	; 0
    50f4:	8a 30       	cpi	r24, 0x0A	; 10
    50f6:	91 05       	cpc	r25, r1
    50f8:	a8 f4       	brcc	.+42     	; 0x5124 <Dec2Hex+0x52>
		{
			HexNumber[15-i] = (DecNumber % 16) + '0';
    50fa:	80 91 7f 02 	lds	r24, 0x027F
    50fe:	28 2f       	mov	r18, r24
    5100:	33 27       	eor	r19, r19
    5102:	27 fd       	sbrc	r18, 7
    5104:	30 95       	com	r19
    5106:	8f e0       	ldi	r24, 0x0F	; 15
    5108:	90 e0       	ldi	r25, 0x00	; 0
    510a:	82 1b       	sub	r24, r18
    510c:	93 0b       	sbc	r25, r19
    510e:	9c 01       	movw	r18, r24
    5110:	8b 81       	ldd	r24, Y+3	; 0x03
    5112:	9c 81       	ldd	r25, Y+4	; 0x04
    5114:	fc 01       	movw	r30, r24
    5116:	e2 0f       	add	r30, r18
    5118:	f3 1f       	adc	r31, r19
    511a:	89 81       	ldd	r24, Y+1	; 0x01
    511c:	8f 70       	andi	r24, 0x0F	; 15
    511e:	80 5d       	subi	r24, 0xD0	; 208
    5120:	80 83       	st	Z, r24
    5122:	14 c0       	rjmp	.+40     	; 0x514c <Dec2Hex+0x7a>
		}
		else
		{
			HexNumber[15-i] = (DecNumber % 16) + 'A' - 10;
    5124:	80 91 7f 02 	lds	r24, 0x027F
    5128:	28 2f       	mov	r18, r24
    512a:	33 27       	eor	r19, r19
    512c:	27 fd       	sbrc	r18, 7
    512e:	30 95       	com	r19
    5130:	8f e0       	ldi	r24, 0x0F	; 15
    5132:	90 e0       	ldi	r25, 0x00	; 0
    5134:	82 1b       	sub	r24, r18
    5136:	93 0b       	sbc	r25, r19
    5138:	9c 01       	movw	r18, r24
    513a:	8b 81       	ldd	r24, Y+3	; 0x03
    513c:	9c 81       	ldd	r25, Y+4	; 0x04
    513e:	fc 01       	movw	r30, r24
    5140:	e2 0f       	add	r30, r18
    5142:	f3 1f       	adc	r31, r19
    5144:	89 81       	ldd	r24, Y+1	; 0x01
    5146:	8f 70       	andi	r24, 0x0F	; 15
    5148:	89 5c       	subi	r24, 0xC9	; 201
    514a:	80 83       	st	Z, r24
		}
		DecNumber /= 16;
    514c:	89 81       	ldd	r24, Y+1	; 0x01
    514e:	9a 81       	ldd	r25, Y+2	; 0x02
    5150:	92 95       	swap	r25
    5152:	82 95       	swap	r24
    5154:	8f 70       	andi	r24, 0x0F	; 15
    5156:	89 27       	eor	r24, r25
    5158:	9f 70       	andi	r25, 0x0F	; 15
    515a:	89 27       	eor	r24, r25
    515c:	9a 83       	std	Y+2, r25	; 0x02
    515e:	89 83       	std	Y+1, r24	; 0x01
		i++;
    5160:	80 91 7f 02 	lds	r24, 0x027F
    5164:	8f 5f       	subi	r24, 0xFF	; 255
    5166:	80 93 7f 02 	sts	0x027F, r24

s8 i;
void Dec2Hex(u16 DecNumber, u8 * HexNumber)
{
	 i = 0;
	while (DecNumber != 0)
    516a:	89 81       	ldd	r24, Y+1	; 0x01
    516c:	9a 81       	ldd	r25, Y+2	; 0x02
    516e:	00 97       	sbiw	r24, 0x00	; 0
    5170:	09 f0       	breq	.+2      	; 0x5174 <Dec2Hex+0xa2>
    5172:	bc cf       	rjmp	.-136    	; 0x50ec <Dec2Hex+0x1a>
			HexNumber[15-i] = (DecNumber % 16) + 'A' - 10;
		}
		DecNumber /= 16;
		i++;
	}
}
    5174:	0f 90       	pop	r0
    5176:	0f 90       	pop	r0
    5178:	0f 90       	pop	r0
    517a:	0f 90       	pop	r0
    517c:	cf 91       	pop	r28
    517e:	df 91       	pop	r29
    5180:	08 95       	ret

00005182 <Dec2Oct>:


void Dec2Oct(u16 DecNumber, u8 * OctNumber)
{
    5182:	df 93       	push	r29
    5184:	cf 93       	push	r28
    5186:	00 d0       	rcall	.+0      	; 0x5188 <Dec2Oct+0x6>
    5188:	00 d0       	rcall	.+0      	; 0x518a <Dec2Oct+0x8>
    518a:	cd b7       	in	r28, 0x3d	; 61
    518c:	de b7       	in	r29, 0x3e	; 62
    518e:	9a 83       	std	Y+2, r25	; 0x02
    5190:	89 83       	std	Y+1, r24	; 0x01
    5192:	7c 83       	std	Y+4, r23	; 0x04
    5194:	6b 83       	std	Y+3, r22	; 0x03
	i = 0;
    5196:	10 92 7f 02 	sts	0x027F, r1
    519a:	23 c0       	rjmp	.+70     	; 0x51e2 <Dec2Oct+0x60>
	while (DecNumber != 0)
	{
		OctNumber[15-i] = (DecNumber % 8) + '0';
    519c:	80 91 7f 02 	lds	r24, 0x027F
    51a0:	28 2f       	mov	r18, r24
    51a2:	33 27       	eor	r19, r19
    51a4:	27 fd       	sbrc	r18, 7
    51a6:	30 95       	com	r19
    51a8:	8f e0       	ldi	r24, 0x0F	; 15
    51aa:	90 e0       	ldi	r25, 0x00	; 0
    51ac:	82 1b       	sub	r24, r18
    51ae:	93 0b       	sbc	r25, r19
    51b0:	9c 01       	movw	r18, r24
    51b2:	8b 81       	ldd	r24, Y+3	; 0x03
    51b4:	9c 81       	ldd	r25, Y+4	; 0x04
    51b6:	fc 01       	movw	r30, r24
    51b8:	e2 0f       	add	r30, r18
    51ba:	f3 1f       	adc	r31, r19
    51bc:	89 81       	ldd	r24, Y+1	; 0x01
    51be:	87 70       	andi	r24, 0x07	; 7
    51c0:	80 5d       	subi	r24, 0xD0	; 208
    51c2:	80 83       	st	Z, r24
		DecNumber /= 8;
    51c4:	89 81       	ldd	r24, Y+1	; 0x01
    51c6:	9a 81       	ldd	r25, Y+2	; 0x02
    51c8:	96 95       	lsr	r25
    51ca:	87 95       	ror	r24
    51cc:	96 95       	lsr	r25
    51ce:	87 95       	ror	r24
    51d0:	96 95       	lsr	r25
    51d2:	87 95       	ror	r24
    51d4:	9a 83       	std	Y+2, r25	; 0x02
    51d6:	89 83       	std	Y+1, r24	; 0x01
		i++;
    51d8:	80 91 7f 02 	lds	r24, 0x027F
    51dc:	8f 5f       	subi	r24, 0xFF	; 255
    51de:	80 93 7f 02 	sts	0x027F, r24


void Dec2Oct(u16 DecNumber, u8 * OctNumber)
{
	i = 0;
	while (DecNumber != 0)
    51e2:	89 81       	ldd	r24, Y+1	; 0x01
    51e4:	9a 81       	ldd	r25, Y+2	; 0x02
    51e6:	00 97       	sbiw	r24, 0x00	; 0
    51e8:	c9 f6       	brne	.-78     	; 0x519c <Dec2Oct+0x1a>
	{
		OctNumber[15-i] = (DecNumber % 8) + '0';
		DecNumber /= 8;
		i++;
	}
}
    51ea:	0f 90       	pop	r0
    51ec:	0f 90       	pop	r0
    51ee:	0f 90       	pop	r0
    51f0:	0f 90       	pop	r0
    51f2:	cf 91       	pop	r28
    51f4:	df 91       	pop	r29
    51f6:	08 95       	ret

000051f8 <Dec2Bin>:


void Dec2Bin(u16 DecNumber, u8 * BinNumber)
{
    51f8:	df 93       	push	r29
    51fa:	cf 93       	push	r28
    51fc:	00 d0       	rcall	.+0      	; 0x51fe <Dec2Bin+0x6>
    51fe:	00 d0       	rcall	.+0      	; 0x5200 <Dec2Bin+0x8>
    5200:	cd b7       	in	r28, 0x3d	; 61
    5202:	de b7       	in	r29, 0x3e	; 62
    5204:	9a 83       	std	Y+2, r25	; 0x02
    5206:	89 83       	std	Y+1, r24	; 0x01
    5208:	7c 83       	std	Y+4, r23	; 0x04
    520a:	6b 83       	std	Y+3, r22	; 0x03
	 i = 0;
    520c:	10 92 7f 02 	sts	0x027F, r1
    5210:	1f c0       	rjmp	.+62     	; 0x5250 <Dec2Bin+0x58>
	while (DecNumber != 0)
	{
		BinNumber[15-i] = (DecNumber % 2) + '0';
    5212:	80 91 7f 02 	lds	r24, 0x027F
    5216:	28 2f       	mov	r18, r24
    5218:	33 27       	eor	r19, r19
    521a:	27 fd       	sbrc	r18, 7
    521c:	30 95       	com	r19
    521e:	8f e0       	ldi	r24, 0x0F	; 15
    5220:	90 e0       	ldi	r25, 0x00	; 0
    5222:	82 1b       	sub	r24, r18
    5224:	93 0b       	sbc	r25, r19
    5226:	9c 01       	movw	r18, r24
    5228:	8b 81       	ldd	r24, Y+3	; 0x03
    522a:	9c 81       	ldd	r25, Y+4	; 0x04
    522c:	fc 01       	movw	r30, r24
    522e:	e2 0f       	add	r30, r18
    5230:	f3 1f       	adc	r31, r19
    5232:	89 81       	ldd	r24, Y+1	; 0x01
    5234:	81 70       	andi	r24, 0x01	; 1
    5236:	80 5d       	subi	r24, 0xD0	; 208
    5238:	80 83       	st	Z, r24
		DecNumber /= 2;
    523a:	89 81       	ldd	r24, Y+1	; 0x01
    523c:	9a 81       	ldd	r25, Y+2	; 0x02
    523e:	96 95       	lsr	r25
    5240:	87 95       	ror	r24
    5242:	9a 83       	std	Y+2, r25	; 0x02
    5244:	89 83       	std	Y+1, r24	; 0x01
		i++;
    5246:	80 91 7f 02 	lds	r24, 0x027F
    524a:	8f 5f       	subi	r24, 0xFF	; 255
    524c:	80 93 7f 02 	sts	0x027F, r24


void Dec2Bin(u16 DecNumber, u8 * BinNumber)
{
	 i = 0;
	while (DecNumber != 0)
    5250:	89 81       	ldd	r24, Y+1	; 0x01
    5252:	9a 81       	ldd	r25, Y+2	; 0x02
    5254:	00 97       	sbiw	r24, 0x00	; 0
    5256:	e9 f6       	brne	.-70     	; 0x5212 <Dec2Bin+0x1a>
	{
		BinNumber[15-i] = (DecNumber % 2) + '0';
		DecNumber /= 2;
		i++;
	}
}
    5258:	0f 90       	pop	r0
    525a:	0f 90       	pop	r0
    525c:	0f 90       	pop	r0
    525e:	0f 90       	pop	r0
    5260:	cf 91       	pop	r28
    5262:	df 91       	pop	r29
    5264:	08 95       	ret

00005266 <Hex2Dec>:



u16 Hex2Dec(char * HexNumber)
{
    5266:	df 93       	push	r29
    5268:	cf 93       	push	r28
    526a:	00 d0       	rcall	.+0      	; 0x526c <Hex2Dec+0x6>
    526c:	00 d0       	rcall	.+0      	; 0x526e <Hex2Dec+0x8>
    526e:	0f 92       	push	r0
    5270:	cd b7       	in	r28, 0x3d	; 61
    5272:	de b7       	in	r29, 0x3e	; 62
    5274:	9d 83       	std	Y+5, r25	; 0x05
    5276:	8c 83       	std	Y+4, r24	; 0x04
	u16 val = 0;
    5278:	1b 82       	std	Y+3, r1	; 0x03
    527a:	1a 82       	std	Y+2, r1	; 0x02
	u8 byte;
	for( i =15;i>=0;i-- )
    527c:	8f e0       	ldi	r24, 0x0F	; 15
    527e:	80 93 7f 02 	sts	0x027F, r24
    5282:	3f c0       	rjmp	.+126    	; 0x5302 <Hex2Dec+0x9c>
	{
		byte = HexNumber[i];
    5284:	80 91 7f 02 	lds	r24, 0x027F
    5288:	28 2f       	mov	r18, r24
    528a:	33 27       	eor	r19, r19
    528c:	27 fd       	sbrc	r18, 7
    528e:	30 95       	com	r19
    5290:	8c 81       	ldd	r24, Y+4	; 0x04
    5292:	9d 81       	ldd	r25, Y+5	; 0x05
    5294:	fc 01       	movw	r30, r24
    5296:	e2 0f       	add	r30, r18
    5298:	f3 1f       	adc	r31, r19
    529a:	80 81       	ld	r24, Z
    529c:	89 83       	std	Y+1, r24	; 0x01
		if (byte >= '0' && byte <= '9') byte = byte - '0';
    529e:	89 81       	ldd	r24, Y+1	; 0x01
    52a0:	80 33       	cpi	r24, 0x30	; 48
    52a2:	38 f0       	brcs	.+14     	; 0x52b2 <Hex2Dec+0x4c>
    52a4:	89 81       	ldd	r24, Y+1	; 0x01
    52a6:	8a 33       	cpi	r24, 0x3A	; 58
    52a8:	20 f4       	brcc	.+8      	; 0x52b2 <Hex2Dec+0x4c>
    52aa:	89 81       	ldd	r24, Y+1	; 0x01
    52ac:	80 53       	subi	r24, 0x30	; 48
    52ae:	89 83       	std	Y+1, r24	; 0x01
    52b0:	13 c0       	rjmp	.+38     	; 0x52d8 <Hex2Dec+0x72>
		else if (byte >= 'a' && byte <='f') byte = byte - 'a' + 10;
    52b2:	89 81       	ldd	r24, Y+1	; 0x01
    52b4:	81 36       	cpi	r24, 0x61	; 97
    52b6:	38 f0       	brcs	.+14     	; 0x52c6 <Hex2Dec+0x60>
    52b8:	89 81       	ldd	r24, Y+1	; 0x01
    52ba:	87 36       	cpi	r24, 0x67	; 103
    52bc:	20 f4       	brcc	.+8      	; 0x52c6 <Hex2Dec+0x60>
    52be:	89 81       	ldd	r24, Y+1	; 0x01
    52c0:	87 55       	subi	r24, 0x57	; 87
    52c2:	89 83       	std	Y+1, r24	; 0x01
    52c4:	09 c0       	rjmp	.+18     	; 0x52d8 <Hex2Dec+0x72>
		else if (byte >= 'A' && byte <='F') byte = byte - 'A' + 10;
    52c6:	89 81       	ldd	r24, Y+1	; 0x01
    52c8:	81 34       	cpi	r24, 0x41	; 65
    52ca:	30 f0       	brcs	.+12     	; 0x52d8 <Hex2Dec+0x72>
    52cc:	89 81       	ldd	r24, Y+1	; 0x01
    52ce:	87 34       	cpi	r24, 0x47	; 71
    52d0:	18 f4       	brcc	.+6      	; 0x52d8 <Hex2Dec+0x72>
    52d2:	89 81       	ldd	r24, Y+1	; 0x01
    52d4:	87 53       	subi	r24, 0x37	; 55
    52d6:	89 83       	std	Y+1, r24	; 0x01
		val = (val << 4) | byte; // 0000 0000 0000 0000
    52d8:	8a 81       	ldd	r24, Y+2	; 0x02
    52da:	9b 81       	ldd	r25, Y+3	; 0x03
    52dc:	9c 01       	movw	r18, r24
    52de:	22 95       	swap	r18
    52e0:	32 95       	swap	r19
    52e2:	30 7f       	andi	r19, 0xF0	; 240
    52e4:	32 27       	eor	r19, r18
    52e6:	20 7f       	andi	r18, 0xF0	; 240
    52e8:	32 27       	eor	r19, r18
    52ea:	89 81       	ldd	r24, Y+1	; 0x01
    52ec:	88 2f       	mov	r24, r24
    52ee:	90 e0       	ldi	r25, 0x00	; 0
    52f0:	82 2b       	or	r24, r18
    52f2:	93 2b       	or	r25, r19
    52f4:	9b 83       	std	Y+3, r25	; 0x03
    52f6:	8a 83       	std	Y+2, r24	; 0x02

u16 Hex2Dec(char * HexNumber)
{
	u16 val = 0;
	u8 byte;
	for( i =15;i>=0;i-- )
    52f8:	80 91 7f 02 	lds	r24, 0x027F
    52fc:	81 50       	subi	r24, 0x01	; 1
    52fe:	80 93 7f 02 	sts	0x027F, r24
    5302:	80 91 7f 02 	lds	r24, 0x027F
    5306:	88 23       	and	r24, r24
    5308:	0c f0       	brlt	.+2      	; 0x530c <Hex2Dec+0xa6>
    530a:	bc cf       	rjmp	.-136    	; 0x5284 <Hex2Dec+0x1e>
		if (byte >= '0' && byte <= '9') byte = byte - '0';
		else if (byte >= 'a' && byte <='f') byte = byte - 'a' + 10;
		else if (byte >= 'A' && byte <='F') byte = byte - 'A' + 10;
		val = (val << 4) | byte; // 0000 0000 0000 0000
	}
	return val;                               //      123      32100000000000000000/0
    530c:	8a 81       	ldd	r24, Y+2	; 0x02
    530e:	9b 81       	ldd	r25, Y+3	; 0x03
}
    5310:	0f 90       	pop	r0
    5312:	0f 90       	pop	r0
    5314:	0f 90       	pop	r0
    5316:	0f 90       	pop	r0
    5318:	0f 90       	pop	r0
    531a:	cf 91       	pop	r28
    531c:	df 91       	pop	r29
    531e:	08 95       	ret

00005320 <Oct2Dec>:

u16 Oct2Dec(u8 * OctNumber)
{
    5320:	2f 92       	push	r2
    5322:	3f 92       	push	r3
    5324:	4f 92       	push	r4
    5326:	5f 92       	push	r5
    5328:	6f 92       	push	r6
    532a:	7f 92       	push	r7
    532c:	8f 92       	push	r8
    532e:	9f 92       	push	r9
    5330:	af 92       	push	r10
    5332:	bf 92       	push	r11
    5334:	cf 92       	push	r12
    5336:	df 92       	push	r13
    5338:	ef 92       	push	r14
    533a:	ff 92       	push	r15
    533c:	0f 93       	push	r16
    533e:	1f 93       	push	r17
    5340:	df 93       	push	r29
    5342:	cf 93       	push	r28
    5344:	cd b7       	in	r28, 0x3d	; 61
    5346:	de b7       	in	r29, 0x3e	; 62
    5348:	2b 97       	sbiw	r28, 0x0b	; 11
    534a:	0f b6       	in	r0, 0x3f	; 63
    534c:	f8 94       	cli
    534e:	de bf       	out	0x3e, r29	; 62
    5350:	0f be       	out	0x3f, r0	; 63
    5352:	cd bf       	out	0x3d, r28	; 61
    5354:	9b 87       	std	Y+11, r25	; 0x0b
    5356:	8a 87       	std	Y+10, r24	; 0x0a
	u64 val = 0;
    5358:	1a 82       	std	Y+2, r1	; 0x02
    535a:	1b 82       	std	Y+3, r1	; 0x03
    535c:	1c 82       	std	Y+4, r1	; 0x04
    535e:	1d 82       	std	Y+5, r1	; 0x05
    5360:	1e 82       	std	Y+6, r1	; 0x06
    5362:	1f 82       	std	Y+7, r1	; 0x07
    5364:	18 86       	std	Y+8, r1	; 0x08
    5366:	19 86       	std	Y+9, r1	; 0x09
	u8 byte;
	for( i =15;i>=0;i-- )
    5368:	8f e0       	ldi	r24, 0x0F	; 15
    536a:	80 93 7f 02 	sts	0x027F, r24
    536e:	55 c0       	rjmp	.+170    	; 0x541a <Oct2Dec+0xfa>
	{
		byte = OctNumber[i];
    5370:	80 91 7f 02 	lds	r24, 0x027F
    5374:	28 2f       	mov	r18, r24
    5376:	33 27       	eor	r19, r19
    5378:	27 fd       	sbrc	r18, 7
    537a:	30 95       	com	r19
    537c:	8a 85       	ldd	r24, Y+10	; 0x0a
    537e:	9b 85       	ldd	r25, Y+11	; 0x0b
    5380:	fc 01       	movw	r30, r24
    5382:	e2 0f       	add	r30, r18
    5384:	f3 1f       	adc	r31, r19
    5386:	80 81       	ld	r24, Z
    5388:	89 83       	std	Y+1, r24	; 0x01
		val = (val << 3) | (byte - '0');
    538a:	2a 81       	ldd	r18, Y+2	; 0x02
    538c:	3b 81       	ldd	r19, Y+3	; 0x03
    538e:	4c 81       	ldd	r20, Y+4	; 0x04
    5390:	5d 81       	ldd	r21, Y+5	; 0x05
    5392:	6e 81       	ldd	r22, Y+6	; 0x06
    5394:	7f 81       	ldd	r23, Y+7	; 0x07
    5396:	88 85       	ldd	r24, Y+8	; 0x08
    5398:	99 85       	ldd	r25, Y+9	; 0x09
    539a:	03 e0       	ldi	r16, 0x03	; 3
    539c:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    53a0:	a2 2e       	mov	r10, r18
    53a2:	b3 2e       	mov	r11, r19
    53a4:	c4 2e       	mov	r12, r20
    53a6:	d5 2e       	mov	r13, r21
    53a8:	e6 2e       	mov	r14, r22
    53aa:	f7 2e       	mov	r15, r23
    53ac:	08 2f       	mov	r16, r24
    53ae:	19 2f       	mov	r17, r25
    53b0:	2a 2c       	mov	r2, r10
    53b2:	3b 2c       	mov	r3, r11
    53b4:	4c 2c       	mov	r4, r12
    53b6:	5d 2c       	mov	r5, r13
    53b8:	6e 2c       	mov	r6, r14
    53ba:	7f 2c       	mov	r7, r15
    53bc:	80 2e       	mov	r8, r16
    53be:	91 2e       	mov	r9, r17
    53c0:	89 81       	ldd	r24, Y+1	; 0x01
    53c2:	88 2f       	mov	r24, r24
    53c4:	90 e0       	ldi	r25, 0x00	; 0
    53c6:	dc 01       	movw	r26, r24
    53c8:	d0 97       	sbiw	r26, 0x30	; 48
    53ca:	fd 01       	movw	r30, r26
    53cc:	ff 0f       	add	r31, r31
    53ce:	ee 0b       	sbc	r30, r30
    53d0:	fe 2f       	mov	r31, r30
    53d2:	9d 01       	movw	r18, r26
    53d4:	4e 2f       	mov	r20, r30
    53d6:	5e 2f       	mov	r21, r30
    53d8:	6e 2f       	mov	r22, r30
    53da:	7e 2f       	mov	r23, r30
    53dc:	8e 2f       	mov	r24, r30
    53de:	9e 2f       	mov	r25, r30
    53e0:	e2 2d       	mov	r30, r2
    53e2:	e2 2b       	or	r30, r18
    53e4:	ea 83       	std	Y+2, r30	; 0x02
    53e6:	e3 2d       	mov	r30, r3
    53e8:	e3 2b       	or	r30, r19
    53ea:	eb 83       	std	Y+3, r30	; 0x03
    53ec:	e4 2d       	mov	r30, r4
    53ee:	e4 2b       	or	r30, r20
    53f0:	ec 83       	std	Y+4, r30	; 0x04
    53f2:	e5 2d       	mov	r30, r5
    53f4:	e5 2b       	or	r30, r21
    53f6:	ed 83       	std	Y+5, r30	; 0x05
    53f8:	e6 2d       	mov	r30, r6
    53fa:	e6 2b       	or	r30, r22
    53fc:	ee 83       	std	Y+6, r30	; 0x06
    53fe:	e7 2d       	mov	r30, r7
    5400:	e7 2b       	or	r30, r23
    5402:	ef 83       	std	Y+7, r30	; 0x07
    5404:	e8 2d       	mov	r30, r8
    5406:	e8 2b       	or	r30, r24
    5408:	e8 87       	std	Y+8, r30	; 0x08
    540a:	89 2d       	mov	r24, r9
    540c:	89 2b       	or	r24, r25
    540e:	89 87       	std	Y+9, r24	; 0x09

u16 Oct2Dec(u8 * OctNumber)
{
	u64 val = 0;
	u8 byte;
	for( i =15;i>=0;i-- )
    5410:	80 91 7f 02 	lds	r24, 0x027F
    5414:	81 50       	subi	r24, 0x01	; 1
    5416:	80 93 7f 02 	sts	0x027F, r24
    541a:	80 91 7f 02 	lds	r24, 0x027F
    541e:	88 23       	and	r24, r24
    5420:	0c f0       	brlt	.+2      	; 0x5424 <Oct2Dec+0x104>
    5422:	a6 cf       	rjmp	.-180    	; 0x5370 <Oct2Dec+0x50>
		byte = OctNumber[i];
		val = (val << 3) | (byte - '0');
	}


	return val;
    5424:	8a 81       	ldd	r24, Y+2	; 0x02
    5426:	9b 81       	ldd	r25, Y+3	; 0x03
}
    5428:	2b 96       	adiw	r28, 0x0b	; 11
    542a:	0f b6       	in	r0, 0x3f	; 63
    542c:	f8 94       	cli
    542e:	de bf       	out	0x3e, r29	; 62
    5430:	0f be       	out	0x3f, r0	; 63
    5432:	cd bf       	out	0x3d, r28	; 61
    5434:	cf 91       	pop	r28
    5436:	df 91       	pop	r29
    5438:	1f 91       	pop	r17
    543a:	0f 91       	pop	r16
    543c:	ff 90       	pop	r15
    543e:	ef 90       	pop	r14
    5440:	df 90       	pop	r13
    5442:	cf 90       	pop	r12
    5444:	bf 90       	pop	r11
    5446:	af 90       	pop	r10
    5448:	9f 90       	pop	r9
    544a:	8f 90       	pop	r8
    544c:	7f 90       	pop	r7
    544e:	6f 90       	pop	r6
    5450:	5f 90       	pop	r5
    5452:	4f 90       	pop	r4
    5454:	3f 90       	pop	r3
    5456:	2f 90       	pop	r2
    5458:	08 95       	ret

0000545a <Bin2Dec>:



u16 Bin2Dec(u8 * BinNumber)
{
    545a:	df 93       	push	r29
    545c:	cf 93       	push	r28
    545e:	00 d0       	rcall	.+0      	; 0x5460 <Bin2Dec+0x6>
    5460:	00 d0       	rcall	.+0      	; 0x5462 <Bin2Dec+0x8>
    5462:	0f 92       	push	r0
    5464:	cd b7       	in	r28, 0x3d	; 61
    5466:	de b7       	in	r29, 0x3e	; 62
    5468:	9d 83       	std	Y+5, r25	; 0x05
    546a:	8c 83       	std	Y+4, r24	; 0x04
	u16 val = 0;
    546c:	1b 82       	std	Y+3, r1	; 0x03
    546e:	1a 82       	std	Y+2, r1	; 0x02
	u8 byte;
	for( i =15;i>=0;i-- )
    5470:	8f e0       	ldi	r24, 0x0F	; 15
    5472:	80 93 7f 02 	sts	0x027F, r24
    5476:	1f c0       	rjmp	.+62     	; 0x54b6 <Bin2Dec+0x5c>
	{
		byte = BinNumber[i]; // 1 0 1 0 0 0 0 0 0 0 0 0
    5478:	80 91 7f 02 	lds	r24, 0x027F
    547c:	28 2f       	mov	r18, r24
    547e:	33 27       	eor	r19, r19
    5480:	27 fd       	sbrc	r18, 7
    5482:	30 95       	com	r19
    5484:	8c 81       	ldd	r24, Y+4	; 0x04
    5486:	9d 81       	ldd	r25, Y+5	; 0x05
    5488:	fc 01       	movw	r30, r24
    548a:	e2 0f       	add	r30, r18
    548c:	f3 1f       	adc	r31, r19
    548e:	80 81       	ld	r24, Z
    5490:	89 83       	std	Y+1, r24	; 0x01
		val = (val << 1) | (byte - '0');
    5492:	8a 81       	ldd	r24, Y+2	; 0x02
    5494:	9b 81       	ldd	r25, Y+3	; 0x03
    5496:	9c 01       	movw	r18, r24
    5498:	22 0f       	add	r18, r18
    549a:	33 1f       	adc	r19, r19
    549c:	89 81       	ldd	r24, Y+1	; 0x01
    549e:	88 2f       	mov	r24, r24
    54a0:	90 e0       	ldi	r25, 0x00	; 0
    54a2:	c0 97       	sbiw	r24, 0x30	; 48
    54a4:	82 2b       	or	r24, r18
    54a6:	93 2b       	or	r25, r19
    54a8:	9b 83       	std	Y+3, r25	; 0x03
    54aa:	8a 83       	std	Y+2, r24	; 0x02

u16 Bin2Dec(u8 * BinNumber)
{
	u16 val = 0;
	u8 byte;
	for( i =15;i>=0;i-- )
    54ac:	80 91 7f 02 	lds	r24, 0x027F
    54b0:	81 50       	subi	r24, 0x01	; 1
    54b2:	80 93 7f 02 	sts	0x027F, r24
    54b6:	80 91 7f 02 	lds	r24, 0x027F
    54ba:	88 23       	and	r24, r24
    54bc:	ec f6       	brge	.-70     	; 0x5478 <Bin2Dec+0x1e>
	{
		byte = BinNumber[i]; // 1 0 1 0 0 0 0 0 0 0 0 0
		val = (val << 1) | (byte - '0');
	}
	return val;
    54be:	8a 81       	ldd	r24, Y+2	; 0x02
    54c0:	9b 81       	ldd	r25, Y+3	; 0x03
}
    54c2:	0f 90       	pop	r0
    54c4:	0f 90       	pop	r0
    54c6:	0f 90       	pop	r0
    54c8:	0f 90       	pop	r0
    54ca:	0f 90       	pop	r0
    54cc:	cf 91       	pop	r28
    54ce:	df 91       	pop	r29
    54d0:	08 95       	ret

000054d2 <_sinh>:




f32 _sinh(f32 x)
{
    54d2:	ef 92       	push	r14
    54d4:	ff 92       	push	r15
    54d6:	0f 93       	push	r16
    54d8:	1f 93       	push	r17
    54da:	df 93       	push	r29
    54dc:	cf 93       	push	r28
    54de:	00 d0       	rcall	.+0      	; 0x54e0 <_sinh+0xe>
    54e0:	00 d0       	rcall	.+0      	; 0x54e2 <_sinh+0x10>
    54e2:	cd b7       	in	r28, 0x3d	; 61
    54e4:	de b7       	in	r29, 0x3e	; 62
    54e6:	69 83       	std	Y+1, r22	; 0x01
    54e8:	7a 83       	std	Y+2, r23	; 0x02
    54ea:	8b 83       	std	Y+3, r24	; 0x03
    54ec:	9c 83       	std	Y+4, r25	; 0x04
	return (expo(x) - expo(-x))/2;
    54ee:	89 81       	ldd	r24, Y+1	; 0x01
    54f0:	9a 81       	ldd	r25, Y+2	; 0x02
    54f2:	ab 81       	ldd	r26, Y+3	; 0x03
    54f4:	bc 81       	ldd	r27, Y+4	; 0x04
    54f6:	bc 01       	movw	r22, r24
    54f8:	cd 01       	movw	r24, r26
    54fa:	0e 94 97 23 	call	0x472e	; 0x472e <expo>
    54fe:	7b 01       	movw	r14, r22
    5500:	8c 01       	movw	r16, r24
    5502:	89 81       	ldd	r24, Y+1	; 0x01
    5504:	9a 81       	ldd	r25, Y+2	; 0x02
    5506:	ab 81       	ldd	r26, Y+3	; 0x03
    5508:	bc 81       	ldd	r27, Y+4	; 0x04
    550a:	b0 58       	subi	r27, 0x80	; 128
    550c:	bc 01       	movw	r22, r24
    550e:	cd 01       	movw	r24, r26
    5510:	0e 94 97 23 	call	0x472e	; 0x472e <expo>
    5514:	9b 01       	movw	r18, r22
    5516:	ac 01       	movw	r20, r24
    5518:	c8 01       	movw	r24, r16
    551a:	b7 01       	movw	r22, r14
    551c:	0e 94 bf 02 	call	0x57e	; 0x57e <__subsf3>
    5520:	dc 01       	movw	r26, r24
    5522:	cb 01       	movw	r24, r22
    5524:	bc 01       	movw	r22, r24
    5526:	cd 01       	movw	r24, r26
    5528:	20 e0       	ldi	r18, 0x00	; 0
    552a:	30 e0       	ldi	r19, 0x00	; 0
    552c:	40 e0       	ldi	r20, 0x00	; 0
    552e:	50 e4       	ldi	r21, 0x40	; 64
    5530:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    5534:	dc 01       	movw	r26, r24
    5536:	cb 01       	movw	r24, r22
}
    5538:	bc 01       	movw	r22, r24
    553a:	cd 01       	movw	r24, r26
    553c:	0f 90       	pop	r0
    553e:	0f 90       	pop	r0
    5540:	0f 90       	pop	r0
    5542:	0f 90       	pop	r0
    5544:	cf 91       	pop	r28
    5546:	df 91       	pop	r29
    5548:	1f 91       	pop	r17
    554a:	0f 91       	pop	r16
    554c:	ff 90       	pop	r15
    554e:	ef 90       	pop	r14
    5550:	08 95       	ret

00005552 <_cosh>:



f32 _cosh(f32 x)
{
    5552:	ef 92       	push	r14
    5554:	ff 92       	push	r15
    5556:	0f 93       	push	r16
    5558:	1f 93       	push	r17
    555a:	df 93       	push	r29
    555c:	cf 93       	push	r28
    555e:	00 d0       	rcall	.+0      	; 0x5560 <_cosh+0xe>
    5560:	00 d0       	rcall	.+0      	; 0x5562 <_cosh+0x10>
    5562:	cd b7       	in	r28, 0x3d	; 61
    5564:	de b7       	in	r29, 0x3e	; 62
    5566:	69 83       	std	Y+1, r22	; 0x01
    5568:	7a 83       	std	Y+2, r23	; 0x02
    556a:	8b 83       	std	Y+3, r24	; 0x03
    556c:	9c 83       	std	Y+4, r25	; 0x04
	return (expo(x) + expo(-x))/2;
    556e:	89 81       	ldd	r24, Y+1	; 0x01
    5570:	9a 81       	ldd	r25, Y+2	; 0x02
    5572:	ab 81       	ldd	r26, Y+3	; 0x03
    5574:	bc 81       	ldd	r27, Y+4	; 0x04
    5576:	bc 01       	movw	r22, r24
    5578:	cd 01       	movw	r24, r26
    557a:	0e 94 97 23 	call	0x472e	; 0x472e <expo>
    557e:	7b 01       	movw	r14, r22
    5580:	8c 01       	movw	r16, r24
    5582:	89 81       	ldd	r24, Y+1	; 0x01
    5584:	9a 81       	ldd	r25, Y+2	; 0x02
    5586:	ab 81       	ldd	r26, Y+3	; 0x03
    5588:	bc 81       	ldd	r27, Y+4	; 0x04
    558a:	b0 58       	subi	r27, 0x80	; 128
    558c:	bc 01       	movw	r22, r24
    558e:	cd 01       	movw	r24, r26
    5590:	0e 94 97 23 	call	0x472e	; 0x472e <expo>
    5594:	9b 01       	movw	r18, r22
    5596:	ac 01       	movw	r20, r24
    5598:	c8 01       	movw	r24, r16
    559a:	b7 01       	movw	r22, r14
    559c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__addsf3>
    55a0:	dc 01       	movw	r26, r24
    55a2:	cb 01       	movw	r24, r22
    55a4:	bc 01       	movw	r22, r24
    55a6:	cd 01       	movw	r24, r26
    55a8:	20 e0       	ldi	r18, 0x00	; 0
    55aa:	30 e0       	ldi	r19, 0x00	; 0
    55ac:	40 e0       	ldi	r20, 0x00	; 0
    55ae:	50 e4       	ldi	r21, 0x40	; 64
    55b0:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    55b4:	dc 01       	movw	r26, r24
    55b6:	cb 01       	movw	r24, r22
}
    55b8:	bc 01       	movw	r22, r24
    55ba:	cd 01       	movw	r24, r26
    55bc:	0f 90       	pop	r0
    55be:	0f 90       	pop	r0
    55c0:	0f 90       	pop	r0
    55c2:	0f 90       	pop	r0
    55c4:	cf 91       	pop	r28
    55c6:	df 91       	pop	r29
    55c8:	1f 91       	pop	r17
    55ca:	0f 91       	pop	r16
    55cc:	ff 90       	pop	r15
    55ce:	ef 90       	pop	r14
    55d0:	08 95       	ret

000055d2 <_tanh>:



f32 _tanh(f32 x)
{
    55d2:	ef 92       	push	r14
    55d4:	ff 92       	push	r15
    55d6:	0f 93       	push	r16
    55d8:	1f 93       	push	r17
    55da:	df 93       	push	r29
    55dc:	cf 93       	push	r28
    55de:	00 d0       	rcall	.+0      	; 0x55e0 <_tanh+0xe>
    55e0:	00 d0       	rcall	.+0      	; 0x55e2 <_tanh+0x10>
    55e2:	cd b7       	in	r28, 0x3d	; 61
    55e4:	de b7       	in	r29, 0x3e	; 62
    55e6:	69 83       	std	Y+1, r22	; 0x01
    55e8:	7a 83       	std	Y+2, r23	; 0x02
    55ea:	8b 83       	std	Y+3, r24	; 0x03
    55ec:	9c 83       	std	Y+4, r25	; 0x04
	return _sinh(x)/_cosh(x);
    55ee:	89 81       	ldd	r24, Y+1	; 0x01
    55f0:	9a 81       	ldd	r25, Y+2	; 0x02
    55f2:	ab 81       	ldd	r26, Y+3	; 0x03
    55f4:	bc 81       	ldd	r27, Y+4	; 0x04
    55f6:	bc 01       	movw	r22, r24
    55f8:	cd 01       	movw	r24, r26
    55fa:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <_sinh>
    55fe:	7b 01       	movw	r14, r22
    5600:	8c 01       	movw	r16, r24
    5602:	89 81       	ldd	r24, Y+1	; 0x01
    5604:	9a 81       	ldd	r25, Y+2	; 0x02
    5606:	ab 81       	ldd	r26, Y+3	; 0x03
    5608:	bc 81       	ldd	r27, Y+4	; 0x04
    560a:	bc 01       	movw	r22, r24
    560c:	cd 01       	movw	r24, r26
    560e:	0e 94 a9 2a 	call	0x5552	; 0x5552 <_cosh>
    5612:	9b 01       	movw	r18, r22
    5614:	ac 01       	movw	r20, r24
    5616:	c8 01       	movw	r24, r16
    5618:	b7 01       	movw	r22, r14
    561a:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    561e:	dc 01       	movw	r26, r24
    5620:	cb 01       	movw	r24, r22
}
    5622:	bc 01       	movw	r22, r24
    5624:	cd 01       	movw	r24, r26
    5626:	0f 90       	pop	r0
    5628:	0f 90       	pop	r0
    562a:	0f 90       	pop	r0
    562c:	0f 90       	pop	r0
    562e:	cf 91       	pop	r28
    5630:	df 91       	pop	r29
    5632:	1f 91       	pop	r17
    5634:	0f 91       	pop	r16
    5636:	ff 90       	pop	r15
    5638:	ef 90       	pop	r14
    563a:	08 95       	ret

0000563c <DIO_enuInit>:
#include "DIO_priv.h"
#include "DIO_config.h"
#include "../../SERVICE/errorState.h"


ES_t DIO_enuInit(void){
    563c:	df 93       	push	r29
    563e:	cf 93       	push	r28
    5640:	0f 92       	push	r0
    5642:	cd b7       	in	r28, 0x3d	; 61
    5644:	de b7       	in	r29, 0x3e	; 62

	ES_t Local_enuErrorState = ES_NOK;
    5646:	19 82       	std	Y+1, r1	; 0x01
	DDRA = CONC(PA_PIN7_DIR , PA_PIN6_DIR , PA_PIN5_DIR , PA_PIN4_DIR , PA_PIN3_DIR , PA_PIN2_DIR, PA_PIN1_DIR, PA_PIN0_DIR);
    5648:	ea e3       	ldi	r30, 0x3A	; 58
    564a:	f0 e0       	ldi	r31, 0x00	; 0
    564c:	8f ef       	ldi	r24, 0xFF	; 255
    564e:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR , PB_PIN6_DIR , PB_PIN5_DIR , PB_PIN4_DIR , PB_PIN3_DIR , PB_PIN2_DIR, PB_PIN1_DIR, PB_PIN0_DIR);
    5650:	e7 e3       	ldi	r30, 0x37	; 55
    5652:	f0 e0       	ldi	r31, 0x00	; 0
    5654:	87 e0       	ldi	r24, 0x07	; 7
    5656:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR , PC_PIN6_DIR , PC_PIN5_DIR , PC_PIN4_DIR , PC_PIN3_DIR , PC_PIN2_DIR, PC_PIN1_DIR, PC_PIN0_DIR);
    5658:	e4 e3       	ldi	r30, 0x34	; 52
    565a:	f0 e0       	ldi	r31, 0x00	; 0
    565c:	87 e9       	ldi	r24, 0x97	; 151
    565e:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR , PD_PIN6_DIR , PD_PIN5_DIR , PD_PIN4_DIR , PD_PIN3_DIR , PD_PIN2_DIR, PD_PIN1_DIR, PD_PIN0_DIR);
    5660:	e1 e3       	ldi	r30, 0x31	; 49
    5662:	f0 e0       	ldi	r31, 0x00	; 0
    5664:	8f e9       	ldi	r24, 0x9F	; 159
    5666:	80 83       	st	Z, r24

	PORTA = CONC(PA_PIN7_VAL , PA_PIN6_VAL , PA_PIN5_VAL , PA_PIN4_VAL , PA_PIN3_VAL , PA_PIN2_VAL, PA_PIN1_VAL, PA_PIN0_VAL);
    5668:	eb e3       	ldi	r30, 0x3B	; 59
    566a:	f0 e0       	ldi	r31, 0x00	; 0
    566c:	80 ef       	ldi	r24, 0xF0	; 240
    566e:	80 83       	st	Z, r24
	PORTB = CONC(PB_PIN7_VAL , PB_PIN6_VAL , PB_PIN5_VAL , PB_PIN4_VAL , PB_PIN3_VAL , PB_PIN2_VAL, PB_PIN1_VAL, PB_PIN0_VAL);
    5670:	e8 e3       	ldi	r30, 0x38	; 56
    5672:	f0 e0       	ldi	r31, 0x00	; 0
    5674:	8a ef       	ldi	r24, 0xFA	; 250
    5676:	80 83       	st	Z, r24
	PORTC = CONC(PC_PIN7_VAL , PC_PIN6_VAL , PC_PIN5_VAL , PC_PIN4_VAL , PC_PIN3_VAL , PC_PIN2_VAL, PC_PIN1_VAL, PC_PIN0_VAL);
    5678:	e5 e3       	ldi	r30, 0x35	; 53
    567a:	f0 e0       	ldi	r31, 0x00	; 0
    567c:	89 e5       	ldi	r24, 0x59	; 89
    567e:	80 83       	st	Z, r24
	PORTD = CONC(PD_PIN7_VAL , PD_PIN6_VAL , PD_PIN5_VAL , PD_PIN4_VAL , PD_PIN3_VAL , PD_PIN2_VAL, PD_PIN1_VAL, PD_PIN0_VAL);
    5680:	e2 e3       	ldi	r30, 0x32	; 50
    5682:	f0 e0       	ldi	r31, 0x00	; 0
    5684:	82 e5       	ldi	r24, 0x52	; 82
    5686:	80 83       	st	Z, r24

	Local_enuErrorState = ES_OK;
    5688:	81 e0       	ldi	r24, 0x01	; 1
    568a:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    568c:	89 81       	ldd	r24, Y+1	; 0x01
}
    568e:	0f 90       	pop	r0
    5690:	cf 91       	pop	r28
    5692:	df 91       	pop	r29
    5694:	08 95       	ret

00005696 <DIO_enuSetPinDir>:
//	return Local_enuErrorState;
//}



ES_t DIO_enuSetPinDir( u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8Val ){
    5696:	df 93       	push	r29
    5698:	cf 93       	push	r28
    569a:	00 d0       	rcall	.+0      	; 0x569c <DIO_enuSetPinDir+0x6>
    569c:	00 d0       	rcall	.+0      	; 0x569e <DIO_enuSetPinDir+0x8>
    569e:	00 d0       	rcall	.+0      	; 0x56a0 <DIO_enuSetPinDir+0xa>
    56a0:	cd b7       	in	r28, 0x3d	; 61
    56a2:	de b7       	in	r29, 0x3e	; 62
    56a4:	8a 83       	std	Y+2, r24	; 0x02
    56a6:	6b 83       	std	Y+3, r22	; 0x03
    56a8:	4c 83       	std	Y+4, r20	; 0x04

	ES_t Local_enuErrorState = ES_NOK;
    56aa:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Val <= OUTPUT )
    56ac:	8a 81       	ldd	r24, Y+2	; 0x02
    56ae:	84 30       	cpi	r24, 0x04	; 4
    56b0:	08 f0       	brcs	.+2      	; 0x56b4 <DIO_enuSetPinDir+0x1e>
    56b2:	d1 c0       	rjmp	.+418    	; 0x5856 <DIO_enuSetPinDir+0x1c0>
    56b4:	8b 81       	ldd	r24, Y+3	; 0x03
    56b6:	88 30       	cpi	r24, 0x08	; 8
    56b8:	08 f0       	brcs	.+2      	; 0x56bc <DIO_enuSetPinDir+0x26>
    56ba:	cd c0       	rjmp	.+410    	; 0x5856 <DIO_enuSetPinDir+0x1c0>
    56bc:	8c 81       	ldd	r24, Y+4	; 0x04
    56be:	82 30       	cpi	r24, 0x02	; 2
    56c0:	08 f0       	brcs	.+2      	; 0x56c4 <DIO_enuSetPinDir+0x2e>
    56c2:	c9 c0       	rjmp	.+402    	; 0x5856 <DIO_enuSetPinDir+0x1c0>
	{

		switch(Copy_u8PortID)
    56c4:	8a 81       	ldd	r24, Y+2	; 0x02
    56c6:	28 2f       	mov	r18, r24
    56c8:	30 e0       	ldi	r19, 0x00	; 0
    56ca:	3e 83       	std	Y+6, r19	; 0x06
    56cc:	2d 83       	std	Y+5, r18	; 0x05
    56ce:	6d 81       	ldd	r22, Y+5	; 0x05
    56d0:	7e 81       	ldd	r23, Y+6	; 0x06
    56d2:	61 30       	cpi	r22, 0x01	; 1
    56d4:	71 05       	cpc	r23, r1
    56d6:	09 f4       	brne	.+2      	; 0x56da <DIO_enuSetPinDir+0x44>
    56d8:	41 c0       	rjmp	.+130    	; 0x575c <DIO_enuSetPinDir+0xc6>
    56da:	8d 81       	ldd	r24, Y+5	; 0x05
    56dc:	9e 81       	ldd	r25, Y+6	; 0x06
    56de:	82 30       	cpi	r24, 0x02	; 2
    56e0:	91 05       	cpc	r25, r1
    56e2:	34 f4       	brge	.+12     	; 0x56f0 <DIO_enuSetPinDir+0x5a>
    56e4:	2d 81       	ldd	r18, Y+5	; 0x05
    56e6:	3e 81       	ldd	r19, Y+6	; 0x06
    56e8:	21 15       	cp	r18, r1
    56ea:	31 05       	cpc	r19, r1
    56ec:	71 f0       	breq	.+28     	; 0x570a <DIO_enuSetPinDir+0x74>
    56ee:	b0 c0       	rjmp	.+352    	; 0x5850 <DIO_enuSetPinDir+0x1ba>
    56f0:	6d 81       	ldd	r22, Y+5	; 0x05
    56f2:	7e 81       	ldd	r23, Y+6	; 0x06
    56f4:	62 30       	cpi	r22, 0x02	; 2
    56f6:	71 05       	cpc	r23, r1
    56f8:	09 f4       	brne	.+2      	; 0x56fc <DIO_enuSetPinDir+0x66>
    56fa:	59 c0       	rjmp	.+178    	; 0x57ae <DIO_enuSetPinDir+0x118>
    56fc:	8d 81       	ldd	r24, Y+5	; 0x05
    56fe:	9e 81       	ldd	r25, Y+6	; 0x06
    5700:	83 30       	cpi	r24, 0x03	; 3
    5702:	91 05       	cpc	r25, r1
    5704:	09 f4       	brne	.+2      	; 0x5708 <DIO_enuSetPinDir+0x72>
    5706:	7c c0       	rjmp	.+248    	; 0x5800 <DIO_enuSetPinDir+0x16a>
    5708:	a3 c0       	rjmp	.+326    	; 0x5850 <DIO_enuSetPinDir+0x1ba>
		{
		case DIO_PORTA :
			DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
    570a:	aa e3       	ldi	r26, 0x3A	; 58
    570c:	b0 e0       	ldi	r27, 0x00	; 0
    570e:	ea e3       	ldi	r30, 0x3A	; 58
    5710:	f0 e0       	ldi	r31, 0x00	; 0
    5712:	80 81       	ld	r24, Z
    5714:	48 2f       	mov	r20, r24
    5716:	8b 81       	ldd	r24, Y+3	; 0x03
    5718:	28 2f       	mov	r18, r24
    571a:	30 e0       	ldi	r19, 0x00	; 0
    571c:	81 e0       	ldi	r24, 0x01	; 1
    571e:	90 e0       	ldi	r25, 0x00	; 0
    5720:	02 c0       	rjmp	.+4      	; 0x5726 <DIO_enuSetPinDir+0x90>
    5722:	88 0f       	add	r24, r24
    5724:	99 1f       	adc	r25, r25
    5726:	2a 95       	dec	r18
    5728:	e2 f7       	brpl	.-8      	; 0x5722 <DIO_enuSetPinDir+0x8c>
    572a:	80 95       	com	r24
    572c:	84 23       	and	r24, r20
    572e:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Val << Copy_u8PinID);
    5730:	aa e3       	ldi	r26, 0x3A	; 58
    5732:	b0 e0       	ldi	r27, 0x00	; 0
    5734:	ea e3       	ldi	r30, 0x3A	; 58
    5736:	f0 e0       	ldi	r31, 0x00	; 0
    5738:	80 81       	ld	r24, Z
    573a:	48 2f       	mov	r20, r24
    573c:	8c 81       	ldd	r24, Y+4	; 0x04
    573e:	28 2f       	mov	r18, r24
    5740:	30 e0       	ldi	r19, 0x00	; 0
    5742:	8b 81       	ldd	r24, Y+3	; 0x03
    5744:	88 2f       	mov	r24, r24
    5746:	90 e0       	ldi	r25, 0x00	; 0
    5748:	b9 01       	movw	r22, r18
    574a:	02 c0       	rjmp	.+4      	; 0x5750 <DIO_enuSetPinDir+0xba>
    574c:	66 0f       	add	r22, r22
    574e:	77 1f       	adc	r23, r23
    5750:	8a 95       	dec	r24
    5752:	e2 f7       	brpl	.-8      	; 0x574c <DIO_enuSetPinDir+0xb6>
    5754:	cb 01       	movw	r24, r22
    5756:	84 2b       	or	r24, r20
    5758:	8c 93       	st	X, r24
    575a:	7a c0       	rjmp	.+244    	; 0x5850 <DIO_enuSetPinDir+0x1ba>
			break;
		case DIO_PORTB :
			DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    575c:	a7 e3       	ldi	r26, 0x37	; 55
    575e:	b0 e0       	ldi	r27, 0x00	; 0
    5760:	e7 e3       	ldi	r30, 0x37	; 55
    5762:	f0 e0       	ldi	r31, 0x00	; 0
    5764:	80 81       	ld	r24, Z
    5766:	48 2f       	mov	r20, r24
    5768:	8b 81       	ldd	r24, Y+3	; 0x03
    576a:	28 2f       	mov	r18, r24
    576c:	30 e0       	ldi	r19, 0x00	; 0
    576e:	81 e0       	ldi	r24, 0x01	; 1
    5770:	90 e0       	ldi	r25, 0x00	; 0
    5772:	02 c0       	rjmp	.+4      	; 0x5778 <DIO_enuSetPinDir+0xe2>
    5774:	88 0f       	add	r24, r24
    5776:	99 1f       	adc	r25, r25
    5778:	2a 95       	dec	r18
    577a:	e2 f7       	brpl	.-8      	; 0x5774 <DIO_enuSetPinDir+0xde>
    577c:	80 95       	com	r24
    577e:	84 23       	and	r24, r20
    5780:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Val << Copy_u8PinID);
    5782:	a7 e3       	ldi	r26, 0x37	; 55
    5784:	b0 e0       	ldi	r27, 0x00	; 0
    5786:	e7 e3       	ldi	r30, 0x37	; 55
    5788:	f0 e0       	ldi	r31, 0x00	; 0
    578a:	80 81       	ld	r24, Z
    578c:	48 2f       	mov	r20, r24
    578e:	8c 81       	ldd	r24, Y+4	; 0x04
    5790:	28 2f       	mov	r18, r24
    5792:	30 e0       	ldi	r19, 0x00	; 0
    5794:	8b 81       	ldd	r24, Y+3	; 0x03
    5796:	88 2f       	mov	r24, r24
    5798:	90 e0       	ldi	r25, 0x00	; 0
    579a:	b9 01       	movw	r22, r18
    579c:	02 c0       	rjmp	.+4      	; 0x57a2 <DIO_enuSetPinDir+0x10c>
    579e:	66 0f       	add	r22, r22
    57a0:	77 1f       	adc	r23, r23
    57a2:	8a 95       	dec	r24
    57a4:	e2 f7       	brpl	.-8      	; 0x579e <DIO_enuSetPinDir+0x108>
    57a6:	cb 01       	movw	r24, r22
    57a8:	84 2b       	or	r24, r20
    57aa:	8c 93       	st	X, r24
    57ac:	51 c0       	rjmp	.+162    	; 0x5850 <DIO_enuSetPinDir+0x1ba>
			break;
		case DIO_PORTC :
			DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    57ae:	a4 e3       	ldi	r26, 0x34	; 52
    57b0:	b0 e0       	ldi	r27, 0x00	; 0
    57b2:	e4 e3       	ldi	r30, 0x34	; 52
    57b4:	f0 e0       	ldi	r31, 0x00	; 0
    57b6:	80 81       	ld	r24, Z
    57b8:	48 2f       	mov	r20, r24
    57ba:	8b 81       	ldd	r24, Y+3	; 0x03
    57bc:	28 2f       	mov	r18, r24
    57be:	30 e0       	ldi	r19, 0x00	; 0
    57c0:	81 e0       	ldi	r24, 0x01	; 1
    57c2:	90 e0       	ldi	r25, 0x00	; 0
    57c4:	02 c0       	rjmp	.+4      	; 0x57ca <DIO_enuSetPinDir+0x134>
    57c6:	88 0f       	add	r24, r24
    57c8:	99 1f       	adc	r25, r25
    57ca:	2a 95       	dec	r18
    57cc:	e2 f7       	brpl	.-8      	; 0x57c6 <DIO_enuSetPinDir+0x130>
    57ce:	80 95       	com	r24
    57d0:	84 23       	and	r24, r20
    57d2:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Val << Copy_u8PinID);
    57d4:	a4 e3       	ldi	r26, 0x34	; 52
    57d6:	b0 e0       	ldi	r27, 0x00	; 0
    57d8:	e4 e3       	ldi	r30, 0x34	; 52
    57da:	f0 e0       	ldi	r31, 0x00	; 0
    57dc:	80 81       	ld	r24, Z
    57de:	48 2f       	mov	r20, r24
    57e0:	8c 81       	ldd	r24, Y+4	; 0x04
    57e2:	28 2f       	mov	r18, r24
    57e4:	30 e0       	ldi	r19, 0x00	; 0
    57e6:	8b 81       	ldd	r24, Y+3	; 0x03
    57e8:	88 2f       	mov	r24, r24
    57ea:	90 e0       	ldi	r25, 0x00	; 0
    57ec:	b9 01       	movw	r22, r18
    57ee:	02 c0       	rjmp	.+4      	; 0x57f4 <DIO_enuSetPinDir+0x15e>
    57f0:	66 0f       	add	r22, r22
    57f2:	77 1f       	adc	r23, r23
    57f4:	8a 95       	dec	r24
    57f6:	e2 f7       	brpl	.-8      	; 0x57f0 <DIO_enuSetPinDir+0x15a>
    57f8:	cb 01       	movw	r24, r22
    57fa:	84 2b       	or	r24, r20
    57fc:	8c 93       	st	X, r24
    57fe:	28 c0       	rjmp	.+80     	; 0x5850 <DIO_enuSetPinDir+0x1ba>
			break;
		case DIO_PORTD :
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    5800:	a1 e3       	ldi	r26, 0x31	; 49
    5802:	b0 e0       	ldi	r27, 0x00	; 0
    5804:	e1 e3       	ldi	r30, 0x31	; 49
    5806:	f0 e0       	ldi	r31, 0x00	; 0
    5808:	80 81       	ld	r24, Z
    580a:	48 2f       	mov	r20, r24
    580c:	8b 81       	ldd	r24, Y+3	; 0x03
    580e:	28 2f       	mov	r18, r24
    5810:	30 e0       	ldi	r19, 0x00	; 0
    5812:	81 e0       	ldi	r24, 0x01	; 1
    5814:	90 e0       	ldi	r25, 0x00	; 0
    5816:	02 c0       	rjmp	.+4      	; 0x581c <DIO_enuSetPinDir+0x186>
    5818:	88 0f       	add	r24, r24
    581a:	99 1f       	adc	r25, r25
    581c:	2a 95       	dec	r18
    581e:	e2 f7       	brpl	.-8      	; 0x5818 <DIO_enuSetPinDir+0x182>
    5820:	80 95       	com	r24
    5822:	84 23       	and	r24, r20
    5824:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Val << Copy_u8PinID);
    5826:	a1 e3       	ldi	r26, 0x31	; 49
    5828:	b0 e0       	ldi	r27, 0x00	; 0
    582a:	e1 e3       	ldi	r30, 0x31	; 49
    582c:	f0 e0       	ldi	r31, 0x00	; 0
    582e:	80 81       	ld	r24, Z
    5830:	48 2f       	mov	r20, r24
    5832:	8c 81       	ldd	r24, Y+4	; 0x04
    5834:	28 2f       	mov	r18, r24
    5836:	30 e0       	ldi	r19, 0x00	; 0
    5838:	8b 81       	ldd	r24, Y+3	; 0x03
    583a:	88 2f       	mov	r24, r24
    583c:	90 e0       	ldi	r25, 0x00	; 0
    583e:	b9 01       	movw	r22, r18
    5840:	02 c0       	rjmp	.+4      	; 0x5846 <DIO_enuSetPinDir+0x1b0>
    5842:	66 0f       	add	r22, r22
    5844:	77 1f       	adc	r23, r23
    5846:	8a 95       	dec	r24
    5848:	e2 f7       	brpl	.-8      	; 0x5842 <DIO_enuSetPinDir+0x1ac>
    584a:	cb 01       	movw	r24, r22
    584c:	84 2b       	or	r24, r20
    584e:	8c 93       	st	X, r24
			break;
		}

		Local_enuErrorState = ES_OK;
    5850:	81 e0       	ldi	r24, 0x01	; 1
    5852:	89 83       	std	Y+1, r24	; 0x01
    5854:	02 c0       	rjmp	.+4      	; 0x585a <DIO_enuSetPinDir+0x1c4>

	}
	else Local_enuErrorState = ES_OUT_OF_RANGE;
    5856:	83 e0       	ldi	r24, 0x03	; 3
    5858:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    585a:	89 81       	ldd	r24, Y+1	; 0x01
}
    585c:	26 96       	adiw	r28, 0x06	; 6
    585e:	0f b6       	in	r0, 0x3f	; 63
    5860:	f8 94       	cli
    5862:	de bf       	out	0x3e, r29	; 62
    5864:	0f be       	out	0x3f, r0	; 63
    5866:	cd bf       	out	0x3d, r28	; 61
    5868:	cf 91       	pop	r28
    586a:	df 91       	pop	r29
    586c:	08 95       	ret

0000586e <DIO_enuSetPinVal>:


ES_t DIO_enuSetPinVal( u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8Val ){
    586e:	df 93       	push	r29
    5870:	cf 93       	push	r28
    5872:	00 d0       	rcall	.+0      	; 0x5874 <DIO_enuSetPinVal+0x6>
    5874:	00 d0       	rcall	.+0      	; 0x5876 <DIO_enuSetPinVal+0x8>
    5876:	00 d0       	rcall	.+0      	; 0x5878 <DIO_enuSetPinVal+0xa>
    5878:	cd b7       	in	r28, 0x3d	; 61
    587a:	de b7       	in	r29, 0x3e	; 62
    587c:	8a 83       	std	Y+2, r24	; 0x02
    587e:	6b 83       	std	Y+3, r22	; 0x03
    5880:	4c 83       	std	Y+4, r20	; 0x04

	ES_t Local_enuErrorState = ES_NOK;
    5882:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Val <= OUTPUT )
    5884:	8a 81       	ldd	r24, Y+2	; 0x02
    5886:	84 30       	cpi	r24, 0x04	; 4
    5888:	08 f0       	brcs	.+2      	; 0x588c <DIO_enuSetPinVal+0x1e>
    588a:	d1 c0       	rjmp	.+418    	; 0x5a2e <DIO_enuSetPinVal+0x1c0>
    588c:	8b 81       	ldd	r24, Y+3	; 0x03
    588e:	88 30       	cpi	r24, 0x08	; 8
    5890:	08 f0       	brcs	.+2      	; 0x5894 <DIO_enuSetPinVal+0x26>
    5892:	cd c0       	rjmp	.+410    	; 0x5a2e <DIO_enuSetPinVal+0x1c0>
    5894:	8c 81       	ldd	r24, Y+4	; 0x04
    5896:	82 30       	cpi	r24, 0x02	; 2
    5898:	08 f0       	brcs	.+2      	; 0x589c <DIO_enuSetPinVal+0x2e>
    589a:	c9 c0       	rjmp	.+402    	; 0x5a2e <DIO_enuSetPinVal+0x1c0>
	{

		switch(Copy_u8PortID)
    589c:	8a 81       	ldd	r24, Y+2	; 0x02
    589e:	28 2f       	mov	r18, r24
    58a0:	30 e0       	ldi	r19, 0x00	; 0
    58a2:	3e 83       	std	Y+6, r19	; 0x06
    58a4:	2d 83       	std	Y+5, r18	; 0x05
    58a6:	6d 81       	ldd	r22, Y+5	; 0x05
    58a8:	7e 81       	ldd	r23, Y+6	; 0x06
    58aa:	61 30       	cpi	r22, 0x01	; 1
    58ac:	71 05       	cpc	r23, r1
    58ae:	09 f4       	brne	.+2      	; 0x58b2 <DIO_enuSetPinVal+0x44>
    58b0:	41 c0       	rjmp	.+130    	; 0x5934 <DIO_enuSetPinVal+0xc6>
    58b2:	8d 81       	ldd	r24, Y+5	; 0x05
    58b4:	9e 81       	ldd	r25, Y+6	; 0x06
    58b6:	82 30       	cpi	r24, 0x02	; 2
    58b8:	91 05       	cpc	r25, r1
    58ba:	34 f4       	brge	.+12     	; 0x58c8 <DIO_enuSetPinVal+0x5a>
    58bc:	2d 81       	ldd	r18, Y+5	; 0x05
    58be:	3e 81       	ldd	r19, Y+6	; 0x06
    58c0:	21 15       	cp	r18, r1
    58c2:	31 05       	cpc	r19, r1
    58c4:	71 f0       	breq	.+28     	; 0x58e2 <DIO_enuSetPinVal+0x74>
    58c6:	b0 c0       	rjmp	.+352    	; 0x5a28 <DIO_enuSetPinVal+0x1ba>
    58c8:	6d 81       	ldd	r22, Y+5	; 0x05
    58ca:	7e 81       	ldd	r23, Y+6	; 0x06
    58cc:	62 30       	cpi	r22, 0x02	; 2
    58ce:	71 05       	cpc	r23, r1
    58d0:	09 f4       	brne	.+2      	; 0x58d4 <DIO_enuSetPinVal+0x66>
    58d2:	59 c0       	rjmp	.+178    	; 0x5986 <DIO_enuSetPinVal+0x118>
    58d4:	8d 81       	ldd	r24, Y+5	; 0x05
    58d6:	9e 81       	ldd	r25, Y+6	; 0x06
    58d8:	83 30       	cpi	r24, 0x03	; 3
    58da:	91 05       	cpc	r25, r1
    58dc:	09 f4       	brne	.+2      	; 0x58e0 <DIO_enuSetPinVal+0x72>
    58de:	7c c0       	rjmp	.+248    	; 0x59d8 <DIO_enuSetPinVal+0x16a>
    58e0:	a3 c0       	rjmp	.+326    	; 0x5a28 <DIO_enuSetPinVal+0x1ba>
		{
		case DIO_PORTA :
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
    58e2:	ab e3       	ldi	r26, 0x3B	; 59
    58e4:	b0 e0       	ldi	r27, 0x00	; 0
    58e6:	eb e3       	ldi	r30, 0x3B	; 59
    58e8:	f0 e0       	ldi	r31, 0x00	; 0
    58ea:	80 81       	ld	r24, Z
    58ec:	48 2f       	mov	r20, r24
    58ee:	8b 81       	ldd	r24, Y+3	; 0x03
    58f0:	28 2f       	mov	r18, r24
    58f2:	30 e0       	ldi	r19, 0x00	; 0
    58f4:	81 e0       	ldi	r24, 0x01	; 1
    58f6:	90 e0       	ldi	r25, 0x00	; 0
    58f8:	02 c0       	rjmp	.+4      	; 0x58fe <DIO_enuSetPinVal+0x90>
    58fa:	88 0f       	add	r24, r24
    58fc:	99 1f       	adc	r25, r25
    58fe:	2a 95       	dec	r18
    5900:	e2 f7       	brpl	.-8      	; 0x58fa <DIO_enuSetPinVal+0x8c>
    5902:	80 95       	com	r24
    5904:	84 23       	and	r24, r20
    5906:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Val << Copy_u8PinID);
    5908:	ab e3       	ldi	r26, 0x3B	; 59
    590a:	b0 e0       	ldi	r27, 0x00	; 0
    590c:	eb e3       	ldi	r30, 0x3B	; 59
    590e:	f0 e0       	ldi	r31, 0x00	; 0
    5910:	80 81       	ld	r24, Z
    5912:	48 2f       	mov	r20, r24
    5914:	8c 81       	ldd	r24, Y+4	; 0x04
    5916:	28 2f       	mov	r18, r24
    5918:	30 e0       	ldi	r19, 0x00	; 0
    591a:	8b 81       	ldd	r24, Y+3	; 0x03
    591c:	88 2f       	mov	r24, r24
    591e:	90 e0       	ldi	r25, 0x00	; 0
    5920:	b9 01       	movw	r22, r18
    5922:	02 c0       	rjmp	.+4      	; 0x5928 <DIO_enuSetPinVal+0xba>
    5924:	66 0f       	add	r22, r22
    5926:	77 1f       	adc	r23, r23
    5928:	8a 95       	dec	r24
    592a:	e2 f7       	brpl	.-8      	; 0x5924 <DIO_enuSetPinVal+0xb6>
    592c:	cb 01       	movw	r24, r22
    592e:	84 2b       	or	r24, r20
    5930:	8c 93       	st	X, r24
    5932:	7a c0       	rjmp	.+244    	; 0x5a28 <DIO_enuSetPinVal+0x1ba>
			break;
		case DIO_PORTB :
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    5934:	a8 e3       	ldi	r26, 0x38	; 56
    5936:	b0 e0       	ldi	r27, 0x00	; 0
    5938:	e8 e3       	ldi	r30, 0x38	; 56
    593a:	f0 e0       	ldi	r31, 0x00	; 0
    593c:	80 81       	ld	r24, Z
    593e:	48 2f       	mov	r20, r24
    5940:	8b 81       	ldd	r24, Y+3	; 0x03
    5942:	28 2f       	mov	r18, r24
    5944:	30 e0       	ldi	r19, 0x00	; 0
    5946:	81 e0       	ldi	r24, 0x01	; 1
    5948:	90 e0       	ldi	r25, 0x00	; 0
    594a:	02 c0       	rjmp	.+4      	; 0x5950 <DIO_enuSetPinVal+0xe2>
    594c:	88 0f       	add	r24, r24
    594e:	99 1f       	adc	r25, r25
    5950:	2a 95       	dec	r18
    5952:	e2 f7       	brpl	.-8      	; 0x594c <DIO_enuSetPinVal+0xde>
    5954:	80 95       	com	r24
    5956:	84 23       	and	r24, r20
    5958:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Val << Copy_u8PinID);
    595a:	a8 e3       	ldi	r26, 0x38	; 56
    595c:	b0 e0       	ldi	r27, 0x00	; 0
    595e:	e8 e3       	ldi	r30, 0x38	; 56
    5960:	f0 e0       	ldi	r31, 0x00	; 0
    5962:	80 81       	ld	r24, Z
    5964:	48 2f       	mov	r20, r24
    5966:	8c 81       	ldd	r24, Y+4	; 0x04
    5968:	28 2f       	mov	r18, r24
    596a:	30 e0       	ldi	r19, 0x00	; 0
    596c:	8b 81       	ldd	r24, Y+3	; 0x03
    596e:	88 2f       	mov	r24, r24
    5970:	90 e0       	ldi	r25, 0x00	; 0
    5972:	b9 01       	movw	r22, r18
    5974:	02 c0       	rjmp	.+4      	; 0x597a <DIO_enuSetPinVal+0x10c>
    5976:	66 0f       	add	r22, r22
    5978:	77 1f       	adc	r23, r23
    597a:	8a 95       	dec	r24
    597c:	e2 f7       	brpl	.-8      	; 0x5976 <DIO_enuSetPinVal+0x108>
    597e:	cb 01       	movw	r24, r22
    5980:	84 2b       	or	r24, r20
    5982:	8c 93       	st	X, r24
    5984:	51 c0       	rjmp	.+162    	; 0x5a28 <DIO_enuSetPinVal+0x1ba>
			break;
		case DIO_PORTC :
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    5986:	a5 e3       	ldi	r26, 0x35	; 53
    5988:	b0 e0       	ldi	r27, 0x00	; 0
    598a:	e5 e3       	ldi	r30, 0x35	; 53
    598c:	f0 e0       	ldi	r31, 0x00	; 0
    598e:	80 81       	ld	r24, Z
    5990:	48 2f       	mov	r20, r24
    5992:	8b 81       	ldd	r24, Y+3	; 0x03
    5994:	28 2f       	mov	r18, r24
    5996:	30 e0       	ldi	r19, 0x00	; 0
    5998:	81 e0       	ldi	r24, 0x01	; 1
    599a:	90 e0       	ldi	r25, 0x00	; 0
    599c:	02 c0       	rjmp	.+4      	; 0x59a2 <DIO_enuSetPinVal+0x134>
    599e:	88 0f       	add	r24, r24
    59a0:	99 1f       	adc	r25, r25
    59a2:	2a 95       	dec	r18
    59a4:	e2 f7       	brpl	.-8      	; 0x599e <DIO_enuSetPinVal+0x130>
    59a6:	80 95       	com	r24
    59a8:	84 23       	and	r24, r20
    59aa:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Val << Copy_u8PinID);
    59ac:	a5 e3       	ldi	r26, 0x35	; 53
    59ae:	b0 e0       	ldi	r27, 0x00	; 0
    59b0:	e5 e3       	ldi	r30, 0x35	; 53
    59b2:	f0 e0       	ldi	r31, 0x00	; 0
    59b4:	80 81       	ld	r24, Z
    59b6:	48 2f       	mov	r20, r24
    59b8:	8c 81       	ldd	r24, Y+4	; 0x04
    59ba:	28 2f       	mov	r18, r24
    59bc:	30 e0       	ldi	r19, 0x00	; 0
    59be:	8b 81       	ldd	r24, Y+3	; 0x03
    59c0:	88 2f       	mov	r24, r24
    59c2:	90 e0       	ldi	r25, 0x00	; 0
    59c4:	b9 01       	movw	r22, r18
    59c6:	02 c0       	rjmp	.+4      	; 0x59cc <DIO_enuSetPinVal+0x15e>
    59c8:	66 0f       	add	r22, r22
    59ca:	77 1f       	adc	r23, r23
    59cc:	8a 95       	dec	r24
    59ce:	e2 f7       	brpl	.-8      	; 0x59c8 <DIO_enuSetPinVal+0x15a>
    59d0:	cb 01       	movw	r24, r22
    59d2:	84 2b       	or	r24, r20
    59d4:	8c 93       	st	X, r24
    59d6:	28 c0       	rjmp	.+80     	; 0x5a28 <DIO_enuSetPinVal+0x1ba>
			break;
		case DIO_PORTD :
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    59d8:	a2 e3       	ldi	r26, 0x32	; 50
    59da:	b0 e0       	ldi	r27, 0x00	; 0
    59dc:	e2 e3       	ldi	r30, 0x32	; 50
    59de:	f0 e0       	ldi	r31, 0x00	; 0
    59e0:	80 81       	ld	r24, Z
    59e2:	48 2f       	mov	r20, r24
    59e4:	8b 81       	ldd	r24, Y+3	; 0x03
    59e6:	28 2f       	mov	r18, r24
    59e8:	30 e0       	ldi	r19, 0x00	; 0
    59ea:	81 e0       	ldi	r24, 0x01	; 1
    59ec:	90 e0       	ldi	r25, 0x00	; 0
    59ee:	02 c0       	rjmp	.+4      	; 0x59f4 <DIO_enuSetPinVal+0x186>
    59f0:	88 0f       	add	r24, r24
    59f2:	99 1f       	adc	r25, r25
    59f4:	2a 95       	dec	r18
    59f6:	e2 f7       	brpl	.-8      	; 0x59f0 <DIO_enuSetPinVal+0x182>
    59f8:	80 95       	com	r24
    59fa:	84 23       	and	r24, r20
    59fc:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Val << Copy_u8PinID);
    59fe:	a2 e3       	ldi	r26, 0x32	; 50
    5a00:	b0 e0       	ldi	r27, 0x00	; 0
    5a02:	e2 e3       	ldi	r30, 0x32	; 50
    5a04:	f0 e0       	ldi	r31, 0x00	; 0
    5a06:	80 81       	ld	r24, Z
    5a08:	48 2f       	mov	r20, r24
    5a0a:	8c 81       	ldd	r24, Y+4	; 0x04
    5a0c:	28 2f       	mov	r18, r24
    5a0e:	30 e0       	ldi	r19, 0x00	; 0
    5a10:	8b 81       	ldd	r24, Y+3	; 0x03
    5a12:	88 2f       	mov	r24, r24
    5a14:	90 e0       	ldi	r25, 0x00	; 0
    5a16:	b9 01       	movw	r22, r18
    5a18:	02 c0       	rjmp	.+4      	; 0x5a1e <DIO_enuSetPinVal+0x1b0>
    5a1a:	66 0f       	add	r22, r22
    5a1c:	77 1f       	adc	r23, r23
    5a1e:	8a 95       	dec	r24
    5a20:	e2 f7       	brpl	.-8      	; 0x5a1a <DIO_enuSetPinVal+0x1ac>
    5a22:	cb 01       	movw	r24, r22
    5a24:	84 2b       	or	r24, r20
    5a26:	8c 93       	st	X, r24
			break;
		}

		Local_enuErrorState = ES_OK;
    5a28:	81 e0       	ldi	r24, 0x01	; 1
    5a2a:	89 83       	std	Y+1, r24	; 0x01
    5a2c:	02 c0       	rjmp	.+4      	; 0x5a32 <DIO_enuSetPinVal+0x1c4>

	}
	else Local_enuErrorState = ES_OUT_OF_RANGE;
    5a2e:	83 e0       	ldi	r24, 0x03	; 3
    5a30:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    5a32:	89 81       	ldd	r24, Y+1	; 0x01
}
    5a34:	26 96       	adiw	r28, 0x06	; 6
    5a36:	0f b6       	in	r0, 0x3f	; 63
    5a38:	f8 94       	cli
    5a3a:	de bf       	out	0x3e, r29	; 62
    5a3c:	0f be       	out	0x3f, r0	; 63
    5a3e:	cd bf       	out	0x3d, r28	; 61
    5a40:	cf 91       	pop	r28
    5a42:	df 91       	pop	r29
    5a44:	08 95       	ret

00005a46 <DIO_enuGetPinVal>:
//	else Local_enuErrorState = ES_OUT_OF_RANGE;
//
//	return Local_enuErrorState;
//}

ES_t DIO_enuGetPinVal( u8 Copy_u8PortID , u8 Copy_u8PinID , u8* Copy_pu8Val ){
    5a46:	df 93       	push	r29
    5a48:	cf 93       	push	r28
    5a4a:	cd b7       	in	r28, 0x3d	; 61
    5a4c:	de b7       	in	r29, 0x3e	; 62
    5a4e:	27 97       	sbiw	r28, 0x07	; 7
    5a50:	0f b6       	in	r0, 0x3f	; 63
    5a52:	f8 94       	cli
    5a54:	de bf       	out	0x3e, r29	; 62
    5a56:	0f be       	out	0x3f, r0	; 63
    5a58:	cd bf       	out	0x3d, r28	; 61
    5a5a:	8a 83       	std	Y+2, r24	; 0x02
    5a5c:	6b 83       	std	Y+3, r22	; 0x03
    5a5e:	5d 83       	std	Y+5, r21	; 0x05
    5a60:	4c 83       	std	Y+4, r20	; 0x04

	ES_t Local_enuErrorState = ES_NOK;
    5a62:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pu8Val != NULL)
    5a64:	8c 81       	ldd	r24, Y+4	; 0x04
    5a66:	9d 81       	ldd	r25, Y+5	; 0x05
    5a68:	00 97       	sbiw	r24, 0x00	; 0
    5a6a:	09 f4       	brne	.+2      	; 0x5a6e <DIO_enuGetPinVal+0x28>
    5a6c:	7e c0       	rjmp	.+252    	; 0x5b6a <DIO_enuGetPinVal+0x124>
	{
		if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 )
    5a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    5a70:	84 30       	cpi	r24, 0x04	; 4
    5a72:	08 f0       	brcs	.+2      	; 0x5a76 <DIO_enuGetPinVal+0x30>
    5a74:	77 c0       	rjmp	.+238    	; 0x5b64 <DIO_enuGetPinVal+0x11e>
    5a76:	8b 81       	ldd	r24, Y+3	; 0x03
    5a78:	88 30       	cpi	r24, 0x08	; 8
    5a7a:	08 f0       	brcs	.+2      	; 0x5a7e <DIO_enuGetPinVal+0x38>
    5a7c:	73 c0       	rjmp	.+230    	; 0x5b64 <DIO_enuGetPinVal+0x11e>
		{
			switch(Copy_u8PortID)
    5a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    5a80:	28 2f       	mov	r18, r24
    5a82:	30 e0       	ldi	r19, 0x00	; 0
    5a84:	3f 83       	std	Y+7, r19	; 0x07
    5a86:	2e 83       	std	Y+6, r18	; 0x06
    5a88:	4e 81       	ldd	r20, Y+6	; 0x06
    5a8a:	5f 81       	ldd	r21, Y+7	; 0x07
    5a8c:	41 30       	cpi	r20, 0x01	; 1
    5a8e:	51 05       	cpc	r21, r1
    5a90:	59 f1       	breq	.+86     	; 0x5ae8 <DIO_enuGetPinVal+0xa2>
    5a92:	8e 81       	ldd	r24, Y+6	; 0x06
    5a94:	9f 81       	ldd	r25, Y+7	; 0x07
    5a96:	82 30       	cpi	r24, 0x02	; 2
    5a98:	91 05       	cpc	r25, r1
    5a9a:	34 f4       	brge	.+12     	; 0x5aa8 <DIO_enuGetPinVal+0x62>
    5a9c:	2e 81       	ldd	r18, Y+6	; 0x06
    5a9e:	3f 81       	ldd	r19, Y+7	; 0x07
    5aa0:	21 15       	cp	r18, r1
    5aa2:	31 05       	cpc	r19, r1
    5aa4:	69 f0       	breq	.+26     	; 0x5ac0 <DIO_enuGetPinVal+0x7a>
    5aa6:	5b c0       	rjmp	.+182    	; 0x5b5e <DIO_enuGetPinVal+0x118>
    5aa8:	4e 81       	ldd	r20, Y+6	; 0x06
    5aaa:	5f 81       	ldd	r21, Y+7	; 0x07
    5aac:	42 30       	cpi	r20, 0x02	; 2
    5aae:	51 05       	cpc	r21, r1
    5ab0:	79 f1       	breq	.+94     	; 0x5b10 <DIO_enuGetPinVal+0xca>
    5ab2:	8e 81       	ldd	r24, Y+6	; 0x06
    5ab4:	9f 81       	ldd	r25, Y+7	; 0x07
    5ab6:	83 30       	cpi	r24, 0x03	; 3
    5ab8:	91 05       	cpc	r25, r1
    5aba:	09 f4       	brne	.+2      	; 0x5abe <DIO_enuGetPinVal+0x78>
    5abc:	3d c0       	rjmp	.+122    	; 0x5b38 <DIO_enuGetPinVal+0xf2>
    5abe:	4f c0       	rjmp	.+158    	; 0x5b5e <DIO_enuGetPinVal+0x118>
			{
			case DIO_PORTA :
				*Copy_pu8Val = (PINA>>Copy_u8PinID) & DIO_MASK_BIT;
    5ac0:	e9 e3       	ldi	r30, 0x39	; 57
    5ac2:	f0 e0       	ldi	r31, 0x00	; 0
    5ac4:	80 81       	ld	r24, Z
    5ac6:	28 2f       	mov	r18, r24
    5ac8:	30 e0       	ldi	r19, 0x00	; 0
    5aca:	8b 81       	ldd	r24, Y+3	; 0x03
    5acc:	88 2f       	mov	r24, r24
    5ace:	90 e0       	ldi	r25, 0x00	; 0
    5ad0:	a9 01       	movw	r20, r18
    5ad2:	02 c0       	rjmp	.+4      	; 0x5ad8 <DIO_enuGetPinVal+0x92>
    5ad4:	55 95       	asr	r21
    5ad6:	47 95       	ror	r20
    5ad8:	8a 95       	dec	r24
    5ada:	e2 f7       	brpl	.-8      	; 0x5ad4 <DIO_enuGetPinVal+0x8e>
    5adc:	ca 01       	movw	r24, r20
    5ade:	81 70       	andi	r24, 0x01	; 1
    5ae0:	ec 81       	ldd	r30, Y+4	; 0x04
    5ae2:	fd 81       	ldd	r31, Y+5	; 0x05
    5ae4:	80 83       	st	Z, r24
    5ae6:	3b c0       	rjmp	.+118    	; 0x5b5e <DIO_enuGetPinVal+0x118>
				break;
			case DIO_PORTB :
				*Copy_pu8Val = (PINB>>Copy_u8PinID) & DIO_MASK_BIT;
    5ae8:	e6 e3       	ldi	r30, 0x36	; 54
    5aea:	f0 e0       	ldi	r31, 0x00	; 0
    5aec:	80 81       	ld	r24, Z
    5aee:	28 2f       	mov	r18, r24
    5af0:	30 e0       	ldi	r19, 0x00	; 0
    5af2:	8b 81       	ldd	r24, Y+3	; 0x03
    5af4:	88 2f       	mov	r24, r24
    5af6:	90 e0       	ldi	r25, 0x00	; 0
    5af8:	a9 01       	movw	r20, r18
    5afa:	02 c0       	rjmp	.+4      	; 0x5b00 <DIO_enuGetPinVal+0xba>
    5afc:	55 95       	asr	r21
    5afe:	47 95       	ror	r20
    5b00:	8a 95       	dec	r24
    5b02:	e2 f7       	brpl	.-8      	; 0x5afc <DIO_enuGetPinVal+0xb6>
    5b04:	ca 01       	movw	r24, r20
    5b06:	81 70       	andi	r24, 0x01	; 1
    5b08:	ec 81       	ldd	r30, Y+4	; 0x04
    5b0a:	fd 81       	ldd	r31, Y+5	; 0x05
    5b0c:	80 83       	st	Z, r24
    5b0e:	27 c0       	rjmp	.+78     	; 0x5b5e <DIO_enuGetPinVal+0x118>
				break;
			case DIO_PORTC :
				*Copy_pu8Val = (PINC>>Copy_u8PinID) & DIO_MASK_BIT;
    5b10:	e3 e3       	ldi	r30, 0x33	; 51
    5b12:	f0 e0       	ldi	r31, 0x00	; 0
    5b14:	80 81       	ld	r24, Z
    5b16:	28 2f       	mov	r18, r24
    5b18:	30 e0       	ldi	r19, 0x00	; 0
    5b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    5b1c:	88 2f       	mov	r24, r24
    5b1e:	90 e0       	ldi	r25, 0x00	; 0
    5b20:	a9 01       	movw	r20, r18
    5b22:	02 c0       	rjmp	.+4      	; 0x5b28 <DIO_enuGetPinVal+0xe2>
    5b24:	55 95       	asr	r21
    5b26:	47 95       	ror	r20
    5b28:	8a 95       	dec	r24
    5b2a:	e2 f7       	brpl	.-8      	; 0x5b24 <DIO_enuGetPinVal+0xde>
    5b2c:	ca 01       	movw	r24, r20
    5b2e:	81 70       	andi	r24, 0x01	; 1
    5b30:	ec 81       	ldd	r30, Y+4	; 0x04
    5b32:	fd 81       	ldd	r31, Y+5	; 0x05
    5b34:	80 83       	st	Z, r24
    5b36:	13 c0       	rjmp	.+38     	; 0x5b5e <DIO_enuGetPinVal+0x118>
				break;
			case DIO_PORTD :
				*Copy_pu8Val = (PIND>>Copy_u8PinID) & DIO_MASK_BIT;
    5b38:	e0 e3       	ldi	r30, 0x30	; 48
    5b3a:	f0 e0       	ldi	r31, 0x00	; 0
    5b3c:	80 81       	ld	r24, Z
    5b3e:	28 2f       	mov	r18, r24
    5b40:	30 e0       	ldi	r19, 0x00	; 0
    5b42:	8b 81       	ldd	r24, Y+3	; 0x03
    5b44:	88 2f       	mov	r24, r24
    5b46:	90 e0       	ldi	r25, 0x00	; 0
    5b48:	a9 01       	movw	r20, r18
    5b4a:	02 c0       	rjmp	.+4      	; 0x5b50 <DIO_enuGetPinVal+0x10a>
    5b4c:	55 95       	asr	r21
    5b4e:	47 95       	ror	r20
    5b50:	8a 95       	dec	r24
    5b52:	e2 f7       	brpl	.-8      	; 0x5b4c <DIO_enuGetPinVal+0x106>
    5b54:	ca 01       	movw	r24, r20
    5b56:	81 70       	andi	r24, 0x01	; 1
    5b58:	ec 81       	ldd	r30, Y+4	; 0x04
    5b5a:	fd 81       	ldd	r31, Y+5	; 0x05
    5b5c:	80 83       	st	Z, r24
				break;
			}

			Local_enuErrorState = ES_OK;
    5b5e:	81 e0       	ldi	r24, 0x01	; 1
    5b60:	89 83       	std	Y+1, r24	; 0x01
    5b62:	05 c0       	rjmp	.+10     	; 0x5b6e <DIO_enuGetPinVal+0x128>
		}
		else Local_enuErrorState = ES_OUT_OF_RANGE;
    5b64:	83 e0       	ldi	r24, 0x03	; 3
    5b66:	89 83       	std	Y+1, r24	; 0x01
    5b68:	02 c0       	rjmp	.+4      	; 0x5b6e <DIO_enuGetPinVal+0x128>
	}
	else Local_enuErrorState = ES_NULL_POINTER;
    5b6a:	82 e0       	ldi	r24, 0x02	; 2
    5b6c:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    5b6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    5b70:	27 96       	adiw	r28, 0x07	; 7
    5b72:	0f b6       	in	r0, 0x3f	; 63
    5b74:	f8 94       	cli
    5b76:	de bf       	out	0x3e, r29	; 62
    5b78:	0f be       	out	0x3f, r0	; 63
    5b7a:	cd bf       	out	0x3d, r28	; 61
    5b7c:	cf 91       	pop	r28
    5b7e:	df 91       	pop	r29
    5b80:	08 95       	ret

00005b82 <Keypad_enuInit>:


u8 Keypad_u8Buttons[NUM_OF_ROW][NUM_OF_COL] = KPD_BUTTONS ;

ES_t Keypad_enuInit()
{
    5b82:	df 93       	push	r29
    5b84:	cf 93       	push	r28
    5b86:	cd b7       	in	r28, 0x3d	; 61
    5b88:	de b7       	in	r29, 0x3e	; 62
    5b8a:	27 97       	sbiw	r28, 0x07	; 7
    5b8c:	0f b6       	in	r0, 0x3f	; 63
    5b8e:	f8 94       	cli
    5b90:	de bf       	out	0x3e, r29	; 62
    5b92:	0f be       	out	0x3f, r0	; 63
    5b94:	cd bf       	out	0x3d, r28	; 61
	{
		ES_t Local_enuErrorState = ES_NOK;
    5b96:	1e 82       	std	Y+6, r1	; 0x06

		u32 Local_u32Check = 0;
    5b98:	1a 82       	std	Y+2, r1	; 0x02
    5b9a:	1b 82       	std	Y+3, r1	; 0x03
    5b9c:	1c 82       	std	Y+4, r1	; 0x04
    5b9e:	1d 82       	std	Y+5, r1	; 0x05

		/* Set Column Pins as Output */
		Local_u32Check |= (DIO_enuSetPinDir(KPD_COL0_PORT, KPD_COL0_PIN, DIO_u8OUTPUT) << 0);
    5ba0:	80 e0       	ldi	r24, 0x00	; 0
    5ba2:	64 e0       	ldi	r22, 0x04	; 4
    5ba4:	41 e0       	ldi	r20, 0x01	; 1
    5ba6:	0e 94 4b 2b 	call	0x5696	; 0x5696 <DIO_enuSetPinDir>
    5baa:	28 2f       	mov	r18, r24
    5bac:	30 e0       	ldi	r19, 0x00	; 0
    5bae:	40 e0       	ldi	r20, 0x00	; 0
    5bb0:	50 e0       	ldi	r21, 0x00	; 0
    5bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    5bb4:	9b 81       	ldd	r25, Y+3	; 0x03
    5bb6:	ac 81       	ldd	r26, Y+4	; 0x04
    5bb8:	bd 81       	ldd	r27, Y+5	; 0x05
    5bba:	82 2b       	or	r24, r18
    5bbc:	93 2b       	or	r25, r19
    5bbe:	a4 2b       	or	r26, r20
    5bc0:	b5 2b       	or	r27, r21
    5bc2:	8a 83       	std	Y+2, r24	; 0x02
    5bc4:	9b 83       	std	Y+3, r25	; 0x03
    5bc6:	ac 83       	std	Y+4, r26	; 0x04
    5bc8:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (DIO_enuSetPinDir(KPD_COL1_PORT, KPD_COL1_PIN, DIO_u8OUTPUT) << 3);
    5bca:	80 e0       	ldi	r24, 0x00	; 0
    5bcc:	65 e0       	ldi	r22, 0x05	; 5
    5bce:	41 e0       	ldi	r20, 0x01	; 1
    5bd0:	0e 94 4b 2b 	call	0x5696	; 0x5696 <DIO_enuSetPinDir>
    5bd4:	88 2f       	mov	r24, r24
    5bd6:	90 e0       	ldi	r25, 0x00	; 0
    5bd8:	88 0f       	add	r24, r24
    5bda:	99 1f       	adc	r25, r25
    5bdc:	88 0f       	add	r24, r24
    5bde:	99 1f       	adc	r25, r25
    5be0:	88 0f       	add	r24, r24
    5be2:	99 1f       	adc	r25, r25
    5be4:	9c 01       	movw	r18, r24
    5be6:	44 27       	eor	r20, r20
    5be8:	37 fd       	sbrc	r19, 7
    5bea:	40 95       	com	r20
    5bec:	54 2f       	mov	r21, r20
    5bee:	8a 81       	ldd	r24, Y+2	; 0x02
    5bf0:	9b 81       	ldd	r25, Y+3	; 0x03
    5bf2:	ac 81       	ldd	r26, Y+4	; 0x04
    5bf4:	bd 81       	ldd	r27, Y+5	; 0x05
    5bf6:	82 2b       	or	r24, r18
    5bf8:	93 2b       	or	r25, r19
    5bfa:	a4 2b       	or	r26, r20
    5bfc:	b5 2b       	or	r27, r21
    5bfe:	8a 83       	std	Y+2, r24	; 0x02
    5c00:	9b 83       	std	Y+3, r25	; 0x03
    5c02:	ac 83       	std	Y+4, r26	; 0x04
    5c04:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (DIO_enuSetPinDir(KPD_COL2_PORT, KPD_COL2_PIN, DIO_u8OUTPUT) << 6);
    5c06:	80 e0       	ldi	r24, 0x00	; 0
    5c08:	66 e0       	ldi	r22, 0x06	; 6
    5c0a:	41 e0       	ldi	r20, 0x01	; 1
    5c0c:	0e 94 4b 2b 	call	0x5696	; 0x5696 <DIO_enuSetPinDir>
    5c10:	88 2f       	mov	r24, r24
    5c12:	90 e0       	ldi	r25, 0x00	; 0
    5c14:	00 24       	eor	r0, r0
    5c16:	96 95       	lsr	r25
    5c18:	87 95       	ror	r24
    5c1a:	07 94       	ror	r0
    5c1c:	96 95       	lsr	r25
    5c1e:	87 95       	ror	r24
    5c20:	07 94       	ror	r0
    5c22:	98 2f       	mov	r25, r24
    5c24:	80 2d       	mov	r24, r0
    5c26:	9c 01       	movw	r18, r24
    5c28:	44 27       	eor	r20, r20
    5c2a:	37 fd       	sbrc	r19, 7
    5c2c:	40 95       	com	r20
    5c2e:	54 2f       	mov	r21, r20
    5c30:	8a 81       	ldd	r24, Y+2	; 0x02
    5c32:	9b 81       	ldd	r25, Y+3	; 0x03
    5c34:	ac 81       	ldd	r26, Y+4	; 0x04
    5c36:	bd 81       	ldd	r27, Y+5	; 0x05
    5c38:	82 2b       	or	r24, r18
    5c3a:	93 2b       	or	r25, r19
    5c3c:	a4 2b       	or	r26, r20
    5c3e:	b5 2b       	or	r27, r21
    5c40:	8a 83       	std	Y+2, r24	; 0x02
    5c42:	9b 83       	std	Y+3, r25	; 0x03
    5c44:	ac 83       	std	Y+4, r26	; 0x04
    5c46:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= ((u32)DIO_enuSetPinDir(KPD_COL3_PORT, KPD_COL3_PIN, DIO_u8OUTPUT) << 9);
    5c48:	80 e0       	ldi	r24, 0x00	; 0
    5c4a:	67 e0       	ldi	r22, 0x07	; 7
    5c4c:	41 e0       	ldi	r20, 0x01	; 1
    5c4e:	0e 94 4b 2b 	call	0x5696	; 0x5696 <DIO_enuSetPinDir>
    5c52:	88 2f       	mov	r24, r24
    5c54:	90 e0       	ldi	r25, 0x00	; 0
    5c56:	a0 e0       	ldi	r26, 0x00	; 0
    5c58:	b0 e0       	ldi	r27, 0x00	; 0
    5c5a:	9c 01       	movw	r18, r24
    5c5c:	ad 01       	movw	r20, r26
    5c5e:	01 2e       	mov	r0, r17
    5c60:	19 e0       	ldi	r17, 0x09	; 9
    5c62:	22 0f       	add	r18, r18
    5c64:	33 1f       	adc	r19, r19
    5c66:	44 1f       	adc	r20, r20
    5c68:	55 1f       	adc	r21, r21
    5c6a:	1a 95       	dec	r17
    5c6c:	d1 f7       	brne	.-12     	; 0x5c62 <Keypad_enuInit+0xe0>
    5c6e:	10 2d       	mov	r17, r0
    5c70:	8a 81       	ldd	r24, Y+2	; 0x02
    5c72:	9b 81       	ldd	r25, Y+3	; 0x03
    5c74:	ac 81       	ldd	r26, Y+4	; 0x04
    5c76:	bd 81       	ldd	r27, Y+5	; 0x05
    5c78:	82 2b       	or	r24, r18
    5c7a:	93 2b       	or	r25, r19
    5c7c:	a4 2b       	or	r26, r20
    5c7e:	b5 2b       	or	r27, r21
    5c80:	8a 83       	std	Y+2, r24	; 0x02
    5c82:	9b 83       	std	Y+3, r25	; 0x03
    5c84:	ac 83       	std	Y+4, r26	; 0x04
    5c86:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= ((u32)DIO_enuSetPinDir(KPD_COL4_PORT, KPD_COL4_PIN, DIO_u8OUTPUT) << 9);
    5c88:	82 e0       	ldi	r24, 0x02	; 2
    5c8a:	65 e0       	ldi	r22, 0x05	; 5
    5c8c:	41 e0       	ldi	r20, 0x01	; 1
    5c8e:	0e 94 4b 2b 	call	0x5696	; 0x5696 <DIO_enuSetPinDir>
    5c92:	88 2f       	mov	r24, r24
    5c94:	90 e0       	ldi	r25, 0x00	; 0
    5c96:	a0 e0       	ldi	r26, 0x00	; 0
    5c98:	b0 e0       	ldi	r27, 0x00	; 0
    5c9a:	9c 01       	movw	r18, r24
    5c9c:	ad 01       	movw	r20, r26
    5c9e:	01 2e       	mov	r0, r17
    5ca0:	19 e0       	ldi	r17, 0x09	; 9
    5ca2:	22 0f       	add	r18, r18
    5ca4:	33 1f       	adc	r19, r19
    5ca6:	44 1f       	adc	r20, r20
    5ca8:	55 1f       	adc	r21, r21
    5caa:	1a 95       	dec	r17
    5cac:	d1 f7       	brne	.-12     	; 0x5ca2 <Keypad_enuInit+0x120>
    5cae:	10 2d       	mov	r17, r0
    5cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    5cb2:	9b 81       	ldd	r25, Y+3	; 0x03
    5cb4:	ac 81       	ldd	r26, Y+4	; 0x04
    5cb6:	bd 81       	ldd	r27, Y+5	; 0x05
    5cb8:	82 2b       	or	r24, r18
    5cba:	93 2b       	or	r25, r19
    5cbc:	a4 2b       	or	r26, r20
    5cbe:	b5 2b       	or	r27, r21
    5cc0:	8a 83       	std	Y+2, r24	; 0x02
    5cc2:	9b 83       	std	Y+3, r25	; 0x03
    5cc4:	ac 83       	std	Y+4, r26	; 0x04
    5cc6:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= ((u32)DIO_enuSetPinDir(KPD_COL5_PORT, KPD_COL5_PIN, DIO_u8OUTPUT) << 9);
    5cc8:	82 e0       	ldi	r24, 0x02	; 2
    5cca:	66 e0       	ldi	r22, 0x06	; 6
    5ccc:	41 e0       	ldi	r20, 0x01	; 1
    5cce:	0e 94 4b 2b 	call	0x5696	; 0x5696 <DIO_enuSetPinDir>
    5cd2:	88 2f       	mov	r24, r24
    5cd4:	90 e0       	ldi	r25, 0x00	; 0
    5cd6:	a0 e0       	ldi	r26, 0x00	; 0
    5cd8:	b0 e0       	ldi	r27, 0x00	; 0
    5cda:	9c 01       	movw	r18, r24
    5cdc:	ad 01       	movw	r20, r26
    5cde:	01 2e       	mov	r0, r17
    5ce0:	19 e0       	ldi	r17, 0x09	; 9
    5ce2:	22 0f       	add	r18, r18
    5ce4:	33 1f       	adc	r19, r19
    5ce6:	44 1f       	adc	r20, r20
    5ce8:	55 1f       	adc	r21, r21
    5cea:	1a 95       	dec	r17
    5cec:	d1 f7       	brne	.-12     	; 0x5ce2 <Keypad_enuInit+0x160>
    5cee:	10 2d       	mov	r17, r0
    5cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    5cf2:	9b 81       	ldd	r25, Y+3	; 0x03
    5cf4:	ac 81       	ldd	r26, Y+4	; 0x04
    5cf6:	bd 81       	ldd	r27, Y+5	; 0x05
    5cf8:	82 2b       	or	r24, r18
    5cfa:	93 2b       	or	r25, r19
    5cfc:	a4 2b       	or	r26, r20
    5cfe:	b5 2b       	or	r27, r21
    5d00:	8a 83       	std	Y+2, r24	; 0x02
    5d02:	9b 83       	std	Y+3, r25	; 0x03
    5d04:	ac 83       	std	Y+4, r26	; 0x04
    5d06:	bd 83       	std	Y+5, r27	; 0x05

		DIO_enuSetPinDir(KPD_COL6_PORT, KPD_COL6_PIN, DIO_u8OUTPUT);
    5d08:	83 e0       	ldi	r24, 0x03	; 3
    5d0a:	67 e0       	ldi	r22, 0x07	; 7
    5d0c:	41 e0       	ldi	r20, 0x01	; 1
    5d0e:	0e 94 4b 2b 	call	0x5696	; 0x5696 <DIO_enuSetPinDir>
		DIO_enuSetPinDir(KPD_COL7_PORT, KPD_COL7_PIN, DIO_u8OUTPUT);
    5d12:	83 e0       	ldi	r24, 0x03	; 3
    5d14:	66 e0       	ldi	r22, 0x06	; 6
    5d16:	41 e0       	ldi	r20, 0x01	; 1
    5d18:	0e 94 4b 2b 	call	0x5696	; 0x5696 <DIO_enuSetPinDir>
		DIO_enuSetPinDir(KPD_COL8_PORT, KPD_COL8_PIN, DIO_u8OUTPUT);
    5d1c:	83 e0       	ldi	r24, 0x03	; 3
    5d1e:	65 e0       	ldi	r22, 0x05	; 5
    5d20:	41 e0       	ldi	r20, 0x01	; 1
    5d22:	0e 94 4b 2b 	call	0x5696	; 0x5696 <DIO_enuSetPinDir>
		DIO_enuSetPinDir(KPD_COL9_PORT, KPD_COL9_PIN, DIO_u8OUTPUT);
    5d26:	83 e0       	ldi	r24, 0x03	; 3
    5d28:	64 e0       	ldi	r22, 0x04	; 4
    5d2a:	41 e0       	ldi	r20, 0x01	; 1
    5d2c:	0e 94 4b 2b 	call	0x5696	; 0x5696 <DIO_enuSetPinDir>


		/* Set Column Pins Value as High */
		DIO_enuSetPinVal(KPD_COL0_PORT, KPD_COL0_PIN, DIO_u8HIGH);
    5d30:	80 e0       	ldi	r24, 0x00	; 0
    5d32:	64 e0       	ldi	r22, 0x04	; 4
    5d34:	41 e0       	ldi	r20, 0x01	; 1
    5d36:	0e 94 37 2c 	call	0x586e	; 0x586e <DIO_enuSetPinVal>
		DIO_enuSetPinVal(KPD_COL1_PORT, KPD_COL1_PIN, DIO_u8HIGH);
    5d3a:	80 e0       	ldi	r24, 0x00	; 0
    5d3c:	65 e0       	ldi	r22, 0x05	; 5
    5d3e:	41 e0       	ldi	r20, 0x01	; 1
    5d40:	0e 94 37 2c 	call	0x586e	; 0x586e <DIO_enuSetPinVal>
		DIO_enuSetPinVal(KPD_COL2_PORT, KPD_COL2_PIN, DIO_u8HIGH);
    5d44:	80 e0       	ldi	r24, 0x00	; 0
    5d46:	66 e0       	ldi	r22, 0x06	; 6
    5d48:	41 e0       	ldi	r20, 0x01	; 1
    5d4a:	0e 94 37 2c 	call	0x586e	; 0x586e <DIO_enuSetPinVal>
		DIO_enuSetPinVal(KPD_COL3_PORT, KPD_COL3_PIN, DIO_u8HIGH);
    5d4e:	80 e0       	ldi	r24, 0x00	; 0
    5d50:	67 e0       	ldi	r22, 0x07	; 7
    5d52:	41 e0       	ldi	r20, 0x01	; 1
    5d54:	0e 94 37 2c 	call	0x586e	; 0x586e <DIO_enuSetPinVal>
		DIO_enuSetPinVal(KPD_COL4_PORT, KPD_COL4_PIN, DIO_u8HIGH);
    5d58:	82 e0       	ldi	r24, 0x02	; 2
    5d5a:	65 e0       	ldi	r22, 0x05	; 5
    5d5c:	41 e0       	ldi	r20, 0x01	; 1
    5d5e:	0e 94 37 2c 	call	0x586e	; 0x586e <DIO_enuSetPinVal>
		DIO_enuSetPinVal(KPD_COL5_PORT, KPD_COL5_PIN, DIO_u8HIGH);
    5d62:	82 e0       	ldi	r24, 0x02	; 2
    5d64:	66 e0       	ldi	r22, 0x06	; 6
    5d66:	41 e0       	ldi	r20, 0x01	; 1
    5d68:	0e 94 37 2c 	call	0x586e	; 0x586e <DIO_enuSetPinVal>


		DIO_enuSetPinVal(KPD_COL6_PORT, KPD_COL6_PIN, DIO_u8HIGH);
    5d6c:	83 e0       	ldi	r24, 0x03	; 3
    5d6e:	67 e0       	ldi	r22, 0x07	; 7
    5d70:	41 e0       	ldi	r20, 0x01	; 1
    5d72:	0e 94 37 2c 	call	0x586e	; 0x586e <DIO_enuSetPinVal>
		DIO_enuSetPinVal(KPD_COL7_PORT, KPD_COL7_PIN, DIO_u8HIGH);
    5d76:	83 e0       	ldi	r24, 0x03	; 3
    5d78:	66 e0       	ldi	r22, 0x06	; 6
    5d7a:	41 e0       	ldi	r20, 0x01	; 1
    5d7c:	0e 94 37 2c 	call	0x586e	; 0x586e <DIO_enuSetPinVal>
		DIO_enuSetPinVal(KPD_COL8_PORT, KPD_COL8_PIN, DIO_u8HIGH);
    5d80:	83 e0       	ldi	r24, 0x03	; 3
    5d82:	65 e0       	ldi	r22, 0x05	; 5
    5d84:	41 e0       	ldi	r20, 0x01	; 1
    5d86:	0e 94 37 2c 	call	0x586e	; 0x586e <DIO_enuSetPinVal>
		DIO_enuSetPinVal(KPD_COL9_PORT, KPD_COL9_PIN, DIO_u8HIGH);
    5d8a:	83 e0       	ldi	r24, 0x03	; 3
    5d8c:	64 e0       	ldi	r22, 0x04	; 4
    5d8e:	41 e0       	ldi	r20, 0x01	; 1
    5d90:	0e 94 37 2c 	call	0x586e	; 0x586e <DIO_enuSetPinVal>



		/* Set Row Pins as Input */
		Local_u32Check |= ((u32)DIO_enuSetPinDir(KPD_ROW0_PORT, KPD_ROW0_PIN, DIO_u8INPUT) << 12);
    5d94:	81 e0       	ldi	r24, 0x01	; 1
    5d96:	67 e0       	ldi	r22, 0x07	; 7
    5d98:	40 e0       	ldi	r20, 0x00	; 0
    5d9a:	0e 94 4b 2b 	call	0x5696	; 0x5696 <DIO_enuSetPinDir>
    5d9e:	88 2f       	mov	r24, r24
    5da0:	90 e0       	ldi	r25, 0x00	; 0
    5da2:	a0 e0       	ldi	r26, 0x00	; 0
    5da4:	b0 e0       	ldi	r27, 0x00	; 0
    5da6:	9c 01       	movw	r18, r24
    5da8:	ad 01       	movw	r20, r26
    5daa:	01 2e       	mov	r0, r17
    5dac:	1c e0       	ldi	r17, 0x0C	; 12
    5dae:	22 0f       	add	r18, r18
    5db0:	33 1f       	adc	r19, r19
    5db2:	44 1f       	adc	r20, r20
    5db4:	55 1f       	adc	r21, r21
    5db6:	1a 95       	dec	r17
    5db8:	d1 f7       	brne	.-12     	; 0x5dae <Keypad_enuInit+0x22c>
    5dba:	10 2d       	mov	r17, r0
    5dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    5dbe:	9b 81       	ldd	r25, Y+3	; 0x03
    5dc0:	ac 81       	ldd	r26, Y+4	; 0x04
    5dc2:	bd 81       	ldd	r27, Y+5	; 0x05
    5dc4:	82 2b       	or	r24, r18
    5dc6:	93 2b       	or	r25, r19
    5dc8:	a4 2b       	or	r26, r20
    5dca:	b5 2b       	or	r27, r21
    5dcc:	8a 83       	std	Y+2, r24	; 0x02
    5dce:	9b 83       	std	Y+3, r25	; 0x03
    5dd0:	ac 83       	std	Y+4, r26	; 0x04
    5dd2:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= ((u32)DIO_enuSetPinDir(KPD_ROW1_PORT, KPD_ROW1_PIN, DIO_u8INPUT) << 15);
    5dd4:	81 e0       	ldi	r24, 0x01	; 1
    5dd6:	66 e0       	ldi	r22, 0x06	; 6
    5dd8:	40 e0       	ldi	r20, 0x00	; 0
    5dda:	0e 94 4b 2b 	call	0x5696	; 0x5696 <DIO_enuSetPinDir>
    5dde:	88 2f       	mov	r24, r24
    5de0:	90 e0       	ldi	r25, 0x00	; 0
    5de2:	a0 e0       	ldi	r26, 0x00	; 0
    5de4:	b0 e0       	ldi	r27, 0x00	; 0
    5de6:	9c 01       	movw	r18, r24
    5de8:	ad 01       	movw	r20, r26
    5dea:	01 2e       	mov	r0, r17
    5dec:	1f e0       	ldi	r17, 0x0F	; 15
    5dee:	22 0f       	add	r18, r18
    5df0:	33 1f       	adc	r19, r19
    5df2:	44 1f       	adc	r20, r20
    5df4:	55 1f       	adc	r21, r21
    5df6:	1a 95       	dec	r17
    5df8:	d1 f7       	brne	.-12     	; 0x5dee <Keypad_enuInit+0x26c>
    5dfa:	10 2d       	mov	r17, r0
    5dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    5dfe:	9b 81       	ldd	r25, Y+3	; 0x03
    5e00:	ac 81       	ldd	r26, Y+4	; 0x04
    5e02:	bd 81       	ldd	r27, Y+5	; 0x05
    5e04:	82 2b       	or	r24, r18
    5e06:	93 2b       	or	r25, r19
    5e08:	a4 2b       	or	r26, r20
    5e0a:	b5 2b       	or	r27, r21
    5e0c:	8a 83       	std	Y+2, r24	; 0x02
    5e0e:	9b 83       	std	Y+3, r25	; 0x03
    5e10:	ac 83       	std	Y+4, r26	; 0x04
    5e12:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= ((u32)DIO_enuSetPinDir(KPD_ROW2_PORT, KPD_ROW2_PIN, DIO_u8INPUT) << 18);
    5e14:	81 e0       	ldi	r24, 0x01	; 1
    5e16:	65 e0       	ldi	r22, 0x05	; 5
    5e18:	40 e0       	ldi	r20, 0x00	; 0
    5e1a:	0e 94 4b 2b 	call	0x5696	; 0x5696 <DIO_enuSetPinDir>
    5e1e:	88 2f       	mov	r24, r24
    5e20:	90 e0       	ldi	r25, 0x00	; 0
    5e22:	a0 e0       	ldi	r26, 0x00	; 0
    5e24:	b0 e0       	ldi	r27, 0x00	; 0
    5e26:	9c 01       	movw	r18, r24
    5e28:	ad 01       	movw	r20, r26
    5e2a:	01 2e       	mov	r0, r17
    5e2c:	12 e1       	ldi	r17, 0x12	; 18
    5e2e:	22 0f       	add	r18, r18
    5e30:	33 1f       	adc	r19, r19
    5e32:	44 1f       	adc	r20, r20
    5e34:	55 1f       	adc	r21, r21
    5e36:	1a 95       	dec	r17
    5e38:	d1 f7       	brne	.-12     	; 0x5e2e <Keypad_enuInit+0x2ac>
    5e3a:	10 2d       	mov	r17, r0
    5e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    5e3e:	9b 81       	ldd	r25, Y+3	; 0x03
    5e40:	ac 81       	ldd	r26, Y+4	; 0x04
    5e42:	bd 81       	ldd	r27, Y+5	; 0x05
    5e44:	82 2b       	or	r24, r18
    5e46:	93 2b       	or	r25, r19
    5e48:	a4 2b       	or	r26, r20
    5e4a:	b5 2b       	or	r27, r21
    5e4c:	8a 83       	std	Y+2, r24	; 0x02
    5e4e:	9b 83       	std	Y+3, r25	; 0x03
    5e50:	ac 83       	std	Y+4, r26	; 0x04
    5e52:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= ((u32)DIO_enuSetPinDir(KPD_ROW3_PORT, KPD_ROW3_PIN, DIO_u8INPUT) << 21);
    5e54:	81 e0       	ldi	r24, 0x01	; 1
    5e56:	64 e0       	ldi	r22, 0x04	; 4
    5e58:	40 e0       	ldi	r20, 0x00	; 0
    5e5a:	0e 94 4b 2b 	call	0x5696	; 0x5696 <DIO_enuSetPinDir>
    5e5e:	88 2f       	mov	r24, r24
    5e60:	90 e0       	ldi	r25, 0x00	; 0
    5e62:	a0 e0       	ldi	r26, 0x00	; 0
    5e64:	b0 e0       	ldi	r27, 0x00	; 0
    5e66:	9c 01       	movw	r18, r24
    5e68:	ad 01       	movw	r20, r26
    5e6a:	01 2e       	mov	r0, r17
    5e6c:	15 e1       	ldi	r17, 0x15	; 21
    5e6e:	22 0f       	add	r18, r18
    5e70:	33 1f       	adc	r19, r19
    5e72:	44 1f       	adc	r20, r20
    5e74:	55 1f       	adc	r21, r21
    5e76:	1a 95       	dec	r17
    5e78:	d1 f7       	brne	.-12     	; 0x5e6e <Keypad_enuInit+0x2ec>
    5e7a:	10 2d       	mov	r17, r0
    5e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    5e7e:	9b 81       	ldd	r25, Y+3	; 0x03
    5e80:	ac 81       	ldd	r26, Y+4	; 0x04
    5e82:	bd 81       	ldd	r27, Y+5	; 0x05
    5e84:	82 2b       	or	r24, r18
    5e86:	93 2b       	or	r25, r19
    5e88:	a4 2b       	or	r26, r20
    5e8a:	b5 2b       	or	r27, r21
    5e8c:	8a 83       	std	Y+2, r24	; 0x02
    5e8e:	9b 83       	std	Y+3, r25	; 0x03
    5e90:	ac 83       	std	Y+4, r26	; 0x04
    5e92:	bd 83       	std	Y+5, r27	; 0x05

		/* Set Row Pins Value as Pulled_up */
		DIO_enuSetPinVal(KPD_ROW0_PORT, KPD_ROW0_PIN, DIO_u8PULL_UP);
    5e94:	81 e0       	ldi	r24, 0x01	; 1
    5e96:	67 e0       	ldi	r22, 0x07	; 7
    5e98:	41 e0       	ldi	r20, 0x01	; 1
    5e9a:	0e 94 37 2c 	call	0x586e	; 0x586e <DIO_enuSetPinVal>
		DIO_enuSetPinVal(KPD_ROW1_PORT, KPD_ROW1_PIN, DIO_u8PULL_UP);
    5e9e:	81 e0       	ldi	r24, 0x01	; 1
    5ea0:	66 e0       	ldi	r22, 0x06	; 6
    5ea2:	41 e0       	ldi	r20, 0x01	; 1
    5ea4:	0e 94 37 2c 	call	0x586e	; 0x586e <DIO_enuSetPinVal>
		DIO_enuSetPinVal(KPD_ROW2_PORT, KPD_ROW2_PIN, DIO_u8PULL_UP);
    5ea8:	81 e0       	ldi	r24, 0x01	; 1
    5eaa:	65 e0       	ldi	r22, 0x05	; 5
    5eac:	41 e0       	ldi	r20, 0x01	; 1
    5eae:	0e 94 37 2c 	call	0x586e	; 0x586e <DIO_enuSetPinVal>
		DIO_enuSetPinVal(KPD_ROW3_PORT, KPD_ROW3_PIN, DIO_u8PULL_UP);
    5eb2:	81 e0       	ldi	r24, 0x01	; 1
    5eb4:	64 e0       	ldi	r22, 0x04	; 4
    5eb6:	41 e0       	ldi	r20, 0x01	; 1
    5eb8:	0e 94 37 2c 	call	0x586e	; 0x586e <DIO_enuSetPinVal>

		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator <= 21; Local_u8Iterator += 3)
    5ebc:	19 82       	std	Y+1, r1	; 0x01
    5ebe:	1d c0       	rjmp	.+58     	; 0x5efa <Keypad_enuInit+0x378>
		{
			if(( (Local_u32Check >> Local_u8Iterator) & (0b111) ) != ES_OK)
    5ec0:	89 81       	ldd	r24, Y+1	; 0x01
    5ec2:	28 2f       	mov	r18, r24
    5ec4:	30 e0       	ldi	r19, 0x00	; 0
    5ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    5ec8:	9b 81       	ldd	r25, Y+3	; 0x03
    5eca:	ac 81       	ldd	r26, Y+4	; 0x04
    5ecc:	bd 81       	ldd	r27, Y+5	; 0x05
    5ece:	02 2e       	mov	r0, r18
    5ed0:	04 c0       	rjmp	.+8      	; 0x5eda <Keypad_enuInit+0x358>
    5ed2:	b6 95       	lsr	r27
    5ed4:	a7 95       	ror	r26
    5ed6:	97 95       	ror	r25
    5ed8:	87 95       	ror	r24
    5eda:	0a 94       	dec	r0
    5edc:	d2 f7       	brpl	.-12     	; 0x5ed2 <Keypad_enuInit+0x350>
    5ede:	87 70       	andi	r24, 0x07	; 7
    5ee0:	90 70       	andi	r25, 0x00	; 0
    5ee2:	a0 70       	andi	r26, 0x00	; 0
    5ee4:	b0 70       	andi	r27, 0x00	; 0
    5ee6:	81 30       	cpi	r24, 0x01	; 1
    5ee8:	91 05       	cpc	r25, r1
    5eea:	a1 05       	cpc	r26, r1
    5eec:	b1 05       	cpc	r27, r1
    5eee:	11 f0       	breq	.+4      	; 0x5ef4 <Keypad_enuInit+0x372>
			{
				return ES_NOK;
    5ef0:	1f 82       	std	Y+7, r1	; 0x07
    5ef2:	08 c0       	rjmp	.+16     	; 0x5f04 <Keypad_enuInit+0x382>
		DIO_enuSetPinVal(KPD_ROW1_PORT, KPD_ROW1_PIN, DIO_u8PULL_UP);
		DIO_enuSetPinVal(KPD_ROW2_PORT, KPD_ROW2_PIN, DIO_u8PULL_UP);
		DIO_enuSetPinVal(KPD_ROW3_PORT, KPD_ROW3_PIN, DIO_u8PULL_UP);

		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator <= 21; Local_u8Iterator += 3)
    5ef4:	89 81       	ldd	r24, Y+1	; 0x01
    5ef6:	8d 5f       	subi	r24, 0xFD	; 253
    5ef8:	89 83       	std	Y+1, r24	; 0x01
    5efa:	89 81       	ldd	r24, Y+1	; 0x01
    5efc:	86 31       	cpi	r24, 0x16	; 22
    5efe:	00 f3       	brcs	.-64     	; 0x5ec0 <Keypad_enuInit+0x33e>
			}

		}

	//	Local_enuErrorState = ES_OK;
		return ES_OK;
    5f00:	81 e0       	ldi	r24, 0x01	; 1
    5f02:	8f 83       	std	Y+7, r24	; 0x07
    5f04:	8f 81       	ldd	r24, Y+7	; 0x07
	}
}
    5f06:	27 96       	adiw	r28, 0x07	; 7
    5f08:	0f b6       	in	r0, 0x3f	; 63
    5f0a:	f8 94       	cli
    5f0c:	de bf       	out	0x3e, r29	; 62
    5f0e:	0f be       	out	0x3f, r0	; 63
    5f10:	cd bf       	out	0x3d, r28	; 61
    5f12:	cf 91       	pop	r28
    5f14:	df 91       	pop	r29
    5f16:	08 95       	ret

00005f18 <Keypad_enuGetPressedKey>:


ES_t Keypad_enuGetPressedKey(u8* Copy_pu8Key)
{
    5f18:	df 93       	push	r29
    5f1a:	cf 93       	push	r28
    5f1c:	cd b7       	in	r28, 0x3d	; 61
    5f1e:	de b7       	in	r29, 0x3e	; 62
    5f20:	ad 97       	sbiw	r28, 0x2d	; 45
    5f22:	0f b6       	in	r0, 0x3f	; 63
    5f24:	f8 94       	cli
    5f26:	de bf       	out	0x3e, r29	; 62
    5f28:	0f be       	out	0x3f, r0	; 63
    5f2a:	cd bf       	out	0x3d, r28	; 61
    5f2c:	9a a3       	std	Y+34, r25	; 0x22
    5f2e:	89 a3       	std	Y+33, r24	; 0x21
	ES_t Local_enuErrorState = ES_NOK;
    5f30:	1b 82       	std	Y+3, r1	; 0x03

	u8 Local_u8Row, Local_u8col, Local_u8pinval;

	*Copy_pu8Key =  DEFAULT_KEY;
    5f32:	e9 a1       	ldd	r30, Y+33	; 0x21
    5f34:	fa a1       	ldd	r31, Y+34	; 0x22
    5f36:	8f ef       	ldi	r24, 0xFF	; 255
    5f38:	80 83       	st	Z, r24

	u8 Local_Au8ColPort[NUM_OF_COL] = KPD_COL_PORTS;
    5f3a:	ce 01       	movw	r24, r28
    5f3c:	05 96       	adiw	r24, 0x05	; 5
    5f3e:	9d a3       	std	Y+37, r25	; 0x25
    5f40:	8c a3       	std	Y+36, r24	; 0x24
    5f42:	e9 e3       	ldi	r30, 0x39	; 57
    5f44:	f2 e0       	ldi	r31, 0x02	; 2
    5f46:	ff a3       	std	Y+39, r31	; 0x27
    5f48:	ee a3       	std	Y+38, r30	; 0x26
    5f4a:	fa e0       	ldi	r31, 0x0A	; 10
    5f4c:	f8 a7       	std	Y+40, r31	; 0x28
    5f4e:	ee a1       	ldd	r30, Y+38	; 0x26
    5f50:	ff a1       	ldd	r31, Y+39	; 0x27
    5f52:	00 80       	ld	r0, Z
    5f54:	8e a1       	ldd	r24, Y+38	; 0x26
    5f56:	9f a1       	ldd	r25, Y+39	; 0x27
    5f58:	01 96       	adiw	r24, 0x01	; 1
    5f5a:	9f a3       	std	Y+39, r25	; 0x27
    5f5c:	8e a3       	std	Y+38, r24	; 0x26
    5f5e:	ec a1       	ldd	r30, Y+36	; 0x24
    5f60:	fd a1       	ldd	r31, Y+37	; 0x25
    5f62:	00 82       	st	Z, r0
    5f64:	8c a1       	ldd	r24, Y+36	; 0x24
    5f66:	9d a1       	ldd	r25, Y+37	; 0x25
    5f68:	01 96       	adiw	r24, 0x01	; 1
    5f6a:	9d a3       	std	Y+37, r25	; 0x25
    5f6c:	8c a3       	std	Y+36, r24	; 0x24
    5f6e:	98 a5       	ldd	r25, Y+40	; 0x28
    5f70:	91 50       	subi	r25, 0x01	; 1
    5f72:	98 a7       	std	Y+40, r25	; 0x28
    5f74:	e8 a5       	ldd	r30, Y+40	; 0x28
    5f76:	ee 23       	and	r30, r30
    5f78:	51 f7       	brne	.-44     	; 0x5f4e <Keypad_enuGetPressedKey+0x36>
	u8 Local_Au8ColPins[NUM_OF_COL] = KPD_COL_PINS;
    5f7a:	ce 01       	movw	r24, r28
    5f7c:	0f 96       	adiw	r24, 0x0f	; 15
    5f7e:	9a a7       	std	Y+42, r25	; 0x2a
    5f80:	89 a7       	std	Y+41, r24	; 0x29
    5f82:	ef e2       	ldi	r30, 0x2F	; 47
    5f84:	f2 e0       	ldi	r31, 0x02	; 2
    5f86:	fc a7       	std	Y+44, r31	; 0x2c
    5f88:	eb a7       	std	Y+43, r30	; 0x2b
    5f8a:	fa e0       	ldi	r31, 0x0A	; 10
    5f8c:	fd a7       	std	Y+45, r31	; 0x2d
    5f8e:	eb a5       	ldd	r30, Y+43	; 0x2b
    5f90:	fc a5       	ldd	r31, Y+44	; 0x2c
    5f92:	00 80       	ld	r0, Z
    5f94:	8b a5       	ldd	r24, Y+43	; 0x2b
    5f96:	9c a5       	ldd	r25, Y+44	; 0x2c
    5f98:	01 96       	adiw	r24, 0x01	; 1
    5f9a:	9c a7       	std	Y+44, r25	; 0x2c
    5f9c:	8b a7       	std	Y+43, r24	; 0x2b
    5f9e:	e9 a5       	ldd	r30, Y+41	; 0x29
    5fa0:	fa a5       	ldd	r31, Y+42	; 0x2a
    5fa2:	00 82       	st	Z, r0
    5fa4:	89 a5       	ldd	r24, Y+41	; 0x29
    5fa6:	9a a5       	ldd	r25, Y+42	; 0x2a
    5fa8:	01 96       	adiw	r24, 0x01	; 1
    5faa:	9a a7       	std	Y+42, r25	; 0x2a
    5fac:	89 a7       	std	Y+41, r24	; 0x29
    5fae:	9d a5       	ldd	r25, Y+45	; 0x2d
    5fb0:	91 50       	subi	r25, 0x01	; 1
    5fb2:	9d a7       	std	Y+45, r25	; 0x2d
    5fb4:	ed a5       	ldd	r30, Y+45	; 0x2d
    5fb6:	ee 23       	and	r30, r30
    5fb8:	51 f7       	brne	.-44     	; 0x5f8e <Keypad_enuGetPressedKey+0x76>

	u8 Local_Au8ROWPort[NUM_OF_ROW] = KPD_ROW_PORTS;
    5fba:	81 e0       	ldi	r24, 0x01	; 1
    5fbc:	89 8f       	std	Y+25, r24	; 0x19
    5fbe:	81 e0       	ldi	r24, 0x01	; 1
    5fc0:	8a 8f       	std	Y+26, r24	; 0x1a
    5fc2:	81 e0       	ldi	r24, 0x01	; 1
    5fc4:	8b 8f       	std	Y+27, r24	; 0x1b
    5fc6:	81 e0       	ldi	r24, 0x01	; 1
    5fc8:	8c 8f       	std	Y+28, r24	; 0x1c
	u8 Local_Au8ROWPins[NUM_OF_ROW] = KPD_ROW_PINS;
    5fca:	87 e0       	ldi	r24, 0x07	; 7
    5fcc:	8d 8f       	std	Y+29, r24	; 0x1d
    5fce:	86 e0       	ldi	r24, 0x06	; 6
    5fd0:	8e 8f       	std	Y+30, r24	; 0x1e
    5fd2:	85 e0       	ldi	r24, 0x05	; 5
    5fd4:	8f 8f       	std	Y+31, r24	; 0x1f
    5fd6:	84 e0       	ldi	r24, 0x04	; 4
    5fd8:	88 a3       	std	Y+32, r24	; 0x20



	for(Local_u8col = 0; Local_u8col < NUM_OF_COL; ++Local_u8col)
    5fda:	19 82       	std	Y+1, r1	; 0x01
    5fdc:	af c0       	rjmp	.+350    	; 0x613c <Keypad_enuGetPressedKey+0x224>
	{

		Local_enuErrorState = DIO_enuSetPinVal(Local_Au8ColPort[Local_u8col], Local_Au8ColPins[Local_u8col], DIO_u8LOW );
    5fde:	89 81       	ldd	r24, Y+1	; 0x01
    5fe0:	28 2f       	mov	r18, r24
    5fe2:	30 e0       	ldi	r19, 0x00	; 0
    5fe4:	ce 01       	movw	r24, r28
    5fe6:	05 96       	adiw	r24, 0x05	; 5
    5fe8:	fc 01       	movw	r30, r24
    5fea:	e2 0f       	add	r30, r18
    5fec:	f3 1f       	adc	r31, r19
    5fee:	40 81       	ld	r20, Z
    5ff0:	89 81       	ldd	r24, Y+1	; 0x01
    5ff2:	28 2f       	mov	r18, r24
    5ff4:	30 e0       	ldi	r19, 0x00	; 0
    5ff6:	ce 01       	movw	r24, r28
    5ff8:	0f 96       	adiw	r24, 0x0f	; 15
    5ffa:	fc 01       	movw	r30, r24
    5ffc:	e2 0f       	add	r30, r18
    5ffe:	f3 1f       	adc	r31, r19
    6000:	90 81       	ld	r25, Z
    6002:	84 2f       	mov	r24, r20
    6004:	69 2f       	mov	r22, r25
    6006:	40 e0       	ldi	r20, 0x00	; 0
    6008:	0e 94 37 2c 	call	0x586e	; 0x586e <DIO_enuSetPinVal>
    600c:	8b 83       	std	Y+3, r24	; 0x03
		if(Local_enuErrorState != ES_OK) return Local_enuErrorState;
    600e:	8b 81       	ldd	r24, Y+3	; 0x03
    6010:	81 30       	cpi	r24, 0x01	; 1
    6012:	19 f0       	breq	.+6      	; 0x601a <Keypad_enuGetPressedKey+0x102>
    6014:	fb 81       	ldd	r31, Y+3	; 0x03
    6016:	fb a3       	std	Y+35, r31	; 0x23
    6018:	97 c0       	rjmp	.+302    	; 0x6148 <Keypad_enuGetPressedKey+0x230>

		for(Local_u8Row = 0; Local_u8Row < NUM_OF_ROW; ++Local_u8Row)
    601a:	1a 82       	std	Y+2, r1	; 0x02
    601c:	6a c0       	rjmp	.+212    	; 0x60f2 <Keypad_enuGetPressedKey+0x1da>
		{
			Local_enuErrorState = DIO_enuGetPinVal(Local_Au8ROWPort[Local_u8Row], Local_Au8ROWPins[Local_u8Row] ,&Local_u8pinval);
    601e:	8a 81       	ldd	r24, Y+2	; 0x02
    6020:	28 2f       	mov	r18, r24
    6022:	30 e0       	ldi	r19, 0x00	; 0
    6024:	ce 01       	movw	r24, r28
    6026:	49 96       	adiw	r24, 0x19	; 25
    6028:	fc 01       	movw	r30, r24
    602a:	e2 0f       	add	r30, r18
    602c:	f3 1f       	adc	r31, r19
    602e:	40 81       	ld	r20, Z
    6030:	8a 81       	ldd	r24, Y+2	; 0x02
    6032:	28 2f       	mov	r18, r24
    6034:	30 e0       	ldi	r19, 0x00	; 0
    6036:	ce 01       	movw	r24, r28
    6038:	4d 96       	adiw	r24, 0x1d	; 29
    603a:	fc 01       	movw	r30, r24
    603c:	e2 0f       	add	r30, r18
    603e:	f3 1f       	adc	r31, r19
    6040:	90 81       	ld	r25, Z
    6042:	9e 01       	movw	r18, r28
    6044:	2c 5f       	subi	r18, 0xFC	; 252
    6046:	3f 4f       	sbci	r19, 0xFF	; 255
    6048:	84 2f       	mov	r24, r20
    604a:	69 2f       	mov	r22, r25
    604c:	a9 01       	movw	r20, r18
    604e:	0e 94 23 2d 	call	0x5a46	; 0x5a46 <DIO_enuGetPinVal>
    6052:	8b 83       	std	Y+3, r24	; 0x03
			if(Local_enuErrorState != ES_OK) return Local_enuErrorState;
    6054:	8b 81       	ldd	r24, Y+3	; 0x03
    6056:	81 30       	cpi	r24, 0x01	; 1
    6058:	19 f0       	breq	.+6      	; 0x6060 <Keypad_enuGetPressedKey+0x148>
    605a:	8b 81       	ldd	r24, Y+3	; 0x03
    605c:	8b a3       	std	Y+35, r24	; 0x23
    605e:	74 c0       	rjmp	.+232    	; 0x6148 <Keypad_enuGetPressedKey+0x230>

			if(!Local_u8pinval)
    6060:	8c 81       	ldd	r24, Y+4	; 0x04
    6062:	88 23       	and	r24, r24
    6064:	d9 f5       	brne	.+118    	; 0x60dc <Keypad_enuGetPressedKey+0x1c4>
			{
				//_delay_ms(10);
				if(!Local_u8pinval)
    6066:	8c 81       	ldd	r24, Y+4	; 0x04
    6068:	88 23       	and	r24, r24
    606a:	c1 f5       	brne	.+112    	; 0x60dc <Keypad_enuGetPressedKey+0x1c4>
				{

					*Copy_pu8Key = Keypad_u8Buttons[Local_u8Row][Local_u8col];
    606c:	8a 81       	ldd	r24, Y+2	; 0x02
    606e:	28 2f       	mov	r18, r24
    6070:	30 e0       	ldi	r19, 0x00	; 0
    6072:	89 81       	ldd	r24, Y+1	; 0x01
    6074:	48 2f       	mov	r20, r24
    6076:	50 e0       	ldi	r21, 0x00	; 0
    6078:	c9 01       	movw	r24, r18
    607a:	88 0f       	add	r24, r24
    607c:	99 1f       	adc	r25, r25
    607e:	9c 01       	movw	r18, r24
    6080:	22 0f       	add	r18, r18
    6082:	33 1f       	adc	r19, r19
    6084:	22 0f       	add	r18, r18
    6086:	33 1f       	adc	r19, r19
    6088:	82 0f       	add	r24, r18
    608a:	93 1f       	adc	r25, r19
    608c:	84 0f       	add	r24, r20
    608e:	95 1f       	adc	r25, r21
    6090:	fc 01       	movw	r30, r24
    6092:	e9 50       	subi	r30, 0x09	; 9
    6094:	fe 4f       	sbci	r31, 0xFE	; 254
    6096:	80 81       	ld	r24, Z
    6098:	e9 a1       	ldd	r30, Y+33	; 0x21
    609a:	fa a1       	ldd	r31, Y+34	; 0x22
    609c:	80 83       	st	Z, r24
    609e:	1b c0       	rjmp	.+54     	; 0x60d6 <Keypad_enuGetPressedKey+0x1be>

					while(!Local_u8pinval)
					{
						Local_enuErrorState = DIO_enuGetPinVal(Local_Au8ROWPort[Local_u8Row], Local_Au8ROWPins[Local_u8Row] ,&Local_u8pinval);
    60a0:	8a 81       	ldd	r24, Y+2	; 0x02
    60a2:	28 2f       	mov	r18, r24
    60a4:	30 e0       	ldi	r19, 0x00	; 0
    60a6:	ce 01       	movw	r24, r28
    60a8:	49 96       	adiw	r24, 0x19	; 25
    60aa:	fc 01       	movw	r30, r24
    60ac:	e2 0f       	add	r30, r18
    60ae:	f3 1f       	adc	r31, r19
    60b0:	40 81       	ld	r20, Z
    60b2:	8a 81       	ldd	r24, Y+2	; 0x02
    60b4:	28 2f       	mov	r18, r24
    60b6:	30 e0       	ldi	r19, 0x00	; 0
    60b8:	ce 01       	movw	r24, r28
    60ba:	4d 96       	adiw	r24, 0x1d	; 29
    60bc:	fc 01       	movw	r30, r24
    60be:	e2 0f       	add	r30, r18
    60c0:	f3 1f       	adc	r31, r19
    60c2:	90 81       	ld	r25, Z
    60c4:	9e 01       	movw	r18, r28
    60c6:	2c 5f       	subi	r18, 0xFC	; 252
    60c8:	3f 4f       	sbci	r19, 0xFF	; 255
    60ca:	84 2f       	mov	r24, r20
    60cc:	69 2f       	mov	r22, r25
    60ce:	a9 01       	movw	r20, r18
    60d0:	0e 94 23 2d 	call	0x5a46	; 0x5a46 <DIO_enuGetPinVal>
    60d4:	8b 83       	std	Y+3, r24	; 0x03
				if(!Local_u8pinval)
				{

					*Copy_pu8Key = Keypad_u8Buttons[Local_u8Row][Local_u8col];

					while(!Local_u8pinval)
    60d6:	8c 81       	ldd	r24, Y+4	; 0x04
    60d8:	88 23       	and	r24, r24
    60da:	11 f3       	breq	.-60     	; 0x60a0 <Keypad_enuGetPressedKey+0x188>
					}

				}
			}

			if(*Copy_pu8Key != DEFAULT_KEY)  return Local_enuErrorState;
    60dc:	e9 a1       	ldd	r30, Y+33	; 0x21
    60de:	fa a1       	ldd	r31, Y+34	; 0x22
    60e0:	80 81       	ld	r24, Z
    60e2:	8f 3f       	cpi	r24, 0xFF	; 255
    60e4:	19 f0       	breq	.+6      	; 0x60ec <Keypad_enuGetPressedKey+0x1d4>
    60e6:	9b 81       	ldd	r25, Y+3	; 0x03
    60e8:	9b a3       	std	Y+35, r25	; 0x23
    60ea:	2e c0       	rjmp	.+92     	; 0x6148 <Keypad_enuGetPressedKey+0x230>
	{

		Local_enuErrorState = DIO_enuSetPinVal(Local_Au8ColPort[Local_u8col], Local_Au8ColPins[Local_u8col], DIO_u8LOW );
		if(Local_enuErrorState != ES_OK) return Local_enuErrorState;

		for(Local_u8Row = 0; Local_u8Row < NUM_OF_ROW; ++Local_u8Row)
    60ec:	8a 81       	ldd	r24, Y+2	; 0x02
    60ee:	8f 5f       	subi	r24, 0xFF	; 255
    60f0:	8a 83       	std	Y+2, r24	; 0x02
    60f2:	8a 81       	ldd	r24, Y+2	; 0x02
    60f4:	84 30       	cpi	r24, 0x04	; 4
    60f6:	08 f4       	brcc	.+2      	; 0x60fa <Keypad_enuGetPressedKey+0x1e2>
    60f8:	92 cf       	rjmp	.-220    	; 0x601e <Keypad_enuGetPressedKey+0x106>
			}

			if(*Copy_pu8Key != DEFAULT_KEY)  return Local_enuErrorState;
		}

		Local_enuErrorState = DIO_enuSetPinVal(Local_Au8ColPort[Local_u8col], Local_Au8ColPins[Local_u8col], DIO_u8HIGH );
    60fa:	89 81       	ldd	r24, Y+1	; 0x01
    60fc:	28 2f       	mov	r18, r24
    60fe:	30 e0       	ldi	r19, 0x00	; 0
    6100:	ce 01       	movw	r24, r28
    6102:	05 96       	adiw	r24, 0x05	; 5
    6104:	fc 01       	movw	r30, r24
    6106:	e2 0f       	add	r30, r18
    6108:	f3 1f       	adc	r31, r19
    610a:	40 81       	ld	r20, Z
    610c:	89 81       	ldd	r24, Y+1	; 0x01
    610e:	28 2f       	mov	r18, r24
    6110:	30 e0       	ldi	r19, 0x00	; 0
    6112:	ce 01       	movw	r24, r28
    6114:	0f 96       	adiw	r24, 0x0f	; 15
    6116:	fc 01       	movw	r30, r24
    6118:	e2 0f       	add	r30, r18
    611a:	f3 1f       	adc	r31, r19
    611c:	90 81       	ld	r25, Z
    611e:	84 2f       	mov	r24, r20
    6120:	69 2f       	mov	r22, r25
    6122:	41 e0       	ldi	r20, 0x01	; 1
    6124:	0e 94 37 2c 	call	0x586e	; 0x586e <DIO_enuSetPinVal>
    6128:	8b 83       	std	Y+3, r24	; 0x03
		if(Local_enuErrorState != ES_OK) return Local_enuErrorState;
    612a:	8b 81       	ldd	r24, Y+3	; 0x03
    612c:	81 30       	cpi	r24, 0x01	; 1
    612e:	19 f0       	breq	.+6      	; 0x6136 <Keypad_enuGetPressedKey+0x21e>
    6130:	eb 81       	ldd	r30, Y+3	; 0x03
    6132:	eb a3       	std	Y+35, r30	; 0x23
    6134:	09 c0       	rjmp	.+18     	; 0x6148 <Keypad_enuGetPressedKey+0x230>
	u8 Local_Au8ROWPort[NUM_OF_ROW] = KPD_ROW_PORTS;
	u8 Local_Au8ROWPins[NUM_OF_ROW] = KPD_ROW_PINS;



	for(Local_u8col = 0; Local_u8col < NUM_OF_COL; ++Local_u8col)
    6136:	89 81       	ldd	r24, Y+1	; 0x01
    6138:	8f 5f       	subi	r24, 0xFF	; 255
    613a:	89 83       	std	Y+1, r24	; 0x01
    613c:	89 81       	ldd	r24, Y+1	; 0x01
    613e:	8a 30       	cpi	r24, 0x0A	; 10
    6140:	08 f4       	brcc	.+2      	; 0x6144 <Keypad_enuGetPressedKey+0x22c>
    6142:	4d cf       	rjmp	.-358    	; 0x5fde <Keypad_enuGetPressedKey+0xc6>
		if(Local_enuErrorState != ES_OK) return Local_enuErrorState;

	}


	return Local_enuErrorState;
    6144:	fb 81       	ldd	r31, Y+3	; 0x03
    6146:	fb a3       	std	Y+35, r31	; 0x23
    6148:	8b a1       	ldd	r24, Y+35	; 0x23
}
    614a:	ad 96       	adiw	r28, 0x2d	; 45
    614c:	0f b6       	in	r0, 0x3f	; 63
    614e:	f8 94       	cli
    6150:	de bf       	out	0x3e, r29	; 62
    6152:	0f be       	out	0x3f, r0	; 63
    6154:	cd bf       	out	0x3d, r28	; 61
    6156:	cf 91       	pop	r28
    6158:	df 91       	pop	r29
    615a:	08 95       	ret

0000615c <LCD_enuInit>:
u8 Global_u8Flag = 0;
u8 Local_u8Iterator;


ES_t LCD_enuInit(void)
{
    615c:	af 92       	push	r10
    615e:	bf 92       	push	r11
    6160:	cf 92       	push	r12
    6162:	df 92       	push	r13
    6164:	ef 92       	push	r14
    6166:	ff 92       	push	r15
    6168:	0f 93       	push	r16
    616a:	1f 93       	push	r17
    616c:	df 93       	push	r29
    616e:	cf 93       	push	r28
    6170:	cd b7       	in	r28, 0x3d	; 61
    6172:	de b7       	in	r29, 0x3e	; 62
    6174:	cc 54       	subi	r28, 0x4C	; 76
    6176:	d0 40       	sbci	r29, 0x00	; 0
    6178:	0f b6       	in	r0, 0x3f	; 63
    617a:	f8 94       	cli
    617c:	de bf       	out	0x3e, r29	; 62
    617e:	0f be       	out	0x3f, r0	; 63
    6180:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    6182:	fe 01       	movw	r30, r28
    6184:	ef 5b       	subi	r30, 0xBF	; 191
    6186:	ff 4f       	sbci	r31, 0xFF	; 255
    6188:	10 82       	st	Z, r1

	u64 Local_u64Check = 0;
    618a:	19 ae       	std	Y+57, r1	; 0x39
    618c:	1a ae       	std	Y+58, r1	; 0x3a
    618e:	1b ae       	std	Y+59, r1	; 0x3b
    6190:	1c ae       	std	Y+60, r1	; 0x3c
    6192:	1d ae       	std	Y+61, r1	; 0x3d
    6194:	1e ae       	std	Y+62, r1	; 0x3e
    6196:	1f ae       	std	Y+63, r1	; 0x3f
    6198:	fe 01       	movw	r30, r28
    619a:	e0 5c       	subi	r30, 0xC0	; 192
    619c:	ff 4f       	sbci	r31, 0xFF	; 255
    619e:	10 82       	st	Z, r1

	Local_u64Check |= (((u64)DIO_enuSetPinDir(RS_PORT, RS_PIN, DIO_u8OUTPUT)<<0 ));
    61a0:	80 e0       	ldi	r24, 0x00	; 0
    61a2:	60 e0       	ldi	r22, 0x00	; 0
    61a4:	41 e0       	ldi	r20, 0x01	; 1
    61a6:	0e 94 4b 2b 	call	0x5696	; 0x5696 <DIO_enuSetPinDir>
    61aa:	28 2f       	mov	r18, r24
    61ac:	30 e0       	ldi	r19, 0x00	; 0
    61ae:	40 e0       	ldi	r20, 0x00	; 0
    61b0:	50 e0       	ldi	r21, 0x00	; 0
    61b2:	60 e0       	ldi	r22, 0x00	; 0
    61b4:	70 e0       	ldi	r23, 0x00	; 0
    61b6:	80 e0       	ldi	r24, 0x00	; 0
    61b8:	90 e0       	ldi	r25, 0x00	; 0
    61ba:	e9 ad       	ldd	r30, Y+57	; 0x39
    61bc:	e2 2b       	or	r30, r18
    61be:	e9 af       	std	Y+57, r30	; 0x39
    61c0:	ea ad       	ldd	r30, Y+58	; 0x3a
    61c2:	e3 2b       	or	r30, r19
    61c4:	ea af       	std	Y+58, r30	; 0x3a
    61c6:	eb ad       	ldd	r30, Y+59	; 0x3b
    61c8:	e4 2b       	or	r30, r20
    61ca:	eb af       	std	Y+59, r30	; 0x3b
    61cc:	ec ad       	ldd	r30, Y+60	; 0x3c
    61ce:	e5 2b       	or	r30, r21
    61d0:	ec af       	std	Y+60, r30	; 0x3c
    61d2:	ed ad       	ldd	r30, Y+61	; 0x3d
    61d4:	e6 2b       	or	r30, r22
    61d6:	ed af       	std	Y+61, r30	; 0x3d
    61d8:	ee ad       	ldd	r30, Y+62	; 0x3e
    61da:	e7 2b       	or	r30, r23
    61dc:	ee af       	std	Y+62, r30	; 0x3e
    61de:	ef ad       	ldd	r30, Y+63	; 0x3f
    61e0:	e8 2b       	or	r30, r24
    61e2:	ef af       	std	Y+63, r30	; 0x3f
    61e4:	fe 01       	movw	r30, r28
    61e6:	e0 5c       	subi	r30, 0xC0	; 192
    61e8:	ff 4f       	sbci	r31, 0xFF	; 255
    61ea:	e0 81       	ld	r30, Z
    61ec:	8e 2f       	mov	r24, r30
    61ee:	89 2b       	or	r24, r25
    61f0:	fe 01       	movw	r30, r28
    61f2:	e0 5c       	subi	r30, 0xC0	; 192
    61f4:	ff 4f       	sbci	r31, 0xFF	; 255
    61f6:	80 83       	st	Z, r24
	Local_u64Check |= (((u64)DIO_enuSetPinDir(RW_PORT, RW_PIN, DIO_u8OUTPUT)<<3 ));
    61f8:	80 e0       	ldi	r24, 0x00	; 0
    61fa:	61 e0       	ldi	r22, 0x01	; 1
    61fc:	41 e0       	ldi	r20, 0x01	; 1
    61fe:	0e 94 4b 2b 	call	0x5696	; 0x5696 <DIO_enuSetPinDir>
    6202:	a8 2e       	mov	r10, r24
    6204:	bb 24       	eor	r11, r11
    6206:	cc 24       	eor	r12, r12
    6208:	dd 24       	eor	r13, r13
    620a:	ee 24       	eor	r14, r14
    620c:	ff 24       	eor	r15, r15
    620e:	87 01       	movw	r16, r14
    6210:	2a 2d       	mov	r18, r10
    6212:	3b 2d       	mov	r19, r11
    6214:	4c 2d       	mov	r20, r12
    6216:	5d 2d       	mov	r21, r13
    6218:	6e 2d       	mov	r22, r14
    621a:	7f 2d       	mov	r23, r15
    621c:	80 2f       	mov	r24, r16
    621e:	91 2f       	mov	r25, r17
    6220:	03 e0       	ldi	r16, 0x03	; 3
    6222:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    6226:	a2 2e       	mov	r10, r18
    6228:	b3 2e       	mov	r11, r19
    622a:	c4 2e       	mov	r12, r20
    622c:	d5 2e       	mov	r13, r21
    622e:	e6 2e       	mov	r14, r22
    6230:	f7 2e       	mov	r15, r23
    6232:	08 2f       	mov	r16, r24
    6234:	19 2f       	mov	r17, r25
    6236:	2a 2d       	mov	r18, r10
    6238:	3b 2d       	mov	r19, r11
    623a:	4c 2d       	mov	r20, r12
    623c:	5d 2d       	mov	r21, r13
    623e:	6e 2d       	mov	r22, r14
    6240:	7f 2d       	mov	r23, r15
    6242:	80 2f       	mov	r24, r16
    6244:	91 2f       	mov	r25, r17
    6246:	e9 ad       	ldd	r30, Y+57	; 0x39
    6248:	e2 2b       	or	r30, r18
    624a:	e9 af       	std	Y+57, r30	; 0x39
    624c:	ea ad       	ldd	r30, Y+58	; 0x3a
    624e:	e3 2b       	or	r30, r19
    6250:	ea af       	std	Y+58, r30	; 0x3a
    6252:	eb ad       	ldd	r30, Y+59	; 0x3b
    6254:	e4 2b       	or	r30, r20
    6256:	eb af       	std	Y+59, r30	; 0x3b
    6258:	ec ad       	ldd	r30, Y+60	; 0x3c
    625a:	e5 2b       	or	r30, r21
    625c:	ec af       	std	Y+60, r30	; 0x3c
    625e:	ed ad       	ldd	r30, Y+61	; 0x3d
    6260:	e6 2b       	or	r30, r22
    6262:	ed af       	std	Y+61, r30	; 0x3d
    6264:	ee ad       	ldd	r30, Y+62	; 0x3e
    6266:	e7 2b       	or	r30, r23
    6268:	ee af       	std	Y+62, r30	; 0x3e
    626a:	ef ad       	ldd	r30, Y+63	; 0x3f
    626c:	e8 2b       	or	r30, r24
    626e:	ef af       	std	Y+63, r30	; 0x3f
    6270:	fe 01       	movw	r30, r28
    6272:	e0 5c       	subi	r30, 0xC0	; 192
    6274:	ff 4f       	sbci	r31, 0xFF	; 255
    6276:	e0 81       	ld	r30, Z
    6278:	8e 2f       	mov	r24, r30
    627a:	89 2b       	or	r24, r25
    627c:	fe 01       	movw	r30, r28
    627e:	e0 5c       	subi	r30, 0xC0	; 192
    6280:	ff 4f       	sbci	r31, 0xFF	; 255
    6282:	80 83       	st	Z, r24
	Local_u64Check |= (((u64)DIO_enuSetPinDir(EN_PORT, EN_PIN, DIO_u8OUTPUT)<<6 ));
    6284:	83 e0       	ldi	r24, 0x03	; 3
    6286:	63 e0       	ldi	r22, 0x03	; 3
    6288:	41 e0       	ldi	r20, 0x01	; 1
    628a:	0e 94 4b 2b 	call	0x5696	; 0x5696 <DIO_enuSetPinDir>
    628e:	a8 2e       	mov	r10, r24
    6290:	bb 24       	eor	r11, r11
    6292:	cc 24       	eor	r12, r12
    6294:	dd 24       	eor	r13, r13
    6296:	ee 24       	eor	r14, r14
    6298:	ff 24       	eor	r15, r15
    629a:	87 01       	movw	r16, r14
    629c:	2a 2d       	mov	r18, r10
    629e:	3b 2d       	mov	r19, r11
    62a0:	4c 2d       	mov	r20, r12
    62a2:	5d 2d       	mov	r21, r13
    62a4:	6e 2d       	mov	r22, r14
    62a6:	7f 2d       	mov	r23, r15
    62a8:	80 2f       	mov	r24, r16
    62aa:	91 2f       	mov	r25, r17
    62ac:	06 e0       	ldi	r16, 0x06	; 6
    62ae:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    62b2:	a2 2e       	mov	r10, r18
    62b4:	b3 2e       	mov	r11, r19
    62b6:	c4 2e       	mov	r12, r20
    62b8:	d5 2e       	mov	r13, r21
    62ba:	e6 2e       	mov	r14, r22
    62bc:	f7 2e       	mov	r15, r23
    62be:	08 2f       	mov	r16, r24
    62c0:	19 2f       	mov	r17, r25
    62c2:	2a 2d       	mov	r18, r10
    62c4:	3b 2d       	mov	r19, r11
    62c6:	4c 2d       	mov	r20, r12
    62c8:	5d 2d       	mov	r21, r13
    62ca:	6e 2d       	mov	r22, r14
    62cc:	7f 2d       	mov	r23, r15
    62ce:	80 2f       	mov	r24, r16
    62d0:	91 2f       	mov	r25, r17
    62d2:	e9 ad       	ldd	r30, Y+57	; 0x39
    62d4:	e2 2b       	or	r30, r18
    62d6:	e9 af       	std	Y+57, r30	; 0x39
    62d8:	ea ad       	ldd	r30, Y+58	; 0x3a
    62da:	e3 2b       	or	r30, r19
    62dc:	ea af       	std	Y+58, r30	; 0x3a
    62de:	eb ad       	ldd	r30, Y+59	; 0x3b
    62e0:	e4 2b       	or	r30, r20
    62e2:	eb af       	std	Y+59, r30	; 0x3b
    62e4:	ec ad       	ldd	r30, Y+60	; 0x3c
    62e6:	e5 2b       	or	r30, r21
    62e8:	ec af       	std	Y+60, r30	; 0x3c
    62ea:	ed ad       	ldd	r30, Y+61	; 0x3d
    62ec:	e6 2b       	or	r30, r22
    62ee:	ed af       	std	Y+61, r30	; 0x3d
    62f0:	ee ad       	ldd	r30, Y+62	; 0x3e
    62f2:	e7 2b       	or	r30, r23
    62f4:	ee af       	std	Y+62, r30	; 0x3e
    62f6:	ef ad       	ldd	r30, Y+63	; 0x3f
    62f8:	e8 2b       	or	r30, r24
    62fa:	ef af       	std	Y+63, r30	; 0x3f
    62fc:	fe 01       	movw	r30, r28
    62fe:	e0 5c       	subi	r30, 0xC0	; 192
    6300:	ff 4f       	sbci	r31, 0xFF	; 255
    6302:	e0 81       	ld	r30, Z
    6304:	8e 2f       	mov	r24, r30
    6306:	89 2b       	or	r24, r25
    6308:	fe 01       	movw	r30, r28
    630a:	e0 5c       	subi	r30, 0xC0	; 192
    630c:	ff 4f       	sbci	r31, 0xFF	; 255
    630e:	80 83       	st	Z, r24


	Local_u64Check |= (((u64)DIO_enuSetPinDir(DB4_PORT, DB4_PIN, DIO_u8OUTPUT)<<9 ));
    6310:	83 e0       	ldi	r24, 0x03	; 3
    6312:	60 e0       	ldi	r22, 0x00	; 0
    6314:	41 e0       	ldi	r20, 0x01	; 1
    6316:	0e 94 4b 2b 	call	0x5696	; 0x5696 <DIO_enuSetPinDir>
    631a:	a8 2e       	mov	r10, r24
    631c:	bb 24       	eor	r11, r11
    631e:	cc 24       	eor	r12, r12
    6320:	dd 24       	eor	r13, r13
    6322:	ee 24       	eor	r14, r14
    6324:	ff 24       	eor	r15, r15
    6326:	87 01       	movw	r16, r14
    6328:	2a 2d       	mov	r18, r10
    632a:	3b 2d       	mov	r19, r11
    632c:	4c 2d       	mov	r20, r12
    632e:	5d 2d       	mov	r21, r13
    6330:	6e 2d       	mov	r22, r14
    6332:	7f 2d       	mov	r23, r15
    6334:	80 2f       	mov	r24, r16
    6336:	91 2f       	mov	r25, r17
    6338:	09 e0       	ldi	r16, 0x09	; 9
    633a:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    633e:	a2 2e       	mov	r10, r18
    6340:	b3 2e       	mov	r11, r19
    6342:	c4 2e       	mov	r12, r20
    6344:	d5 2e       	mov	r13, r21
    6346:	e6 2e       	mov	r14, r22
    6348:	f7 2e       	mov	r15, r23
    634a:	08 2f       	mov	r16, r24
    634c:	19 2f       	mov	r17, r25
    634e:	2a 2d       	mov	r18, r10
    6350:	3b 2d       	mov	r19, r11
    6352:	4c 2d       	mov	r20, r12
    6354:	5d 2d       	mov	r21, r13
    6356:	6e 2d       	mov	r22, r14
    6358:	7f 2d       	mov	r23, r15
    635a:	80 2f       	mov	r24, r16
    635c:	91 2f       	mov	r25, r17
    635e:	e9 ad       	ldd	r30, Y+57	; 0x39
    6360:	e2 2b       	or	r30, r18
    6362:	e9 af       	std	Y+57, r30	; 0x39
    6364:	ea ad       	ldd	r30, Y+58	; 0x3a
    6366:	e3 2b       	or	r30, r19
    6368:	ea af       	std	Y+58, r30	; 0x3a
    636a:	eb ad       	ldd	r30, Y+59	; 0x3b
    636c:	e4 2b       	or	r30, r20
    636e:	eb af       	std	Y+59, r30	; 0x3b
    6370:	ec ad       	ldd	r30, Y+60	; 0x3c
    6372:	e5 2b       	or	r30, r21
    6374:	ec af       	std	Y+60, r30	; 0x3c
    6376:	ed ad       	ldd	r30, Y+61	; 0x3d
    6378:	e6 2b       	or	r30, r22
    637a:	ed af       	std	Y+61, r30	; 0x3d
    637c:	ee ad       	ldd	r30, Y+62	; 0x3e
    637e:	e7 2b       	or	r30, r23
    6380:	ee af       	std	Y+62, r30	; 0x3e
    6382:	ef ad       	ldd	r30, Y+63	; 0x3f
    6384:	e8 2b       	or	r30, r24
    6386:	ef af       	std	Y+63, r30	; 0x3f
    6388:	fe 01       	movw	r30, r28
    638a:	e0 5c       	subi	r30, 0xC0	; 192
    638c:	ff 4f       	sbci	r31, 0xFF	; 255
    638e:	e0 81       	ld	r30, Z
    6390:	8e 2f       	mov	r24, r30
    6392:	89 2b       	or	r24, r25
    6394:	fe 01       	movw	r30, r28
    6396:	e0 5c       	subi	r30, 0xC0	; 192
    6398:	ff 4f       	sbci	r31, 0xFF	; 255
    639a:	80 83       	st	Z, r24
	Local_u64Check |= (((u64)DIO_enuSetPinDir(DB5_PORT, DB5_PIN, DIO_u8OUTPUT)<<12));
    639c:	83 e0       	ldi	r24, 0x03	; 3
    639e:	61 e0       	ldi	r22, 0x01	; 1
    63a0:	41 e0       	ldi	r20, 0x01	; 1
    63a2:	0e 94 4b 2b 	call	0x5696	; 0x5696 <DIO_enuSetPinDir>
    63a6:	a8 2e       	mov	r10, r24
    63a8:	bb 24       	eor	r11, r11
    63aa:	cc 24       	eor	r12, r12
    63ac:	dd 24       	eor	r13, r13
    63ae:	ee 24       	eor	r14, r14
    63b0:	ff 24       	eor	r15, r15
    63b2:	87 01       	movw	r16, r14
    63b4:	2a 2d       	mov	r18, r10
    63b6:	3b 2d       	mov	r19, r11
    63b8:	4c 2d       	mov	r20, r12
    63ba:	5d 2d       	mov	r21, r13
    63bc:	6e 2d       	mov	r22, r14
    63be:	7f 2d       	mov	r23, r15
    63c0:	80 2f       	mov	r24, r16
    63c2:	91 2f       	mov	r25, r17
    63c4:	0c e0       	ldi	r16, 0x0C	; 12
    63c6:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    63ca:	a2 2e       	mov	r10, r18
    63cc:	b3 2e       	mov	r11, r19
    63ce:	c4 2e       	mov	r12, r20
    63d0:	d5 2e       	mov	r13, r21
    63d2:	e6 2e       	mov	r14, r22
    63d4:	f7 2e       	mov	r15, r23
    63d6:	08 2f       	mov	r16, r24
    63d8:	19 2f       	mov	r17, r25
    63da:	2a 2d       	mov	r18, r10
    63dc:	3b 2d       	mov	r19, r11
    63de:	4c 2d       	mov	r20, r12
    63e0:	5d 2d       	mov	r21, r13
    63e2:	6e 2d       	mov	r22, r14
    63e4:	7f 2d       	mov	r23, r15
    63e6:	80 2f       	mov	r24, r16
    63e8:	91 2f       	mov	r25, r17
    63ea:	e9 ad       	ldd	r30, Y+57	; 0x39
    63ec:	e2 2b       	or	r30, r18
    63ee:	e9 af       	std	Y+57, r30	; 0x39
    63f0:	ea ad       	ldd	r30, Y+58	; 0x3a
    63f2:	e3 2b       	or	r30, r19
    63f4:	ea af       	std	Y+58, r30	; 0x3a
    63f6:	eb ad       	ldd	r30, Y+59	; 0x3b
    63f8:	e4 2b       	or	r30, r20
    63fa:	eb af       	std	Y+59, r30	; 0x3b
    63fc:	ec ad       	ldd	r30, Y+60	; 0x3c
    63fe:	e5 2b       	or	r30, r21
    6400:	ec af       	std	Y+60, r30	; 0x3c
    6402:	ed ad       	ldd	r30, Y+61	; 0x3d
    6404:	e6 2b       	or	r30, r22
    6406:	ed af       	std	Y+61, r30	; 0x3d
    6408:	ee ad       	ldd	r30, Y+62	; 0x3e
    640a:	e7 2b       	or	r30, r23
    640c:	ee af       	std	Y+62, r30	; 0x3e
    640e:	ef ad       	ldd	r30, Y+63	; 0x3f
    6410:	e8 2b       	or	r30, r24
    6412:	ef af       	std	Y+63, r30	; 0x3f
    6414:	fe 01       	movw	r30, r28
    6416:	e0 5c       	subi	r30, 0xC0	; 192
    6418:	ff 4f       	sbci	r31, 0xFF	; 255
    641a:	e0 81       	ld	r30, Z
    641c:	8e 2f       	mov	r24, r30
    641e:	89 2b       	or	r24, r25
    6420:	fe 01       	movw	r30, r28
    6422:	e0 5c       	subi	r30, 0xC0	; 192
    6424:	ff 4f       	sbci	r31, 0xFF	; 255
    6426:	80 83       	st	Z, r24
	Local_u64Check |= (((u64)DIO_enuSetPinDir(DB6_PORT, DB6_PIN, DIO_u8OUTPUT)<<15));
    6428:	80 e0       	ldi	r24, 0x00	; 0
    642a:	62 e0       	ldi	r22, 0x02	; 2
    642c:	41 e0       	ldi	r20, 0x01	; 1
    642e:	0e 94 4b 2b 	call	0x5696	; 0x5696 <DIO_enuSetPinDir>
    6432:	a8 2e       	mov	r10, r24
    6434:	bb 24       	eor	r11, r11
    6436:	cc 24       	eor	r12, r12
    6438:	dd 24       	eor	r13, r13
    643a:	ee 24       	eor	r14, r14
    643c:	ff 24       	eor	r15, r15
    643e:	87 01       	movw	r16, r14
    6440:	2a 2d       	mov	r18, r10
    6442:	3b 2d       	mov	r19, r11
    6444:	4c 2d       	mov	r20, r12
    6446:	5d 2d       	mov	r21, r13
    6448:	6e 2d       	mov	r22, r14
    644a:	7f 2d       	mov	r23, r15
    644c:	80 2f       	mov	r24, r16
    644e:	91 2f       	mov	r25, r17
    6450:	0f e0       	ldi	r16, 0x0F	; 15
    6452:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    6456:	a2 2e       	mov	r10, r18
    6458:	b3 2e       	mov	r11, r19
    645a:	c4 2e       	mov	r12, r20
    645c:	d5 2e       	mov	r13, r21
    645e:	e6 2e       	mov	r14, r22
    6460:	f7 2e       	mov	r15, r23
    6462:	08 2f       	mov	r16, r24
    6464:	19 2f       	mov	r17, r25
    6466:	2a 2d       	mov	r18, r10
    6468:	3b 2d       	mov	r19, r11
    646a:	4c 2d       	mov	r20, r12
    646c:	5d 2d       	mov	r21, r13
    646e:	6e 2d       	mov	r22, r14
    6470:	7f 2d       	mov	r23, r15
    6472:	80 2f       	mov	r24, r16
    6474:	91 2f       	mov	r25, r17
    6476:	e9 ad       	ldd	r30, Y+57	; 0x39
    6478:	e2 2b       	or	r30, r18
    647a:	e9 af       	std	Y+57, r30	; 0x39
    647c:	ea ad       	ldd	r30, Y+58	; 0x3a
    647e:	e3 2b       	or	r30, r19
    6480:	ea af       	std	Y+58, r30	; 0x3a
    6482:	eb ad       	ldd	r30, Y+59	; 0x3b
    6484:	e4 2b       	or	r30, r20
    6486:	eb af       	std	Y+59, r30	; 0x3b
    6488:	ec ad       	ldd	r30, Y+60	; 0x3c
    648a:	e5 2b       	or	r30, r21
    648c:	ec af       	std	Y+60, r30	; 0x3c
    648e:	ed ad       	ldd	r30, Y+61	; 0x3d
    6490:	e6 2b       	or	r30, r22
    6492:	ed af       	std	Y+61, r30	; 0x3d
    6494:	ee ad       	ldd	r30, Y+62	; 0x3e
    6496:	e7 2b       	or	r30, r23
    6498:	ee af       	std	Y+62, r30	; 0x3e
    649a:	ef ad       	ldd	r30, Y+63	; 0x3f
    649c:	e8 2b       	or	r30, r24
    649e:	ef af       	std	Y+63, r30	; 0x3f
    64a0:	fe 01       	movw	r30, r28
    64a2:	e0 5c       	subi	r30, 0xC0	; 192
    64a4:	ff 4f       	sbci	r31, 0xFF	; 255
    64a6:	e0 81       	ld	r30, Z
    64a8:	8e 2f       	mov	r24, r30
    64aa:	89 2b       	or	r24, r25
    64ac:	fe 01       	movw	r30, r28
    64ae:	e0 5c       	subi	r30, 0xC0	; 192
    64b0:	ff 4f       	sbci	r31, 0xFF	; 255
    64b2:	80 83       	st	Z, r24
	Local_u64Check |= (((u64)DIO_enuSetPinDir(DB7_PORT, DB7_PIN, DIO_u8OUTPUT)<<18));
    64b4:	82 e0       	ldi	r24, 0x02	; 2
    64b6:	62 e0       	ldi	r22, 0x02	; 2
    64b8:	41 e0       	ldi	r20, 0x01	; 1
    64ba:	0e 94 4b 2b 	call	0x5696	; 0x5696 <DIO_enuSetPinDir>
    64be:	a8 2e       	mov	r10, r24
    64c0:	bb 24       	eor	r11, r11
    64c2:	cc 24       	eor	r12, r12
    64c4:	dd 24       	eor	r13, r13
    64c6:	ee 24       	eor	r14, r14
    64c8:	ff 24       	eor	r15, r15
    64ca:	87 01       	movw	r16, r14
    64cc:	2a 2d       	mov	r18, r10
    64ce:	3b 2d       	mov	r19, r11
    64d0:	4c 2d       	mov	r20, r12
    64d2:	5d 2d       	mov	r21, r13
    64d4:	6e 2d       	mov	r22, r14
    64d6:	7f 2d       	mov	r23, r15
    64d8:	80 2f       	mov	r24, r16
    64da:	91 2f       	mov	r25, r17
    64dc:	02 e1       	ldi	r16, 0x12	; 18
    64de:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    64e2:	a2 2e       	mov	r10, r18
    64e4:	b3 2e       	mov	r11, r19
    64e6:	c4 2e       	mov	r12, r20
    64e8:	d5 2e       	mov	r13, r21
    64ea:	e6 2e       	mov	r14, r22
    64ec:	f7 2e       	mov	r15, r23
    64ee:	08 2f       	mov	r16, r24
    64f0:	19 2f       	mov	r17, r25
    64f2:	2a 2d       	mov	r18, r10
    64f4:	3b 2d       	mov	r19, r11
    64f6:	4c 2d       	mov	r20, r12
    64f8:	5d 2d       	mov	r21, r13
    64fa:	6e 2d       	mov	r22, r14
    64fc:	7f 2d       	mov	r23, r15
    64fe:	80 2f       	mov	r24, r16
    6500:	91 2f       	mov	r25, r17
    6502:	e9 ad       	ldd	r30, Y+57	; 0x39
    6504:	e2 2b       	or	r30, r18
    6506:	e9 af       	std	Y+57, r30	; 0x39
    6508:	ea ad       	ldd	r30, Y+58	; 0x3a
    650a:	e3 2b       	or	r30, r19
    650c:	ea af       	std	Y+58, r30	; 0x3a
    650e:	eb ad       	ldd	r30, Y+59	; 0x3b
    6510:	e4 2b       	or	r30, r20
    6512:	eb af       	std	Y+59, r30	; 0x3b
    6514:	ec ad       	ldd	r30, Y+60	; 0x3c
    6516:	e5 2b       	or	r30, r21
    6518:	ec af       	std	Y+60, r30	; 0x3c
    651a:	ed ad       	ldd	r30, Y+61	; 0x3d
    651c:	e6 2b       	or	r30, r22
    651e:	ed af       	std	Y+61, r30	; 0x3d
    6520:	ee ad       	ldd	r30, Y+62	; 0x3e
    6522:	e7 2b       	or	r30, r23
    6524:	ee af       	std	Y+62, r30	; 0x3e
    6526:	ef ad       	ldd	r30, Y+63	; 0x3f
    6528:	e8 2b       	or	r30, r24
    652a:	ef af       	std	Y+63, r30	; 0x3f
    652c:	fe 01       	movw	r30, r28
    652e:	e0 5c       	subi	r30, 0xC0	; 192
    6530:	ff 4f       	sbci	r31, 0xFF	; 255
    6532:	e0 81       	ld	r30, Z
    6534:	8e 2f       	mov	r24, r30
    6536:	89 2b       	or	r24, r25
    6538:	fe 01       	movw	r30, r28
    653a:	e0 5c       	subi	r30, 0xC0	; 192
    653c:	ff 4f       	sbci	r31, 0xFF	; 255
    653e:	80 83       	st	Z, r24
    6540:	80 e0       	ldi	r24, 0x00	; 0
    6542:	90 e0       	ldi	r25, 0x00	; 0
    6544:	a0 e2       	ldi	r26, 0x20	; 32
    6546:	b2 e4       	ldi	r27, 0x42	; 66
    6548:	8d ab       	std	Y+53, r24	; 0x35
    654a:	9e ab       	std	Y+54, r25	; 0x36
    654c:	af ab       	std	Y+55, r26	; 0x37
    654e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6550:	6d a9       	ldd	r22, Y+53	; 0x35
    6552:	7e a9       	ldd	r23, Y+54	; 0x36
    6554:	8f a9       	ldd	r24, Y+55	; 0x37
    6556:	98 ad       	ldd	r25, Y+56	; 0x38
    6558:	20 e0       	ldi	r18, 0x00	; 0
    655a:	30 e0       	ldi	r19, 0x00	; 0
    655c:	4a e7       	ldi	r20, 0x7A	; 122
    655e:	53 e4       	ldi	r21, 0x43	; 67
    6560:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    6564:	dc 01       	movw	r26, r24
    6566:	cb 01       	movw	r24, r22
    6568:	89 ab       	std	Y+49, r24	; 0x31
    656a:	9a ab       	std	Y+50, r25	; 0x32
    656c:	ab ab       	std	Y+51, r26	; 0x33
    656e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    6570:	69 a9       	ldd	r22, Y+49	; 0x31
    6572:	7a a9       	ldd	r23, Y+50	; 0x32
    6574:	8b a9       	ldd	r24, Y+51	; 0x33
    6576:	9c a9       	ldd	r25, Y+52	; 0x34
    6578:	20 e0       	ldi	r18, 0x00	; 0
    657a:	30 e0       	ldi	r19, 0x00	; 0
    657c:	40 e8       	ldi	r20, 0x80	; 128
    657e:	5f e3       	ldi	r21, 0x3F	; 63
    6580:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    6584:	88 23       	and	r24, r24
    6586:	2c f4       	brge	.+10     	; 0x6592 <LCD_enuInit+0x436>
		__ticks = 1;
    6588:	81 e0       	ldi	r24, 0x01	; 1
    658a:	90 e0       	ldi	r25, 0x00	; 0
    658c:	98 ab       	std	Y+48, r25	; 0x30
    658e:	8f a7       	std	Y+47, r24	; 0x2f
    6590:	3f c0       	rjmp	.+126    	; 0x6610 <LCD_enuInit+0x4b4>
	else if (__tmp > 65535)
    6592:	69 a9       	ldd	r22, Y+49	; 0x31
    6594:	7a a9       	ldd	r23, Y+50	; 0x32
    6596:	8b a9       	ldd	r24, Y+51	; 0x33
    6598:	9c a9       	ldd	r25, Y+52	; 0x34
    659a:	20 e0       	ldi	r18, 0x00	; 0
    659c:	3f ef       	ldi	r19, 0xFF	; 255
    659e:	4f e7       	ldi	r20, 0x7F	; 127
    65a0:	57 e4       	ldi	r21, 0x47	; 71
    65a2:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    65a6:	18 16       	cp	r1, r24
    65a8:	4c f5       	brge	.+82     	; 0x65fc <LCD_enuInit+0x4a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    65aa:	6d a9       	ldd	r22, Y+53	; 0x35
    65ac:	7e a9       	ldd	r23, Y+54	; 0x36
    65ae:	8f a9       	ldd	r24, Y+55	; 0x37
    65b0:	98 ad       	ldd	r25, Y+56	; 0x38
    65b2:	20 e0       	ldi	r18, 0x00	; 0
    65b4:	30 e0       	ldi	r19, 0x00	; 0
    65b6:	40 e2       	ldi	r20, 0x20	; 32
    65b8:	51 e4       	ldi	r21, 0x41	; 65
    65ba:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    65be:	dc 01       	movw	r26, r24
    65c0:	cb 01       	movw	r24, r22
    65c2:	bc 01       	movw	r22, r24
    65c4:	cd 01       	movw	r24, r26
    65c6:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    65ca:	dc 01       	movw	r26, r24
    65cc:	cb 01       	movw	r24, r22
    65ce:	98 ab       	std	Y+48, r25	; 0x30
    65d0:	8f a7       	std	Y+47, r24	; 0x2f
    65d2:	0f c0       	rjmp	.+30     	; 0x65f2 <LCD_enuInit+0x496>
    65d4:	89 e1       	ldi	r24, 0x19	; 25
    65d6:	90 e0       	ldi	r25, 0x00	; 0
    65d8:	9e a7       	std	Y+46, r25	; 0x2e
    65da:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    65dc:	8d a5       	ldd	r24, Y+45	; 0x2d
    65de:	9e a5       	ldd	r25, Y+46	; 0x2e
    65e0:	01 97       	sbiw	r24, 0x01	; 1
    65e2:	f1 f7       	brne	.-4      	; 0x65e0 <LCD_enuInit+0x484>
    65e4:	9e a7       	std	Y+46, r25	; 0x2e
    65e6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    65e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    65ea:	98 a9       	ldd	r25, Y+48	; 0x30
    65ec:	01 97       	sbiw	r24, 0x01	; 1
    65ee:	98 ab       	std	Y+48, r25	; 0x30
    65f0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    65f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    65f4:	98 a9       	ldd	r25, Y+48	; 0x30
    65f6:	00 97       	sbiw	r24, 0x00	; 0
    65f8:	69 f7       	brne	.-38     	; 0x65d4 <LCD_enuInit+0x478>
    65fa:	14 c0       	rjmp	.+40     	; 0x6624 <LCD_enuInit+0x4c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    65fc:	69 a9       	ldd	r22, Y+49	; 0x31
    65fe:	7a a9       	ldd	r23, Y+50	; 0x32
    6600:	8b a9       	ldd	r24, Y+51	; 0x33
    6602:	9c a9       	ldd	r25, Y+52	; 0x34
    6604:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    6608:	dc 01       	movw	r26, r24
    660a:	cb 01       	movw	r24, r22
    660c:	98 ab       	std	Y+48, r25	; 0x30
    660e:	8f a7       	std	Y+47, r24	; 0x2f
    6610:	8f a5       	ldd	r24, Y+47	; 0x2f
    6612:	98 a9       	ldd	r25, Y+48	; 0x30
    6614:	9c a7       	std	Y+44, r25	; 0x2c
    6616:	8b a7       	std	Y+43, r24	; 0x2b
    6618:	8b a5       	ldd	r24, Y+43	; 0x2b
    661a:	9c a5       	ldd	r25, Y+44	; 0x2c
    661c:	01 97       	sbiw	r24, 0x01	; 1
    661e:	f1 f7       	brne	.-4      	; 0x661c <LCD_enuInit+0x4c0>
    6620:	9c a7       	std	Y+44, r25	; 0x2c
    6622:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);

#if LCD_MODE == EIGHT_BIT


	Local_u64Check |= (((u64)DIO_enuSetPinDir(DB0_PORT, DB0_PIN, DIO_u8OUTPUT)<<21 ));
    6624:	81 e0       	ldi	r24, 0x01	; 1
    6626:	60 e0       	ldi	r22, 0x00	; 0
    6628:	41 e0       	ldi	r20, 0x01	; 1
    662a:	0e 94 4b 2b 	call	0x5696	; 0x5696 <DIO_enuSetPinDir>
    662e:	a8 2e       	mov	r10, r24
    6630:	bb 24       	eor	r11, r11
    6632:	cc 24       	eor	r12, r12
    6634:	dd 24       	eor	r13, r13
    6636:	ee 24       	eor	r14, r14
    6638:	ff 24       	eor	r15, r15
    663a:	87 01       	movw	r16, r14
    663c:	2a 2d       	mov	r18, r10
    663e:	3b 2d       	mov	r19, r11
    6640:	4c 2d       	mov	r20, r12
    6642:	5d 2d       	mov	r21, r13
    6644:	6e 2d       	mov	r22, r14
    6646:	7f 2d       	mov	r23, r15
    6648:	80 2f       	mov	r24, r16
    664a:	91 2f       	mov	r25, r17
    664c:	05 e1       	ldi	r16, 0x15	; 21
    664e:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    6652:	a2 2e       	mov	r10, r18
    6654:	b3 2e       	mov	r11, r19
    6656:	c4 2e       	mov	r12, r20
    6658:	d5 2e       	mov	r13, r21
    665a:	e6 2e       	mov	r14, r22
    665c:	f7 2e       	mov	r15, r23
    665e:	08 2f       	mov	r16, r24
    6660:	19 2f       	mov	r17, r25
    6662:	2a 2d       	mov	r18, r10
    6664:	3b 2d       	mov	r19, r11
    6666:	4c 2d       	mov	r20, r12
    6668:	5d 2d       	mov	r21, r13
    666a:	6e 2d       	mov	r22, r14
    666c:	7f 2d       	mov	r23, r15
    666e:	80 2f       	mov	r24, r16
    6670:	91 2f       	mov	r25, r17
    6672:	e9 ad       	ldd	r30, Y+57	; 0x39
    6674:	e2 2b       	or	r30, r18
    6676:	e9 af       	std	Y+57, r30	; 0x39
    6678:	ea ad       	ldd	r30, Y+58	; 0x3a
    667a:	e3 2b       	or	r30, r19
    667c:	ea af       	std	Y+58, r30	; 0x3a
    667e:	eb ad       	ldd	r30, Y+59	; 0x3b
    6680:	e4 2b       	or	r30, r20
    6682:	eb af       	std	Y+59, r30	; 0x3b
    6684:	ec ad       	ldd	r30, Y+60	; 0x3c
    6686:	e5 2b       	or	r30, r21
    6688:	ec af       	std	Y+60, r30	; 0x3c
    668a:	ed ad       	ldd	r30, Y+61	; 0x3d
    668c:	e6 2b       	or	r30, r22
    668e:	ed af       	std	Y+61, r30	; 0x3d
    6690:	ee ad       	ldd	r30, Y+62	; 0x3e
    6692:	e7 2b       	or	r30, r23
    6694:	ee af       	std	Y+62, r30	; 0x3e
    6696:	ef ad       	ldd	r30, Y+63	; 0x3f
    6698:	e8 2b       	or	r30, r24
    669a:	ef af       	std	Y+63, r30	; 0x3f
    669c:	fe 01       	movw	r30, r28
    669e:	e0 5c       	subi	r30, 0xC0	; 192
    66a0:	ff 4f       	sbci	r31, 0xFF	; 255
    66a2:	e0 81       	ld	r30, Z
    66a4:	8e 2f       	mov	r24, r30
    66a6:	89 2b       	or	r24, r25
    66a8:	fe 01       	movw	r30, r28
    66aa:	e0 5c       	subi	r30, 0xC0	; 192
    66ac:	ff 4f       	sbci	r31, 0xFF	; 255
    66ae:	80 83       	st	Z, r24
	Local_u64Check |= (((u64)DIO_enuSetPinDir(DB1_PORT, DB1_PIN, DIO_u8OUTPUT)<<24 ));
    66b0:	81 e0       	ldi	r24, 0x01	; 1
    66b2:	61 e0       	ldi	r22, 0x01	; 1
    66b4:	41 e0       	ldi	r20, 0x01	; 1
    66b6:	0e 94 4b 2b 	call	0x5696	; 0x5696 <DIO_enuSetPinDir>
    66ba:	a8 2e       	mov	r10, r24
    66bc:	bb 24       	eor	r11, r11
    66be:	cc 24       	eor	r12, r12
    66c0:	dd 24       	eor	r13, r13
    66c2:	ee 24       	eor	r14, r14
    66c4:	ff 24       	eor	r15, r15
    66c6:	87 01       	movw	r16, r14
    66c8:	2a 2d       	mov	r18, r10
    66ca:	3b 2d       	mov	r19, r11
    66cc:	4c 2d       	mov	r20, r12
    66ce:	5d 2d       	mov	r21, r13
    66d0:	6e 2d       	mov	r22, r14
    66d2:	7f 2d       	mov	r23, r15
    66d4:	80 2f       	mov	r24, r16
    66d6:	91 2f       	mov	r25, r17
    66d8:	08 e1       	ldi	r16, 0x18	; 24
    66da:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    66de:	a2 2e       	mov	r10, r18
    66e0:	b3 2e       	mov	r11, r19
    66e2:	c4 2e       	mov	r12, r20
    66e4:	d5 2e       	mov	r13, r21
    66e6:	e6 2e       	mov	r14, r22
    66e8:	f7 2e       	mov	r15, r23
    66ea:	08 2f       	mov	r16, r24
    66ec:	19 2f       	mov	r17, r25
    66ee:	2a 2d       	mov	r18, r10
    66f0:	3b 2d       	mov	r19, r11
    66f2:	4c 2d       	mov	r20, r12
    66f4:	5d 2d       	mov	r21, r13
    66f6:	6e 2d       	mov	r22, r14
    66f8:	7f 2d       	mov	r23, r15
    66fa:	80 2f       	mov	r24, r16
    66fc:	91 2f       	mov	r25, r17
    66fe:	e9 ad       	ldd	r30, Y+57	; 0x39
    6700:	e2 2b       	or	r30, r18
    6702:	e9 af       	std	Y+57, r30	; 0x39
    6704:	ea ad       	ldd	r30, Y+58	; 0x3a
    6706:	e3 2b       	or	r30, r19
    6708:	ea af       	std	Y+58, r30	; 0x3a
    670a:	eb ad       	ldd	r30, Y+59	; 0x3b
    670c:	e4 2b       	or	r30, r20
    670e:	eb af       	std	Y+59, r30	; 0x3b
    6710:	ec ad       	ldd	r30, Y+60	; 0x3c
    6712:	e5 2b       	or	r30, r21
    6714:	ec af       	std	Y+60, r30	; 0x3c
    6716:	ed ad       	ldd	r30, Y+61	; 0x3d
    6718:	e6 2b       	or	r30, r22
    671a:	ed af       	std	Y+61, r30	; 0x3d
    671c:	ee ad       	ldd	r30, Y+62	; 0x3e
    671e:	e7 2b       	or	r30, r23
    6720:	ee af       	std	Y+62, r30	; 0x3e
    6722:	ef ad       	ldd	r30, Y+63	; 0x3f
    6724:	e8 2b       	or	r30, r24
    6726:	ef af       	std	Y+63, r30	; 0x3f
    6728:	fe 01       	movw	r30, r28
    672a:	e0 5c       	subi	r30, 0xC0	; 192
    672c:	ff 4f       	sbci	r31, 0xFF	; 255
    672e:	e0 81       	ld	r30, Z
    6730:	8e 2f       	mov	r24, r30
    6732:	89 2b       	or	r24, r25
    6734:	fe 01       	movw	r30, r28
    6736:	e0 5c       	subi	r30, 0xC0	; 192
    6738:	ff 4f       	sbci	r31, 0xFF	; 255
    673a:	80 83       	st	Z, r24
	Local_u64Check |= (((u64)DIO_enuSetPinDir(DB2_PORT, DB2_PIN, DIO_u8OUTPUT)<<27 ));
    673c:	82 e0       	ldi	r24, 0x02	; 2
    673e:	60 e0       	ldi	r22, 0x00	; 0
    6740:	41 e0       	ldi	r20, 0x01	; 1
    6742:	0e 94 4b 2b 	call	0x5696	; 0x5696 <DIO_enuSetPinDir>
    6746:	a8 2e       	mov	r10, r24
    6748:	bb 24       	eor	r11, r11
    674a:	cc 24       	eor	r12, r12
    674c:	dd 24       	eor	r13, r13
    674e:	ee 24       	eor	r14, r14
    6750:	ff 24       	eor	r15, r15
    6752:	87 01       	movw	r16, r14
    6754:	2a 2d       	mov	r18, r10
    6756:	3b 2d       	mov	r19, r11
    6758:	4c 2d       	mov	r20, r12
    675a:	5d 2d       	mov	r21, r13
    675c:	6e 2d       	mov	r22, r14
    675e:	7f 2d       	mov	r23, r15
    6760:	80 2f       	mov	r24, r16
    6762:	91 2f       	mov	r25, r17
    6764:	0b e1       	ldi	r16, 0x1B	; 27
    6766:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    676a:	a2 2e       	mov	r10, r18
    676c:	b3 2e       	mov	r11, r19
    676e:	c4 2e       	mov	r12, r20
    6770:	d5 2e       	mov	r13, r21
    6772:	e6 2e       	mov	r14, r22
    6774:	f7 2e       	mov	r15, r23
    6776:	08 2f       	mov	r16, r24
    6778:	19 2f       	mov	r17, r25
    677a:	2a 2d       	mov	r18, r10
    677c:	3b 2d       	mov	r19, r11
    677e:	4c 2d       	mov	r20, r12
    6780:	5d 2d       	mov	r21, r13
    6782:	6e 2d       	mov	r22, r14
    6784:	7f 2d       	mov	r23, r15
    6786:	80 2f       	mov	r24, r16
    6788:	91 2f       	mov	r25, r17
    678a:	e9 ad       	ldd	r30, Y+57	; 0x39
    678c:	e2 2b       	or	r30, r18
    678e:	e9 af       	std	Y+57, r30	; 0x39
    6790:	ea ad       	ldd	r30, Y+58	; 0x3a
    6792:	e3 2b       	or	r30, r19
    6794:	ea af       	std	Y+58, r30	; 0x3a
    6796:	eb ad       	ldd	r30, Y+59	; 0x3b
    6798:	e4 2b       	or	r30, r20
    679a:	eb af       	std	Y+59, r30	; 0x3b
    679c:	ec ad       	ldd	r30, Y+60	; 0x3c
    679e:	e5 2b       	or	r30, r21
    67a0:	ec af       	std	Y+60, r30	; 0x3c
    67a2:	ed ad       	ldd	r30, Y+61	; 0x3d
    67a4:	e6 2b       	or	r30, r22
    67a6:	ed af       	std	Y+61, r30	; 0x3d
    67a8:	ee ad       	ldd	r30, Y+62	; 0x3e
    67aa:	e7 2b       	or	r30, r23
    67ac:	ee af       	std	Y+62, r30	; 0x3e
    67ae:	ef ad       	ldd	r30, Y+63	; 0x3f
    67b0:	e8 2b       	or	r30, r24
    67b2:	ef af       	std	Y+63, r30	; 0x3f
    67b4:	fe 01       	movw	r30, r28
    67b6:	e0 5c       	subi	r30, 0xC0	; 192
    67b8:	ff 4f       	sbci	r31, 0xFF	; 255
    67ba:	e0 81       	ld	r30, Z
    67bc:	8e 2f       	mov	r24, r30
    67be:	89 2b       	or	r24, r25
    67c0:	fe 01       	movw	r30, r28
    67c2:	e0 5c       	subi	r30, 0xC0	; 192
    67c4:	ff 4f       	sbci	r31, 0xFF	; 255
    67c6:	80 83       	st	Z, r24
	Local_u64Check |= (((u64)DIO_enuSetPinDir(DB3_PORT, DB3_PIN, DIO_u8OUTPUT)<<30 ));
    67c8:	82 e0       	ldi	r24, 0x02	; 2
    67ca:	61 e0       	ldi	r22, 0x01	; 1
    67cc:	41 e0       	ldi	r20, 0x01	; 1
    67ce:	0e 94 4b 2b 	call	0x5696	; 0x5696 <DIO_enuSetPinDir>
    67d2:	a8 2e       	mov	r10, r24
    67d4:	bb 24       	eor	r11, r11
    67d6:	cc 24       	eor	r12, r12
    67d8:	dd 24       	eor	r13, r13
    67da:	ee 24       	eor	r14, r14
    67dc:	ff 24       	eor	r15, r15
    67de:	87 01       	movw	r16, r14
    67e0:	2a 2d       	mov	r18, r10
    67e2:	3b 2d       	mov	r19, r11
    67e4:	4c 2d       	mov	r20, r12
    67e6:	5d 2d       	mov	r21, r13
    67e8:	6e 2d       	mov	r22, r14
    67ea:	7f 2d       	mov	r23, r15
    67ec:	80 2f       	mov	r24, r16
    67ee:	91 2f       	mov	r25, r17
    67f0:	0e e1       	ldi	r16, 0x1E	; 30
    67f2:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    67f6:	a2 2e       	mov	r10, r18
    67f8:	b3 2e       	mov	r11, r19
    67fa:	c4 2e       	mov	r12, r20
    67fc:	d5 2e       	mov	r13, r21
    67fe:	e6 2e       	mov	r14, r22
    6800:	f7 2e       	mov	r15, r23
    6802:	08 2f       	mov	r16, r24
    6804:	19 2f       	mov	r17, r25
    6806:	2a 2d       	mov	r18, r10
    6808:	3b 2d       	mov	r19, r11
    680a:	4c 2d       	mov	r20, r12
    680c:	5d 2d       	mov	r21, r13
    680e:	6e 2d       	mov	r22, r14
    6810:	7f 2d       	mov	r23, r15
    6812:	80 2f       	mov	r24, r16
    6814:	91 2f       	mov	r25, r17
    6816:	e9 ad       	ldd	r30, Y+57	; 0x39
    6818:	e2 2b       	or	r30, r18
    681a:	e9 af       	std	Y+57, r30	; 0x39
    681c:	ea ad       	ldd	r30, Y+58	; 0x3a
    681e:	e3 2b       	or	r30, r19
    6820:	ea af       	std	Y+58, r30	; 0x3a
    6822:	eb ad       	ldd	r30, Y+59	; 0x3b
    6824:	e4 2b       	or	r30, r20
    6826:	eb af       	std	Y+59, r30	; 0x3b
    6828:	ec ad       	ldd	r30, Y+60	; 0x3c
    682a:	e5 2b       	or	r30, r21
    682c:	ec af       	std	Y+60, r30	; 0x3c
    682e:	ed ad       	ldd	r30, Y+61	; 0x3d
    6830:	e6 2b       	or	r30, r22
    6832:	ed af       	std	Y+61, r30	; 0x3d
    6834:	ee ad       	ldd	r30, Y+62	; 0x3e
    6836:	e7 2b       	or	r30, r23
    6838:	ee af       	std	Y+62, r30	; 0x3e
    683a:	ef ad       	ldd	r30, Y+63	; 0x3f
    683c:	e8 2b       	or	r30, r24
    683e:	ef af       	std	Y+63, r30	; 0x3f
    6840:	fe 01       	movw	r30, r28
    6842:	e0 5c       	subi	r30, 0xC0	; 192
    6844:	ff 4f       	sbci	r31, 0xFF	; 255
    6846:	e0 81       	ld	r30, Z
    6848:	8e 2f       	mov	r24, r30
    684a:	89 2b       	or	r24, r25
    684c:	fe 01       	movw	r30, r28
    684e:	e0 5c       	subi	r30, 0xC0	; 192
    6850:	ff 4f       	sbci	r31, 0xFF	; 255
    6852:	80 83       	st	Z, r24

	// Function Set
		Local_u64Check |= ((u64)LCD_inenuSendCommand(0x38) << 33); //2 lines, 5*7 ,8 bit mode
    6854:	88 e3       	ldi	r24, 0x38	; 56
    6856:	0e 94 8e 3b 	call	0x771c	; 0x771c <LCD_inenuSendCommand>
    685a:	a8 2e       	mov	r10, r24
    685c:	bb 24       	eor	r11, r11
    685e:	cc 24       	eor	r12, r12
    6860:	dd 24       	eor	r13, r13
    6862:	ee 24       	eor	r14, r14
    6864:	ff 24       	eor	r15, r15
    6866:	87 01       	movw	r16, r14
    6868:	2a 2d       	mov	r18, r10
    686a:	3b 2d       	mov	r19, r11
    686c:	4c 2d       	mov	r20, r12
    686e:	5d 2d       	mov	r21, r13
    6870:	6e 2d       	mov	r22, r14
    6872:	7f 2d       	mov	r23, r15
    6874:	80 2f       	mov	r24, r16
    6876:	91 2f       	mov	r25, r17
    6878:	01 e2       	ldi	r16, 0x21	; 33
    687a:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    687e:	a2 2e       	mov	r10, r18
    6880:	b3 2e       	mov	r11, r19
    6882:	c4 2e       	mov	r12, r20
    6884:	d5 2e       	mov	r13, r21
    6886:	e6 2e       	mov	r14, r22
    6888:	f7 2e       	mov	r15, r23
    688a:	08 2f       	mov	r16, r24
    688c:	19 2f       	mov	r17, r25
    688e:	2a 2d       	mov	r18, r10
    6890:	3b 2d       	mov	r19, r11
    6892:	4c 2d       	mov	r20, r12
    6894:	5d 2d       	mov	r21, r13
    6896:	6e 2d       	mov	r22, r14
    6898:	7f 2d       	mov	r23, r15
    689a:	80 2f       	mov	r24, r16
    689c:	91 2f       	mov	r25, r17
    689e:	e9 ad       	ldd	r30, Y+57	; 0x39
    68a0:	e2 2b       	or	r30, r18
    68a2:	e9 af       	std	Y+57, r30	; 0x39
    68a4:	ea ad       	ldd	r30, Y+58	; 0x3a
    68a6:	e3 2b       	or	r30, r19
    68a8:	ea af       	std	Y+58, r30	; 0x3a
    68aa:	eb ad       	ldd	r30, Y+59	; 0x3b
    68ac:	e4 2b       	or	r30, r20
    68ae:	eb af       	std	Y+59, r30	; 0x3b
    68b0:	ec ad       	ldd	r30, Y+60	; 0x3c
    68b2:	e5 2b       	or	r30, r21
    68b4:	ec af       	std	Y+60, r30	; 0x3c
    68b6:	ed ad       	ldd	r30, Y+61	; 0x3d
    68b8:	e6 2b       	or	r30, r22
    68ba:	ed af       	std	Y+61, r30	; 0x3d
    68bc:	ee ad       	ldd	r30, Y+62	; 0x3e
    68be:	e7 2b       	or	r30, r23
    68c0:	ee af       	std	Y+62, r30	; 0x3e
    68c2:	ef ad       	ldd	r30, Y+63	; 0x3f
    68c4:	e8 2b       	or	r30, r24
    68c6:	ef af       	std	Y+63, r30	; 0x3f
    68c8:	fe 01       	movw	r30, r28
    68ca:	e0 5c       	subi	r30, 0xC0	; 192
    68cc:	ff 4f       	sbci	r31, 0xFF	; 255
    68ce:	e0 81       	ld	r30, Z
    68d0:	8e 2f       	mov	r24, r30
    68d2:	89 2b       	or	r24, r25
    68d4:	fe 01       	movw	r30, r28
    68d6:	e0 5c       	subi	r30, 0xC0	; 192
    68d8:	ff 4f       	sbci	r31, 0xFF	; 255
    68da:	80 83       	st	Z, r24
    68dc:	80 e0       	ldi	r24, 0x00	; 0
    68de:	90 e0       	ldi	r25, 0x00	; 0
    68e0:	a0 e8       	ldi	r26, 0x80	; 128
    68e2:	bf e3       	ldi	r27, 0x3F	; 63
    68e4:	8f a3       	std	Y+39, r24	; 0x27
    68e6:	98 a7       	std	Y+40, r25	; 0x28
    68e8:	a9 a7       	std	Y+41, r26	; 0x29
    68ea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    68ec:	6f a1       	ldd	r22, Y+39	; 0x27
    68ee:	78 a5       	ldd	r23, Y+40	; 0x28
    68f0:	89 a5       	ldd	r24, Y+41	; 0x29
    68f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    68f4:	20 e0       	ldi	r18, 0x00	; 0
    68f6:	30 e0       	ldi	r19, 0x00	; 0
    68f8:	4a e7       	ldi	r20, 0x7A	; 122
    68fa:	53 e4       	ldi	r21, 0x43	; 67
    68fc:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    6900:	dc 01       	movw	r26, r24
    6902:	cb 01       	movw	r24, r22
    6904:	8b a3       	std	Y+35, r24	; 0x23
    6906:	9c a3       	std	Y+36, r25	; 0x24
    6908:	ad a3       	std	Y+37, r26	; 0x25
    690a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    690c:	6b a1       	ldd	r22, Y+35	; 0x23
    690e:	7c a1       	ldd	r23, Y+36	; 0x24
    6910:	8d a1       	ldd	r24, Y+37	; 0x25
    6912:	9e a1       	ldd	r25, Y+38	; 0x26
    6914:	20 e0       	ldi	r18, 0x00	; 0
    6916:	30 e0       	ldi	r19, 0x00	; 0
    6918:	40 e8       	ldi	r20, 0x80	; 128
    691a:	5f e3       	ldi	r21, 0x3F	; 63
    691c:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    6920:	88 23       	and	r24, r24
    6922:	2c f4       	brge	.+10     	; 0x692e <LCD_enuInit+0x7d2>
		__ticks = 1;
    6924:	81 e0       	ldi	r24, 0x01	; 1
    6926:	90 e0       	ldi	r25, 0x00	; 0
    6928:	9a a3       	std	Y+34, r25	; 0x22
    692a:	89 a3       	std	Y+33, r24	; 0x21
    692c:	3f c0       	rjmp	.+126    	; 0x69ac <LCD_enuInit+0x850>
	else if (__tmp > 65535)
    692e:	6b a1       	ldd	r22, Y+35	; 0x23
    6930:	7c a1       	ldd	r23, Y+36	; 0x24
    6932:	8d a1       	ldd	r24, Y+37	; 0x25
    6934:	9e a1       	ldd	r25, Y+38	; 0x26
    6936:	20 e0       	ldi	r18, 0x00	; 0
    6938:	3f ef       	ldi	r19, 0xFF	; 255
    693a:	4f e7       	ldi	r20, 0x7F	; 127
    693c:	57 e4       	ldi	r21, 0x47	; 71
    693e:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    6942:	18 16       	cp	r1, r24
    6944:	4c f5       	brge	.+82     	; 0x6998 <LCD_enuInit+0x83c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6946:	6f a1       	ldd	r22, Y+39	; 0x27
    6948:	78 a5       	ldd	r23, Y+40	; 0x28
    694a:	89 a5       	ldd	r24, Y+41	; 0x29
    694c:	9a a5       	ldd	r25, Y+42	; 0x2a
    694e:	20 e0       	ldi	r18, 0x00	; 0
    6950:	30 e0       	ldi	r19, 0x00	; 0
    6952:	40 e2       	ldi	r20, 0x20	; 32
    6954:	51 e4       	ldi	r21, 0x41	; 65
    6956:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    695a:	dc 01       	movw	r26, r24
    695c:	cb 01       	movw	r24, r22
    695e:	bc 01       	movw	r22, r24
    6960:	cd 01       	movw	r24, r26
    6962:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    6966:	dc 01       	movw	r26, r24
    6968:	cb 01       	movw	r24, r22
    696a:	9a a3       	std	Y+34, r25	; 0x22
    696c:	89 a3       	std	Y+33, r24	; 0x21
    696e:	0f c0       	rjmp	.+30     	; 0x698e <LCD_enuInit+0x832>
    6970:	89 e1       	ldi	r24, 0x19	; 25
    6972:	90 e0       	ldi	r25, 0x00	; 0
    6974:	98 a3       	std	Y+32, r25	; 0x20
    6976:	8f 8f       	std	Y+31, r24	; 0x1f
    6978:	8f 8d       	ldd	r24, Y+31	; 0x1f
    697a:	98 a1       	ldd	r25, Y+32	; 0x20
    697c:	01 97       	sbiw	r24, 0x01	; 1
    697e:	f1 f7       	brne	.-4      	; 0x697c <LCD_enuInit+0x820>
    6980:	98 a3       	std	Y+32, r25	; 0x20
    6982:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6984:	89 a1       	ldd	r24, Y+33	; 0x21
    6986:	9a a1       	ldd	r25, Y+34	; 0x22
    6988:	01 97       	sbiw	r24, 0x01	; 1
    698a:	9a a3       	std	Y+34, r25	; 0x22
    698c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    698e:	89 a1       	ldd	r24, Y+33	; 0x21
    6990:	9a a1       	ldd	r25, Y+34	; 0x22
    6992:	00 97       	sbiw	r24, 0x00	; 0
    6994:	69 f7       	brne	.-38     	; 0x6970 <LCD_enuInit+0x814>
    6996:	14 c0       	rjmp	.+40     	; 0x69c0 <LCD_enuInit+0x864>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6998:	6b a1       	ldd	r22, Y+35	; 0x23
    699a:	7c a1       	ldd	r23, Y+36	; 0x24
    699c:	8d a1       	ldd	r24, Y+37	; 0x25
    699e:	9e a1       	ldd	r25, Y+38	; 0x26
    69a0:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    69a4:	dc 01       	movw	r26, r24
    69a6:	cb 01       	movw	r24, r22
    69a8:	9a a3       	std	Y+34, r25	; 0x22
    69aa:	89 a3       	std	Y+33, r24	; 0x21
    69ac:	89 a1       	ldd	r24, Y+33	; 0x21
    69ae:	9a a1       	ldd	r25, Y+34	; 0x22
    69b0:	9e 8f       	std	Y+30, r25	; 0x1e
    69b2:	8d 8f       	std	Y+29, r24	; 0x1d
    69b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    69b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    69b8:	01 97       	sbiw	r24, 0x01	; 1
    69ba:	f1 f7       	brne	.-4      	; 0x69b8 <LCD_enuInit+0x85c>
    69bc:	9e 8f       	std	Y+30, r25	; 0x1e
    69be:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);

		//Display ON
		Local_u64Check |= ((u64)LCD_inenuSendCommand(0x0f) << 36); //cursor appear, blink, LCD ON
    69c0:	8f e0       	ldi	r24, 0x0F	; 15
    69c2:	0e 94 8e 3b 	call	0x771c	; 0x771c <LCD_inenuSendCommand>
    69c6:	a8 2e       	mov	r10, r24
    69c8:	bb 24       	eor	r11, r11
    69ca:	cc 24       	eor	r12, r12
    69cc:	dd 24       	eor	r13, r13
    69ce:	ee 24       	eor	r14, r14
    69d0:	ff 24       	eor	r15, r15
    69d2:	87 01       	movw	r16, r14
    69d4:	2a 2d       	mov	r18, r10
    69d6:	3b 2d       	mov	r19, r11
    69d8:	4c 2d       	mov	r20, r12
    69da:	5d 2d       	mov	r21, r13
    69dc:	6e 2d       	mov	r22, r14
    69de:	7f 2d       	mov	r23, r15
    69e0:	80 2f       	mov	r24, r16
    69e2:	91 2f       	mov	r25, r17
    69e4:	04 e2       	ldi	r16, 0x24	; 36
    69e6:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    69ea:	a2 2e       	mov	r10, r18
    69ec:	b3 2e       	mov	r11, r19
    69ee:	c4 2e       	mov	r12, r20
    69f0:	d5 2e       	mov	r13, r21
    69f2:	e6 2e       	mov	r14, r22
    69f4:	f7 2e       	mov	r15, r23
    69f6:	08 2f       	mov	r16, r24
    69f8:	19 2f       	mov	r17, r25
    69fa:	2a 2d       	mov	r18, r10
    69fc:	3b 2d       	mov	r19, r11
    69fe:	4c 2d       	mov	r20, r12
    6a00:	5d 2d       	mov	r21, r13
    6a02:	6e 2d       	mov	r22, r14
    6a04:	7f 2d       	mov	r23, r15
    6a06:	80 2f       	mov	r24, r16
    6a08:	91 2f       	mov	r25, r17
    6a0a:	e9 ad       	ldd	r30, Y+57	; 0x39
    6a0c:	e2 2b       	or	r30, r18
    6a0e:	e9 af       	std	Y+57, r30	; 0x39
    6a10:	ea ad       	ldd	r30, Y+58	; 0x3a
    6a12:	e3 2b       	or	r30, r19
    6a14:	ea af       	std	Y+58, r30	; 0x3a
    6a16:	eb ad       	ldd	r30, Y+59	; 0x3b
    6a18:	e4 2b       	or	r30, r20
    6a1a:	eb af       	std	Y+59, r30	; 0x3b
    6a1c:	ec ad       	ldd	r30, Y+60	; 0x3c
    6a1e:	e5 2b       	or	r30, r21
    6a20:	ec af       	std	Y+60, r30	; 0x3c
    6a22:	ed ad       	ldd	r30, Y+61	; 0x3d
    6a24:	e6 2b       	or	r30, r22
    6a26:	ed af       	std	Y+61, r30	; 0x3d
    6a28:	ee ad       	ldd	r30, Y+62	; 0x3e
    6a2a:	e7 2b       	or	r30, r23
    6a2c:	ee af       	std	Y+62, r30	; 0x3e
    6a2e:	ef ad       	ldd	r30, Y+63	; 0x3f
    6a30:	e8 2b       	or	r30, r24
    6a32:	ef af       	std	Y+63, r30	; 0x3f
    6a34:	fe 01       	movw	r30, r28
    6a36:	e0 5c       	subi	r30, 0xC0	; 192
    6a38:	ff 4f       	sbci	r31, 0xFF	; 255
    6a3a:	e0 81       	ld	r30, Z
    6a3c:	8e 2f       	mov	r24, r30
    6a3e:	89 2b       	or	r24, r25
    6a40:	fe 01       	movw	r30, r28
    6a42:	e0 5c       	subi	r30, 0xC0	; 192
    6a44:	ff 4f       	sbci	r31, 0xFF	; 255
    6a46:	80 83       	st	Z, r24
    6a48:	80 e0       	ldi	r24, 0x00	; 0
    6a4a:	90 e0       	ldi	r25, 0x00	; 0
    6a4c:	a0 e8       	ldi	r26, 0x80	; 128
    6a4e:	bf e3       	ldi	r27, 0x3F	; 63
    6a50:	89 8f       	std	Y+25, r24	; 0x19
    6a52:	9a 8f       	std	Y+26, r25	; 0x1a
    6a54:	ab 8f       	std	Y+27, r26	; 0x1b
    6a56:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6a58:	69 8d       	ldd	r22, Y+25	; 0x19
    6a5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6a5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6a5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6a60:	20 e0       	ldi	r18, 0x00	; 0
    6a62:	30 e0       	ldi	r19, 0x00	; 0
    6a64:	4a e7       	ldi	r20, 0x7A	; 122
    6a66:	53 e4       	ldi	r21, 0x43	; 67
    6a68:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    6a6c:	dc 01       	movw	r26, r24
    6a6e:	cb 01       	movw	r24, r22
    6a70:	8d 8b       	std	Y+21, r24	; 0x15
    6a72:	9e 8b       	std	Y+22, r25	; 0x16
    6a74:	af 8b       	std	Y+23, r26	; 0x17
    6a76:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6a78:	6d 89       	ldd	r22, Y+21	; 0x15
    6a7a:	7e 89       	ldd	r23, Y+22	; 0x16
    6a7c:	8f 89       	ldd	r24, Y+23	; 0x17
    6a7e:	98 8d       	ldd	r25, Y+24	; 0x18
    6a80:	20 e0       	ldi	r18, 0x00	; 0
    6a82:	30 e0       	ldi	r19, 0x00	; 0
    6a84:	40 e8       	ldi	r20, 0x80	; 128
    6a86:	5f e3       	ldi	r21, 0x3F	; 63
    6a88:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    6a8c:	88 23       	and	r24, r24
    6a8e:	2c f4       	brge	.+10     	; 0x6a9a <LCD_enuInit+0x93e>
		__ticks = 1;
    6a90:	81 e0       	ldi	r24, 0x01	; 1
    6a92:	90 e0       	ldi	r25, 0x00	; 0
    6a94:	9c 8b       	std	Y+20, r25	; 0x14
    6a96:	8b 8b       	std	Y+19, r24	; 0x13
    6a98:	3f c0       	rjmp	.+126    	; 0x6b18 <LCD_enuInit+0x9bc>
	else if (__tmp > 65535)
    6a9a:	6d 89       	ldd	r22, Y+21	; 0x15
    6a9c:	7e 89       	ldd	r23, Y+22	; 0x16
    6a9e:	8f 89       	ldd	r24, Y+23	; 0x17
    6aa0:	98 8d       	ldd	r25, Y+24	; 0x18
    6aa2:	20 e0       	ldi	r18, 0x00	; 0
    6aa4:	3f ef       	ldi	r19, 0xFF	; 255
    6aa6:	4f e7       	ldi	r20, 0x7F	; 127
    6aa8:	57 e4       	ldi	r21, 0x47	; 71
    6aaa:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    6aae:	18 16       	cp	r1, r24
    6ab0:	4c f5       	brge	.+82     	; 0x6b04 <LCD_enuInit+0x9a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6ab2:	69 8d       	ldd	r22, Y+25	; 0x19
    6ab4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6ab6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6ab8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6aba:	20 e0       	ldi	r18, 0x00	; 0
    6abc:	30 e0       	ldi	r19, 0x00	; 0
    6abe:	40 e2       	ldi	r20, 0x20	; 32
    6ac0:	51 e4       	ldi	r21, 0x41	; 65
    6ac2:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    6ac6:	dc 01       	movw	r26, r24
    6ac8:	cb 01       	movw	r24, r22
    6aca:	bc 01       	movw	r22, r24
    6acc:	cd 01       	movw	r24, r26
    6ace:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    6ad2:	dc 01       	movw	r26, r24
    6ad4:	cb 01       	movw	r24, r22
    6ad6:	9c 8b       	std	Y+20, r25	; 0x14
    6ad8:	8b 8b       	std	Y+19, r24	; 0x13
    6ada:	0f c0       	rjmp	.+30     	; 0x6afa <LCD_enuInit+0x99e>
    6adc:	89 e1       	ldi	r24, 0x19	; 25
    6ade:	90 e0       	ldi	r25, 0x00	; 0
    6ae0:	9a 8b       	std	Y+18, r25	; 0x12
    6ae2:	89 8b       	std	Y+17, r24	; 0x11
    6ae4:	89 89       	ldd	r24, Y+17	; 0x11
    6ae6:	9a 89       	ldd	r25, Y+18	; 0x12
    6ae8:	01 97       	sbiw	r24, 0x01	; 1
    6aea:	f1 f7       	brne	.-4      	; 0x6ae8 <LCD_enuInit+0x98c>
    6aec:	9a 8b       	std	Y+18, r25	; 0x12
    6aee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6af0:	8b 89       	ldd	r24, Y+19	; 0x13
    6af2:	9c 89       	ldd	r25, Y+20	; 0x14
    6af4:	01 97       	sbiw	r24, 0x01	; 1
    6af6:	9c 8b       	std	Y+20, r25	; 0x14
    6af8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6afa:	8b 89       	ldd	r24, Y+19	; 0x13
    6afc:	9c 89       	ldd	r25, Y+20	; 0x14
    6afe:	00 97       	sbiw	r24, 0x00	; 0
    6b00:	69 f7       	brne	.-38     	; 0x6adc <LCD_enuInit+0x980>
    6b02:	14 c0       	rjmp	.+40     	; 0x6b2c <LCD_enuInit+0x9d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6b04:	6d 89       	ldd	r22, Y+21	; 0x15
    6b06:	7e 89       	ldd	r23, Y+22	; 0x16
    6b08:	8f 89       	ldd	r24, Y+23	; 0x17
    6b0a:	98 8d       	ldd	r25, Y+24	; 0x18
    6b0c:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    6b10:	dc 01       	movw	r26, r24
    6b12:	cb 01       	movw	r24, r22
    6b14:	9c 8b       	std	Y+20, r25	; 0x14
    6b16:	8b 8b       	std	Y+19, r24	; 0x13
    6b18:	8b 89       	ldd	r24, Y+19	; 0x13
    6b1a:	9c 89       	ldd	r25, Y+20	; 0x14
    6b1c:	98 8b       	std	Y+16, r25	; 0x10
    6b1e:	8f 87       	std	Y+15, r24	; 0x0f
    6b20:	8f 85       	ldd	r24, Y+15	; 0x0f
    6b22:	98 89       	ldd	r25, Y+16	; 0x10
    6b24:	01 97       	sbiw	r24, 0x01	; 1
    6b26:	f1 f7       	brne	.-4      	; 0x6b24 <LCD_enuInit+0x9c8>
    6b28:	98 8b       	std	Y+16, r25	; 0x10
    6b2a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);

		//Display clear
		Local_u64Check |= ((u64)LCD_inenuSendCommand(0x01) << 39);
    6b2c:	81 e0       	ldi	r24, 0x01	; 1
    6b2e:	0e 94 8e 3b 	call	0x771c	; 0x771c <LCD_inenuSendCommand>
    6b32:	a8 2e       	mov	r10, r24
    6b34:	bb 24       	eor	r11, r11
    6b36:	cc 24       	eor	r12, r12
    6b38:	dd 24       	eor	r13, r13
    6b3a:	ee 24       	eor	r14, r14
    6b3c:	ff 24       	eor	r15, r15
    6b3e:	87 01       	movw	r16, r14
    6b40:	2a 2d       	mov	r18, r10
    6b42:	3b 2d       	mov	r19, r11
    6b44:	4c 2d       	mov	r20, r12
    6b46:	5d 2d       	mov	r21, r13
    6b48:	6e 2d       	mov	r22, r14
    6b4a:	7f 2d       	mov	r23, r15
    6b4c:	80 2f       	mov	r24, r16
    6b4e:	91 2f       	mov	r25, r17
    6b50:	07 e2       	ldi	r16, 0x27	; 39
    6b52:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    6b56:	a2 2e       	mov	r10, r18
    6b58:	b3 2e       	mov	r11, r19
    6b5a:	c4 2e       	mov	r12, r20
    6b5c:	d5 2e       	mov	r13, r21
    6b5e:	e6 2e       	mov	r14, r22
    6b60:	f7 2e       	mov	r15, r23
    6b62:	08 2f       	mov	r16, r24
    6b64:	19 2f       	mov	r17, r25
    6b66:	2a 2d       	mov	r18, r10
    6b68:	3b 2d       	mov	r19, r11
    6b6a:	4c 2d       	mov	r20, r12
    6b6c:	5d 2d       	mov	r21, r13
    6b6e:	6e 2d       	mov	r22, r14
    6b70:	7f 2d       	mov	r23, r15
    6b72:	80 2f       	mov	r24, r16
    6b74:	91 2f       	mov	r25, r17
    6b76:	e9 ad       	ldd	r30, Y+57	; 0x39
    6b78:	e2 2b       	or	r30, r18
    6b7a:	e9 af       	std	Y+57, r30	; 0x39
    6b7c:	ea ad       	ldd	r30, Y+58	; 0x3a
    6b7e:	e3 2b       	or	r30, r19
    6b80:	ea af       	std	Y+58, r30	; 0x3a
    6b82:	eb ad       	ldd	r30, Y+59	; 0x3b
    6b84:	e4 2b       	or	r30, r20
    6b86:	eb af       	std	Y+59, r30	; 0x3b
    6b88:	ec ad       	ldd	r30, Y+60	; 0x3c
    6b8a:	e5 2b       	or	r30, r21
    6b8c:	ec af       	std	Y+60, r30	; 0x3c
    6b8e:	ed ad       	ldd	r30, Y+61	; 0x3d
    6b90:	e6 2b       	or	r30, r22
    6b92:	ed af       	std	Y+61, r30	; 0x3d
    6b94:	ee ad       	ldd	r30, Y+62	; 0x3e
    6b96:	e7 2b       	or	r30, r23
    6b98:	ee af       	std	Y+62, r30	; 0x3e
    6b9a:	ef ad       	ldd	r30, Y+63	; 0x3f
    6b9c:	e8 2b       	or	r30, r24
    6b9e:	ef af       	std	Y+63, r30	; 0x3f
    6ba0:	fe 01       	movw	r30, r28
    6ba2:	e0 5c       	subi	r30, 0xC0	; 192
    6ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    6ba6:	e0 81       	ld	r30, Z
    6ba8:	8e 2f       	mov	r24, r30
    6baa:	89 2b       	or	r24, r25
    6bac:	fe 01       	movw	r30, r28
    6bae:	e0 5c       	subi	r30, 0xC0	; 192
    6bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    6bb2:	80 83       	st	Z, r24
    6bb4:	80 e0       	ldi	r24, 0x00	; 0
    6bb6:	90 e0       	ldi	r25, 0x00	; 0
    6bb8:	a0 e0       	ldi	r26, 0x00	; 0
    6bba:	b0 e4       	ldi	r27, 0x40	; 64
    6bbc:	8b 87       	std	Y+11, r24	; 0x0b
    6bbe:	9c 87       	std	Y+12, r25	; 0x0c
    6bc0:	ad 87       	std	Y+13, r26	; 0x0d
    6bc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6bc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    6bc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    6bc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    6bca:	9e 85       	ldd	r25, Y+14	; 0x0e
    6bcc:	20 e0       	ldi	r18, 0x00	; 0
    6bce:	30 e0       	ldi	r19, 0x00	; 0
    6bd0:	4a e7       	ldi	r20, 0x7A	; 122
    6bd2:	53 e4       	ldi	r21, 0x43	; 67
    6bd4:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    6bd8:	dc 01       	movw	r26, r24
    6bda:	cb 01       	movw	r24, r22
    6bdc:	8f 83       	std	Y+7, r24	; 0x07
    6bde:	98 87       	std	Y+8, r25	; 0x08
    6be0:	a9 87       	std	Y+9, r26	; 0x09
    6be2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6be4:	6f 81       	ldd	r22, Y+7	; 0x07
    6be6:	78 85       	ldd	r23, Y+8	; 0x08
    6be8:	89 85       	ldd	r24, Y+9	; 0x09
    6bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    6bec:	20 e0       	ldi	r18, 0x00	; 0
    6bee:	30 e0       	ldi	r19, 0x00	; 0
    6bf0:	40 e8       	ldi	r20, 0x80	; 128
    6bf2:	5f e3       	ldi	r21, 0x3F	; 63
    6bf4:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    6bf8:	88 23       	and	r24, r24
    6bfa:	2c f4       	brge	.+10     	; 0x6c06 <LCD_enuInit+0xaaa>
		__ticks = 1;
    6bfc:	81 e0       	ldi	r24, 0x01	; 1
    6bfe:	90 e0       	ldi	r25, 0x00	; 0
    6c00:	9e 83       	std	Y+6, r25	; 0x06
    6c02:	8d 83       	std	Y+5, r24	; 0x05
    6c04:	3f c0       	rjmp	.+126    	; 0x6c84 <LCD_enuInit+0xb28>
	else if (__tmp > 65535)
    6c06:	6f 81       	ldd	r22, Y+7	; 0x07
    6c08:	78 85       	ldd	r23, Y+8	; 0x08
    6c0a:	89 85       	ldd	r24, Y+9	; 0x09
    6c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c0e:	20 e0       	ldi	r18, 0x00	; 0
    6c10:	3f ef       	ldi	r19, 0xFF	; 255
    6c12:	4f e7       	ldi	r20, 0x7F	; 127
    6c14:	57 e4       	ldi	r21, 0x47	; 71
    6c16:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    6c1a:	18 16       	cp	r1, r24
    6c1c:	4c f5       	brge	.+82     	; 0x6c70 <LCD_enuInit+0xb14>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6c1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6c20:	7c 85       	ldd	r23, Y+12	; 0x0c
    6c22:	8d 85       	ldd	r24, Y+13	; 0x0d
    6c24:	9e 85       	ldd	r25, Y+14	; 0x0e
    6c26:	20 e0       	ldi	r18, 0x00	; 0
    6c28:	30 e0       	ldi	r19, 0x00	; 0
    6c2a:	40 e2       	ldi	r20, 0x20	; 32
    6c2c:	51 e4       	ldi	r21, 0x41	; 65
    6c2e:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    6c32:	dc 01       	movw	r26, r24
    6c34:	cb 01       	movw	r24, r22
    6c36:	bc 01       	movw	r22, r24
    6c38:	cd 01       	movw	r24, r26
    6c3a:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    6c3e:	dc 01       	movw	r26, r24
    6c40:	cb 01       	movw	r24, r22
    6c42:	9e 83       	std	Y+6, r25	; 0x06
    6c44:	8d 83       	std	Y+5, r24	; 0x05
    6c46:	0f c0       	rjmp	.+30     	; 0x6c66 <LCD_enuInit+0xb0a>
    6c48:	89 e1       	ldi	r24, 0x19	; 25
    6c4a:	90 e0       	ldi	r25, 0x00	; 0
    6c4c:	9c 83       	std	Y+4, r25	; 0x04
    6c4e:	8b 83       	std	Y+3, r24	; 0x03
    6c50:	8b 81       	ldd	r24, Y+3	; 0x03
    6c52:	9c 81       	ldd	r25, Y+4	; 0x04
    6c54:	01 97       	sbiw	r24, 0x01	; 1
    6c56:	f1 f7       	brne	.-4      	; 0x6c54 <LCD_enuInit+0xaf8>
    6c58:	9c 83       	std	Y+4, r25	; 0x04
    6c5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    6c5e:	9e 81       	ldd	r25, Y+6	; 0x06
    6c60:	01 97       	sbiw	r24, 0x01	; 1
    6c62:	9e 83       	std	Y+6, r25	; 0x06
    6c64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6c66:	8d 81       	ldd	r24, Y+5	; 0x05
    6c68:	9e 81       	ldd	r25, Y+6	; 0x06
    6c6a:	00 97       	sbiw	r24, 0x00	; 0
    6c6c:	69 f7       	brne	.-38     	; 0x6c48 <LCD_enuInit+0xaec>
    6c6e:	14 c0       	rjmp	.+40     	; 0x6c98 <LCD_enuInit+0xb3c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6c70:	6f 81       	ldd	r22, Y+7	; 0x07
    6c72:	78 85       	ldd	r23, Y+8	; 0x08
    6c74:	89 85       	ldd	r24, Y+9	; 0x09
    6c76:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c78:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    6c7c:	dc 01       	movw	r26, r24
    6c7e:	cb 01       	movw	r24, r22
    6c80:	9e 83       	std	Y+6, r25	; 0x06
    6c82:	8d 83       	std	Y+5, r24	; 0x05
    6c84:	8d 81       	ldd	r24, Y+5	; 0x05
    6c86:	9e 81       	ldd	r25, Y+6	; 0x06
    6c88:	9a 83       	std	Y+2, r25	; 0x02
    6c8a:	89 83       	std	Y+1, r24	; 0x01
    6c8c:	89 81       	ldd	r24, Y+1	; 0x01
    6c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    6c90:	01 97       	sbiw	r24, 0x01	; 1
    6c92:	f1 f7       	brne	.-4      	; 0x6c90 <LCD_enuInit+0xb34>
    6c94:	9a 83       	std	Y+2, r25	; 0x02
    6c96:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);

		//Set Entry mode
		Local_u64Check |= ((u64)LCD_inenuSendCommand(0x06) << 42); // shift disabled , DDRAM address increase
    6c98:	86 e0       	ldi	r24, 0x06	; 6
    6c9a:	0e 94 8e 3b 	call	0x771c	; 0x771c <LCD_inenuSendCommand>
    6c9e:	a8 2e       	mov	r10, r24
    6ca0:	bb 24       	eor	r11, r11
    6ca2:	cc 24       	eor	r12, r12
    6ca4:	dd 24       	eor	r13, r13
    6ca6:	ee 24       	eor	r14, r14
    6ca8:	ff 24       	eor	r15, r15
    6caa:	87 01       	movw	r16, r14
    6cac:	2a 2d       	mov	r18, r10
    6cae:	3b 2d       	mov	r19, r11
    6cb0:	4c 2d       	mov	r20, r12
    6cb2:	5d 2d       	mov	r21, r13
    6cb4:	6e 2d       	mov	r22, r14
    6cb6:	7f 2d       	mov	r23, r15
    6cb8:	80 2f       	mov	r24, r16
    6cba:	91 2f       	mov	r25, r17
    6cbc:	0a e2       	ldi	r16, 0x2A	; 42
    6cbe:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    6cc2:	a2 2e       	mov	r10, r18
    6cc4:	b3 2e       	mov	r11, r19
    6cc6:	c4 2e       	mov	r12, r20
    6cc8:	d5 2e       	mov	r13, r21
    6cca:	e6 2e       	mov	r14, r22
    6ccc:	f7 2e       	mov	r15, r23
    6cce:	08 2f       	mov	r16, r24
    6cd0:	19 2f       	mov	r17, r25
    6cd2:	2a 2d       	mov	r18, r10
    6cd4:	3b 2d       	mov	r19, r11
    6cd6:	4c 2d       	mov	r20, r12
    6cd8:	5d 2d       	mov	r21, r13
    6cda:	6e 2d       	mov	r22, r14
    6cdc:	7f 2d       	mov	r23, r15
    6cde:	80 2f       	mov	r24, r16
    6ce0:	91 2f       	mov	r25, r17
    6ce2:	e9 ad       	ldd	r30, Y+57	; 0x39
    6ce4:	e2 2b       	or	r30, r18
    6ce6:	e9 af       	std	Y+57, r30	; 0x39
    6ce8:	ea ad       	ldd	r30, Y+58	; 0x3a
    6cea:	e3 2b       	or	r30, r19
    6cec:	ea af       	std	Y+58, r30	; 0x3a
    6cee:	eb ad       	ldd	r30, Y+59	; 0x3b
    6cf0:	e4 2b       	or	r30, r20
    6cf2:	eb af       	std	Y+59, r30	; 0x3b
    6cf4:	ec ad       	ldd	r30, Y+60	; 0x3c
    6cf6:	e5 2b       	or	r30, r21
    6cf8:	ec af       	std	Y+60, r30	; 0x3c
    6cfa:	ed ad       	ldd	r30, Y+61	; 0x3d
    6cfc:	e6 2b       	or	r30, r22
    6cfe:	ed af       	std	Y+61, r30	; 0x3d
    6d00:	ee ad       	ldd	r30, Y+62	; 0x3e
    6d02:	e7 2b       	or	r30, r23
    6d04:	ee af       	std	Y+62, r30	; 0x3e
    6d06:	ef ad       	ldd	r30, Y+63	; 0x3f
    6d08:	e8 2b       	or	r30, r24
    6d0a:	ef af       	std	Y+63, r30	; 0x3f
    6d0c:	fe 01       	movw	r30, r28
    6d0e:	e0 5c       	subi	r30, 0xC0	; 192
    6d10:	ff 4f       	sbci	r31, 0xFF	; 255
    6d12:	e0 81       	ld	r30, Z
    6d14:	8e 2f       	mov	r24, r30
    6d16:	89 2b       	or	r24, r25
    6d18:	fe 01       	movw	r30, r28
    6d1a:	e0 5c       	subi	r30, 0xC0	; 192
    6d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    6d1e:	80 83       	st	Z, r24

		for(Local_u8Iterator = 0; Local_u8Iterator < 45; Local_u8Iterator+=3)
    6d20:	10 92 80 02 	sts	0x0280, r1
    6d24:	7f c0       	rjmp	.+254    	; 0x6e24 <LCD_enuInit+0xcc8>
		{
			if(((Local_u64Check >> Local_u8Iterator) & (0b111)) != ES_OK)
    6d26:	80 91 80 02 	lds	r24, 0x0280
    6d2a:	a8 2f       	mov	r26, r24
    6d2c:	b0 e0       	ldi	r27, 0x00	; 0
    6d2e:	29 ad       	ldd	r18, Y+57	; 0x39
    6d30:	3a ad       	ldd	r19, Y+58	; 0x3a
    6d32:	4b ad       	ldd	r20, Y+59	; 0x3b
    6d34:	5c ad       	ldd	r21, Y+60	; 0x3c
    6d36:	6d ad       	ldd	r22, Y+61	; 0x3d
    6d38:	7e ad       	ldd	r23, Y+62	; 0x3e
    6d3a:	8f ad       	ldd	r24, Y+63	; 0x3f
    6d3c:	2d 96       	adiw	r28, 0x0d	; 13
    6d3e:	df af       	std	Y+63, r29	; 0x3f
    6d40:	ce af       	std	Y+62, r28	; 0x3e
    6d42:	2d 97       	sbiw	r28, 0x0d	; 13
    6d44:	fe 01       	movw	r30, r28
    6d46:	e0 5c       	subi	r30, 0xC0	; 192
    6d48:	ff 4f       	sbci	r31, 0xFF	; 255
    6d4a:	90 81       	ld	r25, Z
    6d4c:	0a 2f       	mov	r16, r26
    6d4e:	0e 94 49 00 	call	0x92	; 0x92 <__lshrdi3>
    6d52:	a2 2e       	mov	r10, r18
    6d54:	b3 2e       	mov	r11, r19
    6d56:	c4 2e       	mov	r12, r20
    6d58:	d5 2e       	mov	r13, r21
    6d5a:	e6 2e       	mov	r14, r22
    6d5c:	f7 2e       	mov	r15, r23
    6d5e:	08 2f       	mov	r16, r24
    6d60:	19 2f       	mov	r17, r25
    6d62:	2a 2d       	mov	r18, r10
    6d64:	3b 2d       	mov	r19, r11
    6d66:	4c 2d       	mov	r20, r12
    6d68:	5d 2d       	mov	r21, r13
    6d6a:	6e 2d       	mov	r22, r14
    6d6c:	7f 2d       	mov	r23, r15
    6d6e:	80 2f       	mov	r24, r16
    6d70:	91 2f       	mov	r25, r17
    6d72:	e2 2f       	mov	r30, r18
    6d74:	e7 70       	andi	r30, 0x07	; 7
    6d76:	24 96       	adiw	r28, 0x04	; 4
    6d78:	ef af       	std	Y+63, r30	; 0x3f
    6d7a:	24 97       	sbiw	r28, 0x04	; 4
    6d7c:	e3 2f       	mov	r30, r19
    6d7e:	e0 70       	andi	r30, 0x00	; 0
    6d80:	25 96       	adiw	r28, 0x05	; 5
    6d82:	ef af       	std	Y+63, r30	; 0x3f
    6d84:	25 97       	sbiw	r28, 0x05	; 5
    6d86:	e4 2f       	mov	r30, r20
    6d88:	e0 70       	andi	r30, 0x00	; 0
    6d8a:	26 96       	adiw	r28, 0x06	; 6
    6d8c:	ef af       	std	Y+63, r30	; 0x3f
    6d8e:	26 97       	sbiw	r28, 0x06	; 6
    6d90:	e5 2f       	mov	r30, r21
    6d92:	e0 70       	andi	r30, 0x00	; 0
    6d94:	27 96       	adiw	r28, 0x07	; 7
    6d96:	ef af       	std	Y+63, r30	; 0x3f
    6d98:	27 97       	sbiw	r28, 0x07	; 7
    6d9a:	e6 2f       	mov	r30, r22
    6d9c:	e0 70       	andi	r30, 0x00	; 0
    6d9e:	28 96       	adiw	r28, 0x08	; 8
    6da0:	ef af       	std	Y+63, r30	; 0x3f
    6da2:	28 97       	sbiw	r28, 0x08	; 8
    6da4:	e7 2f       	mov	r30, r23
    6da6:	e0 70       	andi	r30, 0x00	; 0
    6da8:	29 96       	adiw	r28, 0x09	; 9
    6daa:	ef af       	std	Y+63, r30	; 0x3f
    6dac:	29 97       	sbiw	r28, 0x09	; 9
    6dae:	e8 2f       	mov	r30, r24
    6db0:	e0 70       	andi	r30, 0x00	; 0
    6db2:	2a 96       	adiw	r28, 0x0a	; 10
    6db4:	ef af       	std	Y+63, r30	; 0x3f
    6db6:	2a 97       	sbiw	r28, 0x0a	; 10
    6db8:	e9 2f       	mov	r30, r25
    6dba:	e0 70       	andi	r30, 0x00	; 0
    6dbc:	2b 96       	adiw	r28, 0x0b	; 11
    6dbe:	ef af       	std	Y+63, r30	; 0x3f
    6dc0:	2b 97       	sbiw	r28, 0x0b	; 11
    6dc2:	24 96       	adiw	r28, 0x04	; 4
    6dc4:	8f ad       	ldd	r24, Y+63	; 0x3f
    6dc6:	24 97       	sbiw	r28, 0x04	; 4
    6dc8:	81 30       	cpi	r24, 0x01	; 1
    6dca:	19 f5       	brne	.+70     	; 0x6e12 <LCD_enuInit+0xcb6>
    6dcc:	25 96       	adiw	r28, 0x05	; 5
    6dce:	ef ad       	ldd	r30, Y+63	; 0x3f
    6dd0:	25 97       	sbiw	r28, 0x05	; 5
    6dd2:	ee 23       	and	r30, r30
    6dd4:	f1 f4       	brne	.+60     	; 0x6e12 <LCD_enuInit+0xcb6>
    6dd6:	26 96       	adiw	r28, 0x06	; 6
    6dd8:	8f ad       	ldd	r24, Y+63	; 0x3f
    6dda:	26 97       	sbiw	r28, 0x06	; 6
    6ddc:	88 23       	and	r24, r24
    6dde:	c9 f4       	brne	.+50     	; 0x6e12 <LCD_enuInit+0xcb6>
    6de0:	27 96       	adiw	r28, 0x07	; 7
    6de2:	ef ad       	ldd	r30, Y+63	; 0x3f
    6de4:	27 97       	sbiw	r28, 0x07	; 7
    6de6:	ee 23       	and	r30, r30
    6de8:	a1 f4       	brne	.+40     	; 0x6e12 <LCD_enuInit+0xcb6>
    6dea:	28 96       	adiw	r28, 0x08	; 8
    6dec:	8f ad       	ldd	r24, Y+63	; 0x3f
    6dee:	28 97       	sbiw	r28, 0x08	; 8
    6df0:	88 23       	and	r24, r24
    6df2:	79 f4       	brne	.+30     	; 0x6e12 <LCD_enuInit+0xcb6>
    6df4:	29 96       	adiw	r28, 0x09	; 9
    6df6:	ef ad       	ldd	r30, Y+63	; 0x3f
    6df8:	29 97       	sbiw	r28, 0x09	; 9
    6dfa:	ee 23       	and	r30, r30
    6dfc:	51 f4       	brne	.+20     	; 0x6e12 <LCD_enuInit+0xcb6>
    6dfe:	2a 96       	adiw	r28, 0x0a	; 10
    6e00:	8f ad       	ldd	r24, Y+63	; 0x3f
    6e02:	2a 97       	sbiw	r28, 0x0a	; 10
    6e04:	88 23       	and	r24, r24
    6e06:	29 f4       	brne	.+10     	; 0x6e12 <LCD_enuInit+0xcb6>
    6e08:	2b 96       	adiw	r28, 0x0b	; 11
    6e0a:	ef ad       	ldd	r30, Y+63	; 0x3f
    6e0c:	2b 97       	sbiw	r28, 0x0b	; 11
    6e0e:	ee 23       	and	r30, r30
    6e10:	21 f0       	breq	.+8      	; 0x6e1a <LCD_enuInit+0xcbe>
			{
				return ES_NOK;
    6e12:	23 96       	adiw	r28, 0x03	; 3
    6e14:	1f ae       	std	Y+63, r1	; 0x3f
    6e16:	23 97       	sbiw	r28, 0x03	; 3
    6e18:	16 c0       	rjmp	.+44     	; 0x6e46 <LCD_enuInit+0xcea>
		_delay_ms(2);

		//Set Entry mode
		Local_u64Check |= ((u64)LCD_inenuSendCommand(0x06) << 42); // shift disabled , DDRAM address increase

		for(Local_u8Iterator = 0; Local_u8Iterator < 45; Local_u8Iterator+=3)
    6e1a:	80 91 80 02 	lds	r24, 0x0280
    6e1e:	8d 5f       	subi	r24, 0xFD	; 253
    6e20:	80 93 80 02 	sts	0x0280, r24
    6e24:	80 91 80 02 	lds	r24, 0x0280
    6e28:	8d 32       	cpi	r24, 0x2D	; 45
    6e2a:	08 f4       	brcc	.+2      	; 0x6e2e <LCD_enuInit+0xcd2>
    6e2c:	7c cf       	rjmp	.-264    	; 0x6d26 <LCD_enuInit+0xbca>
			{
				return ES_NOK;
			}
		}

	Local_enuErrorState = ES_OK;
    6e2e:	fe 01       	movw	r30, r28
    6e30:	ef 5b       	subi	r30, 0xBF	; 191
    6e32:	ff 4f       	sbci	r31, 0xFF	; 255
    6e34:	81 e0       	ldi	r24, 0x01	; 1
    6e36:	80 83       	st	Z, r24
#else
#error "Unsupported mode"
#endif


	return Local_enuErrorState;
    6e38:	fe 01       	movw	r30, r28
    6e3a:	ef 5b       	subi	r30, 0xBF	; 191
    6e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    6e3e:	80 81       	ld	r24, Z
    6e40:	23 96       	adiw	r28, 0x03	; 3
    6e42:	8f af       	std	Y+63, r24	; 0x3f
    6e44:	23 97       	sbiw	r28, 0x03	; 3
    6e46:	23 96       	adiw	r28, 0x03	; 3
    6e48:	8f ad       	ldd	r24, Y+63	; 0x3f
    6e4a:	23 97       	sbiw	r28, 0x03	; 3
}
    6e4c:	c4 5b       	subi	r28, 0xB4	; 180
    6e4e:	df 4f       	sbci	r29, 0xFF	; 255
    6e50:	0f b6       	in	r0, 0x3f	; 63
    6e52:	f8 94       	cli
    6e54:	de bf       	out	0x3e, r29	; 62
    6e56:	0f be       	out	0x3f, r0	; 63
    6e58:	cd bf       	out	0x3d, r28	; 61
    6e5a:	cf 91       	pop	r28
    6e5c:	df 91       	pop	r29
    6e5e:	1f 91       	pop	r17
    6e60:	0f 91       	pop	r16
    6e62:	ff 90       	pop	r15
    6e64:	ef 90       	pop	r14
    6e66:	df 90       	pop	r13
    6e68:	cf 90       	pop	r12
    6e6a:	bf 90       	pop	r11
    6e6c:	af 90       	pop	r10
    6e6e:	08 95       	ret

00006e70 <LCD_enuSendChar>:


ES_t LCD_enuSendChar(u8 Copy_u8Data)
{
    6e70:	df 93       	push	r29
    6e72:	cf 93       	push	r28
    6e74:	00 d0       	rcall	.+0      	; 0x6e76 <LCD_enuSendChar+0x6>
    6e76:	cd b7       	in	r28, 0x3d	; 61
    6e78:	de b7       	in	r29, 0x3e	; 62
    6e7a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    6e7c:	19 82       	std	Y+1, r1	; 0x01

	// select instruction register

	if( DIO_enuSetPinVal( RS_PORT, RS_PIN, DIO_u8HIGH ) == ES_OK)
    6e7e:	80 e0       	ldi	r24, 0x00	; 0
    6e80:	60 e0       	ldi	r22, 0x00	; 0
    6e82:	41 e0       	ldi	r20, 0x01	; 1
    6e84:	0e 94 37 2c 	call	0x586e	; 0x586e <DIO_enuSetPinVal>
    6e88:	81 30       	cpi	r24, 0x01	; 1
    6e8a:	21 f4       	brne	.+8      	; 0x6e94 <LCD_enuSendChar+0x24>
	{
		Local_enuErrorState = LCD_inenuLatch(Copy_u8Data);
    6e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    6e8e:	0e 94 69 39 	call	0x72d2	; 0x72d2 <LCD_inenuLatch>
    6e92:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    6e94:	89 81       	ldd	r24, Y+1	; 0x01
}
    6e96:	0f 90       	pop	r0
    6e98:	0f 90       	pop	r0
    6e9a:	cf 91       	pop	r28
    6e9c:	df 91       	pop	r29
    6e9e:	08 95       	ret

00006ea0 <LCD_enuSendCommand>:


ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    6ea0:	df 93       	push	r29
    6ea2:	cf 93       	push	r28
    6ea4:	00 d0       	rcall	.+0      	; 0x6ea6 <LCD_enuSendCommand+0x6>
    6ea6:	cd b7       	in	r28, 0x3d	; 61
    6ea8:	de b7       	in	r29, 0x3e	; 62
    6eaa:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    6eac:	19 82       	std	Y+1, r1	; 0x01

	// select instruction register
	if( DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8LOW ) == ES_OK )
    6eae:	80 e0       	ldi	r24, 0x00	; 0
    6eb0:	60 e0       	ldi	r22, 0x00	; 0
    6eb2:	40 e0       	ldi	r20, 0x00	; 0
    6eb4:	0e 94 37 2c 	call	0x586e	; 0x586e <DIO_enuSetPinVal>
    6eb8:	81 30       	cpi	r24, 0x01	; 1
    6eba:	21 f4       	brne	.+8      	; 0x6ec4 <LCD_enuSendCommand+0x24>
	{
		Local_enuErrorState = LCD_inenuLatch(Copy_u8Command);
    6ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    6ebe:	0e 94 69 39 	call	0x72d2	; 0x72d2 <LCD_inenuLatch>
    6ec2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    6ec4:	89 81       	ldd	r24, Y+1	; 0x01

}
    6ec6:	0f 90       	pop	r0
    6ec8:	0f 90       	pop	r0
    6eca:	cf 91       	pop	r28
    6ecc:	df 91       	pop	r29
    6ece:	08 95       	ret

00006ed0 <LCD_enuClearDisplay>:

ES_t LCD_enuClearDisplay(void)
{
    6ed0:	df 93       	push	r29
    6ed2:	cf 93       	push	r28
    6ed4:	0f 92       	push	r0
    6ed6:	cd b7       	in	r28, 0x3d	; 61
    6ed8:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    6eda:	19 82       	std	Y+1, r1	; 0x01

	Local_enuErrorState = LCD_inenuSendCommand(0x01);
    6edc:	81 e0       	ldi	r24, 0x01	; 1
    6ede:	0e 94 8e 3b 	call	0x771c	; 0x771c <LCD_inenuSendCommand>
    6ee2:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    6ee4:	89 81       	ldd	r24, Y+1	; 0x01
}
    6ee6:	0f 90       	pop	r0
    6ee8:	cf 91       	pop	r28
    6eea:	df 91       	pop	r29
    6eec:	08 95       	ret

00006eee <LCD_enuDisplayString>:

ES_t LCD_enuDisplayString(u8* Copy_pu8String)
{
    6eee:	df 93       	push	r29
    6ef0:	cf 93       	push	r28
    6ef2:	00 d0       	rcall	.+0      	; 0x6ef4 <LCD_enuDisplayString+0x6>
    6ef4:	00 d0       	rcall	.+0      	; 0x6ef6 <LCD_enuDisplayString+0x8>
    6ef6:	cd b7       	in	r28, 0x3d	; 61
    6ef8:	de b7       	in	r29, 0x3e	; 62
    6efa:	9c 83       	std	Y+4, r25	; 0x04
    6efc:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    6efe:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_u8Iterator = 0;
    6f00:	19 82       	std	Y+1, r1	; 0x01
	if( DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8HIGH ) == ES_OK)
    6f02:	80 e0       	ldi	r24, 0x00	; 0
    6f04:	60 e0       	ldi	r22, 0x00	; 0
    6f06:	41 e0       	ldi	r20, 0x01	; 1
    6f08:	0e 94 37 2c 	call	0x586e	; 0x586e <DIO_enuSetPinVal>
    6f0c:	81 30       	cpi	r24, 0x01	; 1
    6f0e:	01 f5       	brne	.+64     	; 0x6f50 <LCD_enuDisplayString+0x62>
	{
		Local_enuErrorState = ES_OK;
    6f10:	81 e0       	ldi	r24, 0x01	; 1
    6f12:	8a 83       	std	Y+2, r24	; 0x02
    6f14:	0f c0       	rjmp	.+30     	; 0x6f34 <LCD_enuDisplayString+0x46>
		while( Copy_pu8String[Local_u8Iterator] && Local_enuErrorState == ES_OK )
		{
			Local_enuErrorState = LCD_inenuLatch(Copy_pu8String[Local_u8Iterator]);
    6f16:	89 81       	ldd	r24, Y+1	; 0x01
    6f18:	28 2f       	mov	r18, r24
    6f1a:	30 e0       	ldi	r19, 0x00	; 0
    6f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    6f1e:	9c 81       	ldd	r25, Y+4	; 0x04
    6f20:	fc 01       	movw	r30, r24
    6f22:	e2 0f       	add	r30, r18
    6f24:	f3 1f       	adc	r31, r19
    6f26:	80 81       	ld	r24, Z
    6f28:	0e 94 69 39 	call	0x72d2	; 0x72d2 <LCD_inenuLatch>
    6f2c:	8a 83       	std	Y+2, r24	; 0x02
			Local_u8Iterator++;
    6f2e:	89 81       	ldd	r24, Y+1	; 0x01
    6f30:	8f 5f       	subi	r24, 0xFF	; 255
    6f32:	89 83       	std	Y+1, r24	; 0x01

	u8 Local_u8Iterator = 0;
	if( DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8HIGH ) == ES_OK)
	{
		Local_enuErrorState = ES_OK;
		while( Copy_pu8String[Local_u8Iterator] && Local_enuErrorState == ES_OK )
    6f34:	89 81       	ldd	r24, Y+1	; 0x01
    6f36:	28 2f       	mov	r18, r24
    6f38:	30 e0       	ldi	r19, 0x00	; 0
    6f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    6f3c:	9c 81       	ldd	r25, Y+4	; 0x04
    6f3e:	fc 01       	movw	r30, r24
    6f40:	e2 0f       	add	r30, r18
    6f42:	f3 1f       	adc	r31, r19
    6f44:	80 81       	ld	r24, Z
    6f46:	88 23       	and	r24, r24
    6f48:	19 f0       	breq	.+6      	; 0x6f50 <LCD_enuDisplayString+0x62>
    6f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    6f4c:	81 30       	cpi	r24, 0x01	; 1
    6f4e:	19 f3       	breq	.-58     	; 0x6f16 <LCD_enuDisplayString+0x28>
			Local_enuErrorState = LCD_inenuLatch(Copy_pu8String[Local_u8Iterator]);
			Local_u8Iterator++;
		}
	}

	return Local_enuErrorState;
    6f50:	8a 81       	ldd	r24, Y+2	; 0x02
}
    6f52:	0f 90       	pop	r0
    6f54:	0f 90       	pop	r0
    6f56:	0f 90       	pop	r0
    6f58:	0f 90       	pop	r0
    6f5a:	cf 91       	pop	r28
    6f5c:	df 91       	pop	r29
    6f5e:	08 95       	ret

00006f60 <LCD_enuGoto>:
//}



ES_t LCD_enuGoto(u8 Copy_u8Line,u8 Copy_u8Block)
{
    6f60:	df 93       	push	r29
    6f62:	cf 93       	push	r28
    6f64:	00 d0       	rcall	.+0      	; 0x6f66 <LCD_enuGoto+0x6>
    6f66:	0f 92       	push	r0
    6f68:	cd b7       	in	r28, 0x3d	; 61
    6f6a:	de b7       	in	r29, 0x3e	; 62
    6f6c:	8a 83       	std	Y+2, r24	; 0x02
    6f6e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    6f70:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Line == 1)
    6f72:	8a 81       	ldd	r24, Y+2	; 0x02
    6f74:	81 30       	cpi	r24, 0x01	; 1
    6f76:	31 f4       	brne	.+12     	; 0x6f84 <LCD_enuGoto+0x24>
	{
		Local_enuErrorState = LCD_inenuSendCommand(0x80 + Copy_u8Block);
    6f78:	8b 81       	ldd	r24, Y+3	; 0x03
    6f7a:	80 58       	subi	r24, 0x80	; 128
    6f7c:	0e 94 8e 3b 	call	0x771c	; 0x771c <LCD_inenuSendCommand>
    6f80:	89 83       	std	Y+1, r24	; 0x01
    6f82:	05 c0       	rjmp	.+10     	; 0x6f8e <LCD_enuGoto+0x2e>
	}
	else
	{
		Local_enuErrorState = LCD_inenuSendCommand(0xc0 +Copy_u8Block);
    6f84:	8b 81       	ldd	r24, Y+3	; 0x03
    6f86:	80 54       	subi	r24, 0x40	; 64
    6f88:	0e 94 8e 3b 	call	0x771c	; 0x771c <LCD_inenuSendCommand>
    6f8c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    6f8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    6f90:	0f 90       	pop	r0
    6f92:	0f 90       	pop	r0
    6f94:	0f 90       	pop	r0
    6f96:	cf 91       	pop	r28
    6f98:	df 91       	pop	r29
    6f9a:	08 95       	ret

00006f9c <LCD_enuWriteNumber>:
//
//	return Local_enuErrorState;
//}

ES_t LCD_enuWriteNumber(f32 Copy_u8Num)
{
    6f9c:	0f 93       	push	r16
    6f9e:	1f 93       	push	r17
    6fa0:	df 93       	push	r29
    6fa2:	cf 93       	push	r28
    6fa4:	cd b7       	in	r28, 0x3d	; 61
    6fa6:	de b7       	in	r29, 0x3e	; 62
    6fa8:	2f 97       	sbiw	r28, 0x0f	; 15
    6faa:	0f b6       	in	r0, 0x3f	; 63
    6fac:	f8 94       	cli
    6fae:	de bf       	out	0x3e, r29	; 62
    6fb0:	0f be       	out	0x3f, r0	; 63
    6fb2:	cd bf       	out	0x3d, r28	; 61
    6fb4:	69 87       	std	Y+9, r22	; 0x09
    6fb6:	7a 87       	std	Y+10, r23	; 0x0a
    6fb8:	8b 87       	std	Y+11, r24	; 0x0b
    6fba:	9c 87       	std	Y+12, r25	; 0x0c
	ES_t Local_enuErrorState = ES_NOK;
    6fbc:	18 86       	std	Y+8, r1	; 0x08
	Local_enuErrorState = DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8HIGH );
    6fbe:	80 e0       	ldi	r24, 0x00	; 0
    6fc0:	60 e0       	ldi	r22, 0x00	; 0
    6fc2:	41 e0       	ldi	r20, 0x01	; 1
    6fc4:	0e 94 37 2c 	call	0x586e	; 0x586e <DIO_enuSetPinVal>
    6fc8:	88 87       	std	Y+8, r24	; 0x08

	if(Copy_u8Num == 0.0)
    6fca:	69 85       	ldd	r22, Y+9	; 0x09
    6fcc:	7a 85       	ldd	r23, Y+10	; 0x0a
    6fce:	8b 85       	ldd	r24, Y+11	; 0x0b
    6fd0:	9c 85       	ldd	r25, Y+12	; 0x0c
    6fd2:	20 e0       	ldi	r18, 0x00	; 0
    6fd4:	30 e0       	ldi	r19, 0x00	; 0
    6fd6:	40 e0       	ldi	r20, 0x00	; 0
    6fd8:	50 e0       	ldi	r21, 0x00	; 0
    6fda:	0e 94 c3 04 	call	0x986	; 0x986 <__eqsf2>
    6fde:	88 23       	and	r24, r24
    6fe0:	39 f4       	brne	.+14     	; 0x6ff0 <LCD_enuWriteNumber+0x54>
	{
		Local_enuErrorState = LCD_inenuLatch('0');
    6fe2:	80 e3       	ldi	r24, 0x30	; 48
    6fe4:	0e 94 69 39 	call	0x72d2	; 0x72d2 <LCD_inenuLatch>
    6fe8:	88 87       	std	Y+8, r24	; 0x08
		return Local_enuErrorState;
    6fea:	28 85       	ldd	r18, Y+8	; 0x08
    6fec:	2f 87       	std	Y+15, r18	; 0x0f
    6fee:	65 c1       	rjmp	.+714    	; 0x72ba <LCD_enuWriteNumber+0x31e>
	}

	static u8 Local_Au8Digits[16] = {'0'};
	s8 Local_u8Iterator = -1;
    6ff0:	8f ef       	ldi	r24, 0xFF	; 255
    6ff2:	8f 83       	std	Y+7, r24	; 0x07
	s32 Local_s32Number = Copy_u8Num;
    6ff4:	69 85       	ldd	r22, Y+9	; 0x09
    6ff6:	7a 85       	ldd	r23, Y+10	; 0x0a
    6ff8:	8b 85       	ldd	r24, Y+11	; 0x0b
    6ffa:	9c 85       	ldd	r25, Y+12	; 0x0c
    6ffc:	0e 94 11 06 	call	0xc22	; 0xc22 <__fixsfsi>
    7000:	dc 01       	movw	r26, r24
    7002:	cb 01       	movw	r24, r22
    7004:	8b 83       	std	Y+3, r24	; 0x03
    7006:	9c 83       	std	Y+4, r25	; 0x04
    7008:	ad 83       	std	Y+5, r26	; 0x05
    700a:	be 83       	std	Y+6, r27	; 0x06
	if(Copy_u8Num < 0 )
    700c:	69 85       	ldd	r22, Y+9	; 0x09
    700e:	7a 85       	ldd	r23, Y+10	; 0x0a
    7010:	8b 85       	ldd	r24, Y+11	; 0x0b
    7012:	9c 85       	ldd	r25, Y+12	; 0x0c
    7014:	20 e0       	ldi	r18, 0x00	; 0
    7016:	30 e0       	ldi	r19, 0x00	; 0
    7018:	40 e0       	ldi	r20, 0x00	; 0
    701a:	50 e0       	ldi	r21, 0x00	; 0
    701c:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    7020:	88 23       	and	r24, r24
    7022:	94 f4       	brge	.+36     	; 0x7048 <LCD_enuWriteNumber+0xac>
	{
		LCD_enuSendChar('-');
    7024:	8d e2       	ldi	r24, 0x2D	; 45
    7026:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
		Local_s32Number *= -1;
    702a:	8b 81       	ldd	r24, Y+3	; 0x03
    702c:	9c 81       	ldd	r25, Y+4	; 0x04
    702e:	ad 81       	ldd	r26, Y+5	; 0x05
    7030:	be 81       	ldd	r27, Y+6	; 0x06
    7032:	b0 95       	com	r27
    7034:	a0 95       	com	r26
    7036:	90 95       	com	r25
    7038:	81 95       	neg	r24
    703a:	9f 4f       	sbci	r25, 0xFF	; 255
    703c:	af 4f       	sbci	r26, 0xFF	; 255
    703e:	bf 4f       	sbci	r27, 0xFF	; 255
    7040:	8b 83       	std	Y+3, r24	; 0x03
    7042:	9c 83       	std	Y+4, r25	; 0x04
    7044:	ad 83       	std	Y+5, r26	; 0x05
    7046:	be 83       	std	Y+6, r27	; 0x06
	}

	if((Copy_u8Num < 1.0 && Copy_u8Num > 0.0) || (Copy_u8Num > -1.0 && Copy_u8Num < 0.0)) LCD_enuSendChar('0');
    7048:	1e 86       	std	Y+14, r1	; 0x0e
    704a:	69 85       	ldd	r22, Y+9	; 0x09
    704c:	7a 85       	ldd	r23, Y+10	; 0x0a
    704e:	8b 85       	ldd	r24, Y+11	; 0x0b
    7050:	9c 85       	ldd	r25, Y+12	; 0x0c
    7052:	20 e0       	ldi	r18, 0x00	; 0
    7054:	30 e0       	ldi	r19, 0x00	; 0
    7056:	40 e8       	ldi	r20, 0x80	; 128
    7058:	5f e3       	ldi	r21, 0x3F	; 63
    705a:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    705e:	88 23       	and	r24, r24
    7060:	14 f4       	brge	.+4      	; 0x7066 <LCD_enuWriteNumber+0xca>
    7062:	81 e0       	ldi	r24, 0x01	; 1
    7064:	8e 87       	std	Y+14, r24	; 0x0e
    7066:	81 e0       	ldi	r24, 0x01	; 1
    7068:	9e 85       	ldd	r25, Y+14	; 0x0e
    706a:	89 27       	eor	r24, r25
    706c:	88 23       	and	r24, r24
    706e:	61 f4       	brne	.+24     	; 0x7088 <LCD_enuWriteNumber+0xec>
    7070:	69 85       	ldd	r22, Y+9	; 0x09
    7072:	7a 85       	ldd	r23, Y+10	; 0x0a
    7074:	8b 85       	ldd	r24, Y+11	; 0x0b
    7076:	9c 85       	ldd	r25, Y+12	; 0x0c
    7078:	20 e0       	ldi	r18, 0x00	; 0
    707a:	30 e0       	ldi	r19, 0x00	; 0
    707c:	40 e0       	ldi	r20, 0x00	; 0
    707e:	50 e0       	ldi	r21, 0x00	; 0
    7080:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    7084:	18 16       	cp	r1, r24
    7086:	04 f1       	brlt	.+64     	; 0x70c8 <LCD_enuWriteNumber+0x12c>
    7088:	1d 86       	std	Y+13, r1	; 0x0d
    708a:	69 85       	ldd	r22, Y+9	; 0x09
    708c:	7a 85       	ldd	r23, Y+10	; 0x0a
    708e:	8b 85       	ldd	r24, Y+11	; 0x0b
    7090:	9c 85       	ldd	r25, Y+12	; 0x0c
    7092:	20 e0       	ldi	r18, 0x00	; 0
    7094:	30 e0       	ldi	r19, 0x00	; 0
    7096:	40 e8       	ldi	r20, 0x80	; 128
    7098:	5f eb       	ldi	r21, 0xBF	; 191
    709a:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    709e:	18 16       	cp	r1, r24
    70a0:	14 f4       	brge	.+4      	; 0x70a6 <LCD_enuWriteNumber+0x10a>
    70a2:	21 e0       	ldi	r18, 0x01	; 1
    70a4:	2d 87       	std	Y+13, r18	; 0x0d
    70a6:	81 e0       	ldi	r24, 0x01	; 1
    70a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    70aa:	89 27       	eor	r24, r25
    70ac:	88 23       	and	r24, r24
    70ae:	e1 f5       	brne	.+120    	; 0x7128 <LCD_enuWriteNumber+0x18c>
    70b0:	69 85       	ldd	r22, Y+9	; 0x09
    70b2:	7a 85       	ldd	r23, Y+10	; 0x0a
    70b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    70b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    70b8:	20 e0       	ldi	r18, 0x00	; 0
    70ba:	30 e0       	ldi	r19, 0x00	; 0
    70bc:	40 e0       	ldi	r20, 0x00	; 0
    70be:	50 e0       	ldi	r21, 0x00	; 0
    70c0:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    70c4:	88 23       	and	r24, r24
    70c6:	84 f5       	brge	.+96     	; 0x7128 <LCD_enuWriteNumber+0x18c>
    70c8:	80 e3       	ldi	r24, 0x30	; 48
    70ca:	0e 94 38 37 	call	0x6e70	; 0x6e70 <LCD_enuSendChar>
    70ce:	2c c0       	rjmp	.+88     	; 0x7128 <LCD_enuWriteNumber+0x18c>

	while (Local_s32Number > 0 && Local_enuErrorState == ES_OK)
	{
		Local_u8Iterator++;
    70d0:	8f 81       	ldd	r24, Y+7	; 0x07
    70d2:	8f 5f       	subi	r24, 0xFF	; 255
    70d4:	8f 83       	std	Y+7, r24	; 0x07
		Local_Au8Digits[Local_u8Iterator] = Local_s32Number % 10;
    70d6:	8f 81       	ldd	r24, Y+7	; 0x07
    70d8:	08 2f       	mov	r16, r24
    70da:	11 27       	eor	r17, r17
    70dc:	07 fd       	sbrc	r16, 7
    70de:	10 95       	com	r17
    70e0:	8b 81       	ldd	r24, Y+3	; 0x03
    70e2:	9c 81       	ldd	r25, Y+4	; 0x04
    70e4:	ad 81       	ldd	r26, Y+5	; 0x05
    70e6:	be 81       	ldd	r27, Y+6	; 0x06
    70e8:	2a e0       	ldi	r18, 0x0A	; 10
    70ea:	30 e0       	ldi	r19, 0x00	; 0
    70ec:	40 e0       	ldi	r20, 0x00	; 0
    70ee:	50 e0       	ldi	r21, 0x00	; 0
    70f0:	bc 01       	movw	r22, r24
    70f2:	cd 01       	movw	r24, r26
    70f4:	0e 94 ba 3b 	call	0x7774	; 0x7774 <__divmodsi4>
    70f8:	dc 01       	movw	r26, r24
    70fa:	cb 01       	movw	r24, r22
    70fc:	f8 01       	movw	r30, r16
    70fe:	e1 5e       	subi	r30, 0xE1	; 225
    7100:	fd 4f       	sbci	r31, 0xFD	; 253
    7102:	80 83       	st	Z, r24
		Local_s32Number /= 10;
    7104:	8b 81       	ldd	r24, Y+3	; 0x03
    7106:	9c 81       	ldd	r25, Y+4	; 0x04
    7108:	ad 81       	ldd	r26, Y+5	; 0x05
    710a:	be 81       	ldd	r27, Y+6	; 0x06
    710c:	2a e0       	ldi	r18, 0x0A	; 10
    710e:	30 e0       	ldi	r19, 0x00	; 0
    7110:	40 e0       	ldi	r20, 0x00	; 0
    7112:	50 e0       	ldi	r21, 0x00	; 0
    7114:	bc 01       	movw	r22, r24
    7116:	cd 01       	movw	r24, r26
    7118:	0e 94 ba 3b 	call	0x7774	; 0x7774 <__divmodsi4>
    711c:	da 01       	movw	r26, r20
    711e:	c9 01       	movw	r24, r18
    7120:	8b 83       	std	Y+3, r24	; 0x03
    7122:	9c 83       	std	Y+4, r25	; 0x04
    7124:	ad 83       	std	Y+5, r26	; 0x05
    7126:	be 83       	std	Y+6, r27	; 0x06
		Local_s32Number *= -1;
	}

	if((Copy_u8Num < 1.0 && Copy_u8Num > 0.0) || (Copy_u8Num > -1.0 && Copy_u8Num < 0.0)) LCD_enuSendChar('0');

	while (Local_s32Number > 0 && Local_enuErrorState == ES_OK)
    7128:	8b 81       	ldd	r24, Y+3	; 0x03
    712a:	9c 81       	ldd	r25, Y+4	; 0x04
    712c:	ad 81       	ldd	r26, Y+5	; 0x05
    712e:	be 81       	ldd	r27, Y+6	; 0x06
    7130:	18 16       	cp	r1, r24
    7132:	19 06       	cpc	r1, r25
    7134:	1a 06       	cpc	r1, r26
    7136:	1b 06       	cpc	r1, r27
    7138:	9c f4       	brge	.+38     	; 0x7160 <LCD_enuWriteNumber+0x1c4>
    713a:	88 85       	ldd	r24, Y+8	; 0x08
    713c:	81 30       	cpi	r24, 0x01	; 1
    713e:	41 f2       	breq	.-112    	; 0x70d0 <LCD_enuWriteNumber+0x134>
    7140:	0f c0       	rjmp	.+30     	; 0x7160 <LCD_enuWriteNumber+0x1c4>
		Local_s32Number /= 10;
	}

	while( Local_u8Iterator >= 0 && Local_enuErrorState == ES_OK)
	{
		Local_enuErrorState = LCD_inenuLatch( Local_Au8Digits[Local_u8Iterator] + '0');
    7142:	8f 81       	ldd	r24, Y+7	; 0x07
    7144:	99 27       	eor	r25, r25
    7146:	87 fd       	sbrc	r24, 7
    7148:	90 95       	com	r25
    714a:	fc 01       	movw	r30, r24
    714c:	e1 5e       	subi	r30, 0xE1	; 225
    714e:	fd 4f       	sbci	r31, 0xFD	; 253
    7150:	80 81       	ld	r24, Z
    7152:	80 5d       	subi	r24, 0xD0	; 208
    7154:	0e 94 69 39 	call	0x72d2	; 0x72d2 <LCD_inenuLatch>
    7158:	88 87       	std	Y+8, r24	; 0x08
		Local_u8Iterator--;
    715a:	8f 81       	ldd	r24, Y+7	; 0x07
    715c:	81 50       	subi	r24, 0x01	; 1
    715e:	8f 83       	std	Y+7, r24	; 0x07
		Local_u8Iterator++;
		Local_Au8Digits[Local_u8Iterator] = Local_s32Number % 10;
		Local_s32Number /= 10;
	}

	while( Local_u8Iterator >= 0 && Local_enuErrorState == ES_OK)
    7160:	8f 81       	ldd	r24, Y+7	; 0x07
    7162:	88 23       	and	r24, r24
    7164:	1c f0       	brlt	.+6      	; 0x716c <LCD_enuWriteNumber+0x1d0>
    7166:	88 85       	ldd	r24, Y+8	; 0x08
    7168:	81 30       	cpi	r24, 0x01	; 1
    716a:	59 f3       	breq	.-42     	; 0x7142 <LCD_enuWriteNumber+0x1a6>
	{
		Local_enuErrorState = LCD_inenuLatch( Local_Au8Digits[Local_u8Iterator] + '0');
		Local_u8Iterator--;
	}

	Copy_u8Num = (Copy_u8Num - (s32)Copy_u8Num);
    716c:	69 85       	ldd	r22, Y+9	; 0x09
    716e:	7a 85       	ldd	r23, Y+10	; 0x0a
    7170:	8b 85       	ldd	r24, Y+11	; 0x0b
    7172:	9c 85       	ldd	r25, Y+12	; 0x0c
    7174:	0e 94 11 06 	call	0xc22	; 0xc22 <__fixsfsi>
    7178:	dc 01       	movw	r26, r24
    717a:	cb 01       	movw	r24, r22
    717c:	bc 01       	movw	r22, r24
    717e:	cd 01       	movw	r24, r26
    7180:	0e 94 b3 05 	call	0xb66	; 0xb66 <__floatsisf>
    7184:	9b 01       	movw	r18, r22
    7186:	ac 01       	movw	r20, r24
    7188:	69 85       	ldd	r22, Y+9	; 0x09
    718a:	7a 85       	ldd	r23, Y+10	; 0x0a
    718c:	8b 85       	ldd	r24, Y+11	; 0x0b
    718e:	9c 85       	ldd	r25, Y+12	; 0x0c
    7190:	0e 94 bf 02 	call	0x57e	; 0x57e <__subsf3>
    7194:	dc 01       	movw	r26, r24
    7196:	cb 01       	movw	r24, r22
    7198:	89 87       	std	Y+9, r24	; 0x09
    719a:	9a 87       	std	Y+10, r25	; 0x0a
    719c:	ab 87       	std	Y+11, r26	; 0x0b
    719e:	bc 87       	std	Y+12, r27	; 0x0c
	if(Copy_u8Num != 0.0)
    71a0:	69 85       	ldd	r22, Y+9	; 0x09
    71a2:	7a 85       	ldd	r23, Y+10	; 0x0a
    71a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    71a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    71a8:	20 e0       	ldi	r18, 0x00	; 0
    71aa:	30 e0       	ldi	r19, 0x00	; 0
    71ac:	40 e0       	ldi	r20, 0x00	; 0
    71ae:	50 e0       	ldi	r21, 0x00	; 0
    71b0:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__nesf2>
    71b4:	88 23       	and	r24, r24
    71b6:	09 f4       	brne	.+2      	; 0x71ba <LCD_enuWriteNumber+0x21e>
    71b8:	7e c0       	rjmp	.+252    	; 0x72b6 <LCD_enuWriteNumber+0x31a>
	{
		LCD_inenuLatch('.');
    71ba:	8e e2       	ldi	r24, 0x2E	; 46
    71bc:	0e 94 69 39 	call	0x72d2	; 0x72d2 <LCD_inenuLatch>
		if(Copy_u8Num < 0) Copy_u8Num *= -1;
    71c0:	69 85       	ldd	r22, Y+9	; 0x09
    71c2:	7a 85       	ldd	r23, Y+10	; 0x0a
    71c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    71c6:	9c 85       	ldd	r25, Y+12	; 0x0c
    71c8:	20 e0       	ldi	r18, 0x00	; 0
    71ca:	30 e0       	ldi	r19, 0x00	; 0
    71cc:	40 e0       	ldi	r20, 0x00	; 0
    71ce:	50 e0       	ldi	r21, 0x00	; 0
    71d0:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    71d4:	88 23       	and	r24, r24
    71d6:	4c f4       	brge	.+18     	; 0x71ea <LCD_enuWriteNumber+0x24e>
    71d8:	89 85       	ldd	r24, Y+9	; 0x09
    71da:	9a 85       	ldd	r25, Y+10	; 0x0a
    71dc:	ab 85       	ldd	r26, Y+11	; 0x0b
    71de:	bc 85       	ldd	r27, Y+12	; 0x0c
    71e0:	b0 58       	subi	r27, 0x80	; 128
    71e2:	89 87       	std	Y+9, r24	; 0x09
    71e4:	9a 87       	std	Y+10, r25	; 0x0a
    71e6:	ab 87       	std	Y+11, r26	; 0x0b
    71e8:	bc 87       	std	Y+12, r27	; 0x0c
		u16 base = 10;
    71ea:	8a e0       	ldi	r24, 0x0A	; 10
    71ec:	90 e0       	ldi	r25, 0x00	; 0
    71ee:	9a 83       	std	Y+2, r25	; 0x02
    71f0:	89 83       	std	Y+1, r24	; 0x01
    71f2:	44 c0       	rjmp	.+136    	; 0x727c <LCD_enuWriteNumber+0x2e0>
		while (base <= 10000)
		{
			Local_u8Iterator++;
    71f4:	8f 81       	ldd	r24, Y+7	; 0x07
    71f6:	8f 5f       	subi	r24, 0xFF	; 255
    71f8:	8f 83       	std	Y+7, r24	; 0x07
			Local_Au8Digits[3 - Local_u8Iterator] = ((s32)(Copy_u8Num*base))%10;
    71fa:	8f 81       	ldd	r24, Y+7	; 0x07
    71fc:	28 2f       	mov	r18, r24
    71fe:	33 27       	eor	r19, r19
    7200:	27 fd       	sbrc	r18, 7
    7202:	30 95       	com	r19
    7204:	83 e0       	ldi	r24, 0x03	; 3
    7206:	90 e0       	ldi	r25, 0x00	; 0
    7208:	8c 01       	movw	r16, r24
    720a:	02 1b       	sub	r16, r18
    720c:	13 0b       	sbc	r17, r19
    720e:	89 81       	ldd	r24, Y+1	; 0x01
    7210:	9a 81       	ldd	r25, Y+2	; 0x02
    7212:	cc 01       	movw	r24, r24
    7214:	a0 e0       	ldi	r26, 0x00	; 0
    7216:	b0 e0       	ldi	r27, 0x00	; 0
    7218:	bc 01       	movw	r22, r24
    721a:	cd 01       	movw	r24, r26
    721c:	0e 94 65 06 	call	0xcca	; 0xcca <__floatunsisf>
    7220:	dc 01       	movw	r26, r24
    7222:	cb 01       	movw	r24, r22
    7224:	bc 01       	movw	r22, r24
    7226:	cd 01       	movw	r24, r26
    7228:	29 85       	ldd	r18, Y+9	; 0x09
    722a:	3a 85       	ldd	r19, Y+10	; 0x0a
    722c:	4b 85       	ldd	r20, Y+11	; 0x0b
    722e:	5c 85       	ldd	r21, Y+12	; 0x0c
    7230:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    7234:	dc 01       	movw	r26, r24
    7236:	cb 01       	movw	r24, r22
    7238:	bc 01       	movw	r22, r24
    723a:	cd 01       	movw	r24, r26
    723c:	0e 94 11 06 	call	0xc22	; 0xc22 <__fixsfsi>
    7240:	dc 01       	movw	r26, r24
    7242:	cb 01       	movw	r24, r22
    7244:	2a e0       	ldi	r18, 0x0A	; 10
    7246:	30 e0       	ldi	r19, 0x00	; 0
    7248:	40 e0       	ldi	r20, 0x00	; 0
    724a:	50 e0       	ldi	r21, 0x00	; 0
    724c:	bc 01       	movw	r22, r24
    724e:	cd 01       	movw	r24, r26
    7250:	0e 94 ba 3b 	call	0x7774	; 0x7774 <__divmodsi4>
    7254:	dc 01       	movw	r26, r24
    7256:	cb 01       	movw	r24, r22
    7258:	f8 01       	movw	r30, r16
    725a:	e1 5e       	subi	r30, 0xE1	; 225
    725c:	fd 4f       	sbci	r31, 0xFD	; 253
    725e:	80 83       	st	Z, r24
			base *= 10;
    7260:	89 81       	ldd	r24, Y+1	; 0x01
    7262:	9a 81       	ldd	r25, Y+2	; 0x02
    7264:	9c 01       	movw	r18, r24
    7266:	22 0f       	add	r18, r18
    7268:	33 1f       	adc	r19, r19
    726a:	c9 01       	movw	r24, r18
    726c:	88 0f       	add	r24, r24
    726e:	99 1f       	adc	r25, r25
    7270:	88 0f       	add	r24, r24
    7272:	99 1f       	adc	r25, r25
    7274:	82 0f       	add	r24, r18
    7276:	93 1f       	adc	r25, r19
    7278:	9a 83       	std	Y+2, r25	; 0x02
    727a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Num != 0.0)
	{
		LCD_inenuLatch('.');
		if(Copy_u8Num < 0) Copy_u8Num *= -1;
		u16 base = 10;
		while (base <= 10000)
    727c:	89 81       	ldd	r24, Y+1	; 0x01
    727e:	9a 81       	ldd	r25, Y+2	; 0x02
    7280:	27 e2       	ldi	r18, 0x27	; 39
    7282:	81 31       	cpi	r24, 0x11	; 17
    7284:	92 07       	cpc	r25, r18
    7286:	08 f4       	brcc	.+2      	; 0x728a <LCD_enuWriteNumber+0x2ee>
    7288:	b5 cf       	rjmp	.-150    	; 0x71f4 <LCD_enuWriteNumber+0x258>
    728a:	0f c0       	rjmp	.+30     	; 0x72aa <LCD_enuWriteNumber+0x30e>
			base *= 10;
		}

		while( Local_u8Iterator >= 0 && Local_enuErrorState == ES_OK)
		{
			Local_enuErrorState = LCD_inenuLatch( Local_Au8Digits[Local_u8Iterator] + '0');
    728c:	8f 81       	ldd	r24, Y+7	; 0x07
    728e:	99 27       	eor	r25, r25
    7290:	87 fd       	sbrc	r24, 7
    7292:	90 95       	com	r25
    7294:	fc 01       	movw	r30, r24
    7296:	e1 5e       	subi	r30, 0xE1	; 225
    7298:	fd 4f       	sbci	r31, 0xFD	; 253
    729a:	80 81       	ld	r24, Z
    729c:	80 5d       	subi	r24, 0xD0	; 208
    729e:	0e 94 69 39 	call	0x72d2	; 0x72d2 <LCD_inenuLatch>
    72a2:	88 87       	std	Y+8, r24	; 0x08
			Local_u8Iterator--;
    72a4:	8f 81       	ldd	r24, Y+7	; 0x07
    72a6:	81 50       	subi	r24, 0x01	; 1
    72a8:	8f 83       	std	Y+7, r24	; 0x07
			Local_u8Iterator++;
			Local_Au8Digits[3 - Local_u8Iterator] = ((s32)(Copy_u8Num*base))%10;
			base *= 10;
		}

		while( Local_u8Iterator >= 0 && Local_enuErrorState == ES_OK)
    72aa:	8f 81       	ldd	r24, Y+7	; 0x07
    72ac:	88 23       	and	r24, r24
    72ae:	1c f0       	brlt	.+6      	; 0x72b6 <LCD_enuWriteNumber+0x31a>
    72b0:	88 85       	ldd	r24, Y+8	; 0x08
    72b2:	81 30       	cpi	r24, 0x01	; 1
    72b4:	59 f3       	breq	.-42     	; 0x728c <LCD_enuWriteNumber+0x2f0>
			Local_u8Iterator--;
		}

	}

	return Local_enuErrorState;
    72b6:	88 85       	ldd	r24, Y+8	; 0x08
    72b8:	8f 87       	std	Y+15, r24	; 0x0f
    72ba:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    72bc:	2f 96       	adiw	r28, 0x0f	; 15
    72be:	0f b6       	in	r0, 0x3f	; 63
    72c0:	f8 94       	cli
    72c2:	de bf       	out	0x3e, r29	; 62
    72c4:	0f be       	out	0x3f, r0	; 63
    72c6:	cd bf       	out	0x3d, r28	; 61
    72c8:	cf 91       	pop	r28
    72ca:	df 91       	pop	r29
    72cc:	1f 91       	pop	r17
    72ce:	0f 91       	pop	r16
    72d0:	08 95       	ret

000072d2 <LCD_inenuLatch>:
//	return Local_enuErrorState;
//}


static ES_t LCD_inenuLatch( u8 Copy_u8Data )
{
    72d2:	df 93       	push	r29
    72d4:	cf 93       	push	r28
    72d6:	cd b7       	in	r28, 0x3d	; 61
    72d8:	de b7       	in	r29, 0x3e	; 62
    72da:	65 97       	sbiw	r28, 0x15	; 21
    72dc:	0f b6       	in	r0, 0x3f	; 63
    72de:	f8 94       	cli
    72e0:	de bf       	out	0x3e, r29	; 62
    72e2:	0f be       	out	0x3f, r0	; 63
    72e4:	cd bf       	out	0x3d, r28	; 61
    72e6:	8c 8b       	std	Y+20, r24	; 0x14
	ES_t Local_enuErrorState = ES_NOK;
    72e8:	1b 8a       	std	Y+19, r1	; 0x13
	u32 Copy_u32Check = 0;
    72ea:	1f 86       	std	Y+15, r1	; 0x0f
    72ec:	18 8a       	std	Y+16, r1	; 0x10
    72ee:	19 8a       	std	Y+17, r1	; 0x11
    72f0:	1a 8a       	std	Y+18, r1	; 0x12

	// choose write mode
	Copy_u32Check |= ((u32)(DIO_enuSetPinVal(RW_PORT, RW_PIN, DIO_u8LOW )<<0));
    72f2:	80 e0       	ldi	r24, 0x00	; 0
    72f4:	61 e0       	ldi	r22, 0x01	; 1
    72f6:	40 e0       	ldi	r20, 0x00	; 0
    72f8:	0e 94 37 2c 	call	0x586e	; 0x586e <DIO_enuSetPinVal>
    72fc:	28 2f       	mov	r18, r24
    72fe:	30 e0       	ldi	r19, 0x00	; 0
    7300:	40 e0       	ldi	r20, 0x00	; 0
    7302:	50 e0       	ldi	r21, 0x00	; 0
    7304:	8f 85       	ldd	r24, Y+15	; 0x0f
    7306:	98 89       	ldd	r25, Y+16	; 0x10
    7308:	a9 89       	ldd	r26, Y+17	; 0x11
    730a:	ba 89       	ldd	r27, Y+18	; 0x12
    730c:	82 2b       	or	r24, r18
    730e:	93 2b       	or	r25, r19
    7310:	a4 2b       	or	r26, r20
    7312:	b5 2b       	or	r27, r21
    7314:	8f 87       	std	Y+15, r24	; 0x0f
    7316:	98 8b       	std	Y+16, r25	; 0x10
    7318:	a9 8b       	std	Y+17, r26	; 0x11
    731a:	ba 8b       	std	Y+18, r27	; 0x12
	Copy_u32Check |= ((u32)(DIO_enuSetPinVal(EN_PORT, EN_PIN, DIO_u8LOW )<<3));
    731c:	83 e0       	ldi	r24, 0x03	; 3
    731e:	63 e0       	ldi	r22, 0x03	; 3
    7320:	40 e0       	ldi	r20, 0x00	; 0
    7322:	0e 94 37 2c 	call	0x586e	; 0x586e <DIO_enuSetPinVal>
    7326:	88 2f       	mov	r24, r24
    7328:	90 e0       	ldi	r25, 0x00	; 0
    732a:	88 0f       	add	r24, r24
    732c:	99 1f       	adc	r25, r25
    732e:	88 0f       	add	r24, r24
    7330:	99 1f       	adc	r25, r25
    7332:	88 0f       	add	r24, r24
    7334:	99 1f       	adc	r25, r25
    7336:	9c 01       	movw	r18, r24
    7338:	44 27       	eor	r20, r20
    733a:	37 fd       	sbrc	r19, 7
    733c:	40 95       	com	r20
    733e:	54 2f       	mov	r21, r20
    7340:	8f 85       	ldd	r24, Y+15	; 0x0f
    7342:	98 89       	ldd	r25, Y+16	; 0x10
    7344:	a9 89       	ldd	r26, Y+17	; 0x11
    7346:	ba 89       	ldd	r27, Y+18	; 0x12
    7348:	82 2b       	or	r24, r18
    734a:	93 2b       	or	r25, r19
    734c:	a4 2b       	or	r26, r20
    734e:	b5 2b       	or	r27, r21
    7350:	8f 87       	std	Y+15, r24	; 0x0f
    7352:	98 8b       	std	Y+16, r25	; 0x10
    7354:	a9 8b       	std	Y+17, r26	; 0x11
    7356:	ba 8b       	std	Y+18, r27	; 0x12

	// write command

	Copy_u32Check |= (((u32)DIO_enuSetPinVal(DB7_PORT, DB7_PIN, (Copy_u8Data>>7)&1 )<<6 ));
    7358:	8c 89       	ldd	r24, Y+20	; 0x14
    735a:	98 2f       	mov	r25, r24
    735c:	99 1f       	adc	r25, r25
    735e:	99 27       	eor	r25, r25
    7360:	99 1f       	adc	r25, r25
    7362:	82 e0       	ldi	r24, 0x02	; 2
    7364:	62 e0       	ldi	r22, 0x02	; 2
    7366:	49 2f       	mov	r20, r25
    7368:	0e 94 37 2c 	call	0x586e	; 0x586e <DIO_enuSetPinVal>
    736c:	88 2f       	mov	r24, r24
    736e:	90 e0       	ldi	r25, 0x00	; 0
    7370:	a0 e0       	ldi	r26, 0x00	; 0
    7372:	b0 e0       	ldi	r27, 0x00	; 0
    7374:	88 0f       	add	r24, r24
    7376:	99 1f       	adc	r25, r25
    7378:	aa 1f       	adc	r26, r26
    737a:	bb 1f       	adc	r27, r27
    737c:	88 0f       	add	r24, r24
    737e:	99 1f       	adc	r25, r25
    7380:	aa 1f       	adc	r26, r26
    7382:	bb 1f       	adc	r27, r27
    7384:	88 0f       	add	r24, r24
    7386:	99 1f       	adc	r25, r25
    7388:	aa 1f       	adc	r26, r26
    738a:	bb 1f       	adc	r27, r27
    738c:	88 0f       	add	r24, r24
    738e:	99 1f       	adc	r25, r25
    7390:	aa 1f       	adc	r26, r26
    7392:	bb 1f       	adc	r27, r27
    7394:	88 0f       	add	r24, r24
    7396:	99 1f       	adc	r25, r25
    7398:	aa 1f       	adc	r26, r26
    739a:	bb 1f       	adc	r27, r27
    739c:	88 0f       	add	r24, r24
    739e:	99 1f       	adc	r25, r25
    73a0:	aa 1f       	adc	r26, r26
    73a2:	bb 1f       	adc	r27, r27
    73a4:	9c 01       	movw	r18, r24
    73a6:	ad 01       	movw	r20, r26
    73a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    73aa:	98 89       	ldd	r25, Y+16	; 0x10
    73ac:	a9 89       	ldd	r26, Y+17	; 0x11
    73ae:	ba 89       	ldd	r27, Y+18	; 0x12
    73b0:	82 2b       	or	r24, r18
    73b2:	93 2b       	or	r25, r19
    73b4:	a4 2b       	or	r26, r20
    73b6:	b5 2b       	or	r27, r21
    73b8:	8f 87       	std	Y+15, r24	; 0x0f
    73ba:	98 8b       	std	Y+16, r25	; 0x10
    73bc:	a9 8b       	std	Y+17, r26	; 0x11
    73be:	ba 8b       	std	Y+18, r27	; 0x12
	Copy_u32Check |= (((u32)DIO_enuSetPinVal(DB6_PORT, DB6_PIN, (Copy_u8Data>>6)&1 )<<9 ));
    73c0:	8c 89       	ldd	r24, Y+20	; 0x14
    73c2:	82 95       	swap	r24
    73c4:	86 95       	lsr	r24
    73c6:	86 95       	lsr	r24
    73c8:	83 70       	andi	r24, 0x03	; 3
    73ca:	98 2f       	mov	r25, r24
    73cc:	91 70       	andi	r25, 0x01	; 1
    73ce:	80 e0       	ldi	r24, 0x00	; 0
    73d0:	62 e0       	ldi	r22, 0x02	; 2
    73d2:	49 2f       	mov	r20, r25
    73d4:	0e 94 37 2c 	call	0x586e	; 0x586e <DIO_enuSetPinVal>
    73d8:	88 2f       	mov	r24, r24
    73da:	90 e0       	ldi	r25, 0x00	; 0
    73dc:	a0 e0       	ldi	r26, 0x00	; 0
    73de:	b0 e0       	ldi	r27, 0x00	; 0
    73e0:	9c 01       	movw	r18, r24
    73e2:	ad 01       	movw	r20, r26
    73e4:	01 2e       	mov	r0, r17
    73e6:	19 e0       	ldi	r17, 0x09	; 9
    73e8:	22 0f       	add	r18, r18
    73ea:	33 1f       	adc	r19, r19
    73ec:	44 1f       	adc	r20, r20
    73ee:	55 1f       	adc	r21, r21
    73f0:	1a 95       	dec	r17
    73f2:	d1 f7       	brne	.-12     	; 0x73e8 <LCD_inenuLatch+0x116>
    73f4:	10 2d       	mov	r17, r0
    73f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    73f8:	98 89       	ldd	r25, Y+16	; 0x10
    73fa:	a9 89       	ldd	r26, Y+17	; 0x11
    73fc:	ba 89       	ldd	r27, Y+18	; 0x12
    73fe:	82 2b       	or	r24, r18
    7400:	93 2b       	or	r25, r19
    7402:	a4 2b       	or	r26, r20
    7404:	b5 2b       	or	r27, r21
    7406:	8f 87       	std	Y+15, r24	; 0x0f
    7408:	98 8b       	std	Y+16, r25	; 0x10
    740a:	a9 8b       	std	Y+17, r26	; 0x11
    740c:	ba 8b       	std	Y+18, r27	; 0x12
	Copy_u32Check |= (((u32)DIO_enuSetPinVal(DB5_PORT, DB5_PIN, (Copy_u8Data>>5)&1 )<<12 ));
    740e:	8c 89       	ldd	r24, Y+20	; 0x14
    7410:	82 95       	swap	r24
    7412:	86 95       	lsr	r24
    7414:	87 70       	andi	r24, 0x07	; 7
    7416:	98 2f       	mov	r25, r24
    7418:	91 70       	andi	r25, 0x01	; 1
    741a:	83 e0       	ldi	r24, 0x03	; 3
    741c:	61 e0       	ldi	r22, 0x01	; 1
    741e:	49 2f       	mov	r20, r25
    7420:	0e 94 37 2c 	call	0x586e	; 0x586e <DIO_enuSetPinVal>
    7424:	88 2f       	mov	r24, r24
    7426:	90 e0       	ldi	r25, 0x00	; 0
    7428:	a0 e0       	ldi	r26, 0x00	; 0
    742a:	b0 e0       	ldi	r27, 0x00	; 0
    742c:	9c 01       	movw	r18, r24
    742e:	ad 01       	movw	r20, r26
    7430:	01 2e       	mov	r0, r17
    7432:	1c e0       	ldi	r17, 0x0C	; 12
    7434:	22 0f       	add	r18, r18
    7436:	33 1f       	adc	r19, r19
    7438:	44 1f       	adc	r20, r20
    743a:	55 1f       	adc	r21, r21
    743c:	1a 95       	dec	r17
    743e:	d1 f7       	brne	.-12     	; 0x7434 <LCD_inenuLatch+0x162>
    7440:	10 2d       	mov	r17, r0
    7442:	8f 85       	ldd	r24, Y+15	; 0x0f
    7444:	98 89       	ldd	r25, Y+16	; 0x10
    7446:	a9 89       	ldd	r26, Y+17	; 0x11
    7448:	ba 89       	ldd	r27, Y+18	; 0x12
    744a:	82 2b       	or	r24, r18
    744c:	93 2b       	or	r25, r19
    744e:	a4 2b       	or	r26, r20
    7450:	b5 2b       	or	r27, r21
    7452:	8f 87       	std	Y+15, r24	; 0x0f
    7454:	98 8b       	std	Y+16, r25	; 0x10
    7456:	a9 8b       	std	Y+17, r26	; 0x11
    7458:	ba 8b       	std	Y+18, r27	; 0x12
	Copy_u32Check |= (((u32)DIO_enuSetPinVal(DB4_PORT, DB4_PIN, (Copy_u8Data>>4)&1 )<<15));
    745a:	8c 89       	ldd	r24, Y+20	; 0x14
    745c:	82 95       	swap	r24
    745e:	8f 70       	andi	r24, 0x0F	; 15
    7460:	98 2f       	mov	r25, r24
    7462:	91 70       	andi	r25, 0x01	; 1
    7464:	83 e0       	ldi	r24, 0x03	; 3
    7466:	60 e0       	ldi	r22, 0x00	; 0
    7468:	49 2f       	mov	r20, r25
    746a:	0e 94 37 2c 	call	0x586e	; 0x586e <DIO_enuSetPinVal>
    746e:	88 2f       	mov	r24, r24
    7470:	90 e0       	ldi	r25, 0x00	; 0
    7472:	a0 e0       	ldi	r26, 0x00	; 0
    7474:	b0 e0       	ldi	r27, 0x00	; 0
    7476:	9c 01       	movw	r18, r24
    7478:	ad 01       	movw	r20, r26
    747a:	01 2e       	mov	r0, r17
    747c:	1f e0       	ldi	r17, 0x0F	; 15
    747e:	22 0f       	add	r18, r18
    7480:	33 1f       	adc	r19, r19
    7482:	44 1f       	adc	r20, r20
    7484:	55 1f       	adc	r21, r21
    7486:	1a 95       	dec	r17
    7488:	d1 f7       	brne	.-12     	; 0x747e <LCD_inenuLatch+0x1ac>
    748a:	10 2d       	mov	r17, r0
    748c:	8f 85       	ldd	r24, Y+15	; 0x0f
    748e:	98 89       	ldd	r25, Y+16	; 0x10
    7490:	a9 89       	ldd	r26, Y+17	; 0x11
    7492:	ba 89       	ldd	r27, Y+18	; 0x12
    7494:	82 2b       	or	r24, r18
    7496:	93 2b       	or	r25, r19
    7498:	a4 2b       	or	r26, r20
    749a:	b5 2b       	or	r27, r21
    749c:	8f 87       	std	Y+15, r24	; 0x0f
    749e:	98 8b       	std	Y+16, r25	; 0x10
    74a0:	a9 8b       	std	Y+17, r26	; 0x11
    74a2:	ba 8b       	std	Y+18, r27	; 0x12

#if LCD_MODE == EIGHT_BIT

	Copy_u32Check |= (((u32)DIO_enuSetPinVal(DB3_PORT, DB3_PIN, (Copy_u8Data>>3)&1 )<<18));
    74a4:	8c 89       	ldd	r24, Y+20	; 0x14
    74a6:	86 95       	lsr	r24
    74a8:	86 95       	lsr	r24
    74aa:	86 95       	lsr	r24
    74ac:	98 2f       	mov	r25, r24
    74ae:	91 70       	andi	r25, 0x01	; 1
    74b0:	82 e0       	ldi	r24, 0x02	; 2
    74b2:	61 e0       	ldi	r22, 0x01	; 1
    74b4:	49 2f       	mov	r20, r25
    74b6:	0e 94 37 2c 	call	0x586e	; 0x586e <DIO_enuSetPinVal>
    74ba:	88 2f       	mov	r24, r24
    74bc:	90 e0       	ldi	r25, 0x00	; 0
    74be:	a0 e0       	ldi	r26, 0x00	; 0
    74c0:	b0 e0       	ldi	r27, 0x00	; 0
    74c2:	9c 01       	movw	r18, r24
    74c4:	ad 01       	movw	r20, r26
    74c6:	01 2e       	mov	r0, r17
    74c8:	12 e1       	ldi	r17, 0x12	; 18
    74ca:	22 0f       	add	r18, r18
    74cc:	33 1f       	adc	r19, r19
    74ce:	44 1f       	adc	r20, r20
    74d0:	55 1f       	adc	r21, r21
    74d2:	1a 95       	dec	r17
    74d4:	d1 f7       	brne	.-12     	; 0x74ca <LCD_inenuLatch+0x1f8>
    74d6:	10 2d       	mov	r17, r0
    74d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    74da:	98 89       	ldd	r25, Y+16	; 0x10
    74dc:	a9 89       	ldd	r26, Y+17	; 0x11
    74de:	ba 89       	ldd	r27, Y+18	; 0x12
    74e0:	82 2b       	or	r24, r18
    74e2:	93 2b       	or	r25, r19
    74e4:	a4 2b       	or	r26, r20
    74e6:	b5 2b       	or	r27, r21
    74e8:	8f 87       	std	Y+15, r24	; 0x0f
    74ea:	98 8b       	std	Y+16, r25	; 0x10
    74ec:	a9 8b       	std	Y+17, r26	; 0x11
    74ee:	ba 8b       	std	Y+18, r27	; 0x12
	Copy_u32Check |= (((u32)DIO_enuSetPinVal(DB2_PORT, DB2_PIN, (Copy_u8Data>>2)&1 )<<21));
    74f0:	8c 89       	ldd	r24, Y+20	; 0x14
    74f2:	86 95       	lsr	r24
    74f4:	86 95       	lsr	r24
    74f6:	98 2f       	mov	r25, r24
    74f8:	91 70       	andi	r25, 0x01	; 1
    74fa:	82 e0       	ldi	r24, 0x02	; 2
    74fc:	60 e0       	ldi	r22, 0x00	; 0
    74fe:	49 2f       	mov	r20, r25
    7500:	0e 94 37 2c 	call	0x586e	; 0x586e <DIO_enuSetPinVal>
    7504:	88 2f       	mov	r24, r24
    7506:	90 e0       	ldi	r25, 0x00	; 0
    7508:	a0 e0       	ldi	r26, 0x00	; 0
    750a:	b0 e0       	ldi	r27, 0x00	; 0
    750c:	9c 01       	movw	r18, r24
    750e:	ad 01       	movw	r20, r26
    7510:	01 2e       	mov	r0, r17
    7512:	15 e1       	ldi	r17, 0x15	; 21
    7514:	22 0f       	add	r18, r18
    7516:	33 1f       	adc	r19, r19
    7518:	44 1f       	adc	r20, r20
    751a:	55 1f       	adc	r21, r21
    751c:	1a 95       	dec	r17
    751e:	d1 f7       	brne	.-12     	; 0x7514 <LCD_inenuLatch+0x242>
    7520:	10 2d       	mov	r17, r0
    7522:	8f 85       	ldd	r24, Y+15	; 0x0f
    7524:	98 89       	ldd	r25, Y+16	; 0x10
    7526:	a9 89       	ldd	r26, Y+17	; 0x11
    7528:	ba 89       	ldd	r27, Y+18	; 0x12
    752a:	82 2b       	or	r24, r18
    752c:	93 2b       	or	r25, r19
    752e:	a4 2b       	or	r26, r20
    7530:	b5 2b       	or	r27, r21
    7532:	8f 87       	std	Y+15, r24	; 0x0f
    7534:	98 8b       	std	Y+16, r25	; 0x10
    7536:	a9 8b       	std	Y+17, r26	; 0x11
    7538:	ba 8b       	std	Y+18, r27	; 0x12
	Copy_u32Check |= (((u32)DIO_enuSetPinVal(DB1_PORT, DB1_PIN, (Copy_u8Data>>1)&1 )<<24));
    753a:	8c 89       	ldd	r24, Y+20	; 0x14
    753c:	86 95       	lsr	r24
    753e:	98 2f       	mov	r25, r24
    7540:	91 70       	andi	r25, 0x01	; 1
    7542:	81 e0       	ldi	r24, 0x01	; 1
    7544:	61 e0       	ldi	r22, 0x01	; 1
    7546:	49 2f       	mov	r20, r25
    7548:	0e 94 37 2c 	call	0x586e	; 0x586e <DIO_enuSetPinVal>
    754c:	88 2f       	mov	r24, r24
    754e:	90 e0       	ldi	r25, 0x00	; 0
    7550:	a0 e0       	ldi	r26, 0x00	; 0
    7552:	b0 e0       	ldi	r27, 0x00	; 0
    7554:	58 2f       	mov	r21, r24
    7556:	44 27       	eor	r20, r20
    7558:	33 27       	eor	r19, r19
    755a:	22 27       	eor	r18, r18
    755c:	8f 85       	ldd	r24, Y+15	; 0x0f
    755e:	98 89       	ldd	r25, Y+16	; 0x10
    7560:	a9 89       	ldd	r26, Y+17	; 0x11
    7562:	ba 89       	ldd	r27, Y+18	; 0x12
    7564:	82 2b       	or	r24, r18
    7566:	93 2b       	or	r25, r19
    7568:	a4 2b       	or	r26, r20
    756a:	b5 2b       	or	r27, r21
    756c:	8f 87       	std	Y+15, r24	; 0x0f
    756e:	98 8b       	std	Y+16, r25	; 0x10
    7570:	a9 8b       	std	Y+17, r26	; 0x11
    7572:	ba 8b       	std	Y+18, r27	; 0x12
	Copy_u32Check |= (((u32)DIO_enuSetPinVal(DB0_PORT, DB0_PIN, (Copy_u8Data>>0)&1 )<<27));
    7574:	8c 89       	ldd	r24, Y+20	; 0x14
    7576:	98 2f       	mov	r25, r24
    7578:	91 70       	andi	r25, 0x01	; 1
    757a:	81 e0       	ldi	r24, 0x01	; 1
    757c:	60 e0       	ldi	r22, 0x00	; 0
    757e:	49 2f       	mov	r20, r25
    7580:	0e 94 37 2c 	call	0x586e	; 0x586e <DIO_enuSetPinVal>
    7584:	88 2f       	mov	r24, r24
    7586:	90 e0       	ldi	r25, 0x00	; 0
    7588:	a0 e0       	ldi	r26, 0x00	; 0
    758a:	b0 e0       	ldi	r27, 0x00	; 0
    758c:	9c 01       	movw	r18, r24
    758e:	ad 01       	movw	r20, r26
    7590:	01 2e       	mov	r0, r17
    7592:	1b e1       	ldi	r17, 0x1B	; 27
    7594:	22 0f       	add	r18, r18
    7596:	33 1f       	adc	r19, r19
    7598:	44 1f       	adc	r20, r20
    759a:	55 1f       	adc	r21, r21
    759c:	1a 95       	dec	r17
    759e:	d1 f7       	brne	.-12     	; 0x7594 <LCD_inenuLatch+0x2c2>
    75a0:	10 2d       	mov	r17, r0
    75a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    75a4:	98 89       	ldd	r25, Y+16	; 0x10
    75a6:	a9 89       	ldd	r26, Y+17	; 0x11
    75a8:	ba 89       	ldd	r27, Y+18	; 0x12
    75aa:	82 2b       	or	r24, r18
    75ac:	93 2b       	or	r25, r19
    75ae:	a4 2b       	or	r26, r20
    75b0:	b5 2b       	or	r27, r21
    75b2:	8f 87       	std	Y+15, r24	; 0x0f
    75b4:	98 8b       	std	Y+16, r25	; 0x10
    75b6:	a9 8b       	std	Y+17, r26	; 0x11
    75b8:	ba 8b       	std	Y+18, r27	; 0x12

	for(Local_u8Iterator = 0; Local_u8Iterator < 30; Local_u8Iterator+=3)
    75ba:	10 92 80 02 	sts	0x0280, r1
    75be:	20 c0       	rjmp	.+64     	; 0x7600 <LCD_inenuLatch+0x32e>
	{
		if(((Copy_u32Check >> Local_u8Iterator) & (0b111)) != ES_OK)
    75c0:	80 91 80 02 	lds	r24, 0x0280
    75c4:	28 2f       	mov	r18, r24
    75c6:	30 e0       	ldi	r19, 0x00	; 0
    75c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    75ca:	98 89       	ldd	r25, Y+16	; 0x10
    75cc:	a9 89       	ldd	r26, Y+17	; 0x11
    75ce:	ba 89       	ldd	r27, Y+18	; 0x12
    75d0:	02 2e       	mov	r0, r18
    75d2:	04 c0       	rjmp	.+8      	; 0x75dc <LCD_inenuLatch+0x30a>
    75d4:	b6 95       	lsr	r27
    75d6:	a7 95       	ror	r26
    75d8:	97 95       	ror	r25
    75da:	87 95       	ror	r24
    75dc:	0a 94       	dec	r0
    75de:	d2 f7       	brpl	.-12     	; 0x75d4 <LCD_inenuLatch+0x302>
    75e0:	87 70       	andi	r24, 0x07	; 7
    75e2:	90 70       	andi	r25, 0x00	; 0
    75e4:	a0 70       	andi	r26, 0x00	; 0
    75e6:	b0 70       	andi	r27, 0x00	; 0
    75e8:	81 30       	cpi	r24, 0x01	; 1
    75ea:	91 05       	cpc	r25, r1
    75ec:	a1 05       	cpc	r26, r1
    75ee:	b1 05       	cpc	r27, r1
    75f0:	11 f0       	breq	.+4      	; 0x75f6 <LCD_inenuLatch+0x324>
		{
			return ES_NOK;
    75f2:	1d 8a       	std	Y+21, r1	; 0x15
    75f4:	89 c0       	rjmp	.+274    	; 0x7708 <LCD_inenuLatch+0x436>
	Copy_u32Check |= (((u32)DIO_enuSetPinVal(DB3_PORT, DB3_PIN, (Copy_u8Data>>3)&1 )<<18));
	Copy_u32Check |= (((u32)DIO_enuSetPinVal(DB2_PORT, DB2_PIN, (Copy_u8Data>>2)&1 )<<21));
	Copy_u32Check |= (((u32)DIO_enuSetPinVal(DB1_PORT, DB1_PIN, (Copy_u8Data>>1)&1 )<<24));
	Copy_u32Check |= (((u32)DIO_enuSetPinVal(DB0_PORT, DB0_PIN, (Copy_u8Data>>0)&1 )<<27));

	for(Local_u8Iterator = 0; Local_u8Iterator < 30; Local_u8Iterator+=3)
    75f6:	80 91 80 02 	lds	r24, 0x0280
    75fa:	8d 5f       	subi	r24, 0xFD	; 253
    75fc:	80 93 80 02 	sts	0x0280, r24
    7600:	80 91 80 02 	lds	r24, 0x0280
    7604:	8e 31       	cpi	r24, 0x1E	; 30
    7606:	e0 f2       	brcs	.-72     	; 0x75c0 <LCD_inenuLatch+0x2ee>
		{
			return ES_NOK;
		}
	}

	Local_enuErrorState = ES_OK;
    7608:	81 e0       	ldi	r24, 0x01	; 1
    760a:	8b 8b       	std	Y+19, r24	; 0x13
#else
#error "Unsupported mode"
#endif
	// enable latch

	DIO_enuSetPinVal(EN_PORT, EN_PIN, DIO_u8HIGH);
    760c:	83 e0       	ldi	r24, 0x03	; 3
    760e:	63 e0       	ldi	r22, 0x03	; 3
    7610:	41 e0       	ldi	r20, 0x01	; 1
    7612:	0e 94 37 2c 	call	0x586e	; 0x586e <DIO_enuSetPinVal>
    7616:	80 e0       	ldi	r24, 0x00	; 0
    7618:	90 e0       	ldi	r25, 0x00	; 0
    761a:	a0 e8       	ldi	r26, 0x80	; 128
    761c:	bf e3       	ldi	r27, 0x3F	; 63
    761e:	8b 87       	std	Y+11, r24	; 0x0b
    7620:	9c 87       	std	Y+12, r25	; 0x0c
    7622:	ad 87       	std	Y+13, r26	; 0x0d
    7624:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7626:	6b 85       	ldd	r22, Y+11	; 0x0b
    7628:	7c 85       	ldd	r23, Y+12	; 0x0c
    762a:	8d 85       	ldd	r24, Y+13	; 0x0d
    762c:	9e 85       	ldd	r25, Y+14	; 0x0e
    762e:	20 e0       	ldi	r18, 0x00	; 0
    7630:	30 e0       	ldi	r19, 0x00	; 0
    7632:	4a e7       	ldi	r20, 0x7A	; 122
    7634:	53 e4       	ldi	r21, 0x43	; 67
    7636:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    763a:	dc 01       	movw	r26, r24
    763c:	cb 01       	movw	r24, r22
    763e:	8f 83       	std	Y+7, r24	; 0x07
    7640:	98 87       	std	Y+8, r25	; 0x08
    7642:	a9 87       	std	Y+9, r26	; 0x09
    7644:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7646:	6f 81       	ldd	r22, Y+7	; 0x07
    7648:	78 85       	ldd	r23, Y+8	; 0x08
    764a:	89 85       	ldd	r24, Y+9	; 0x09
    764c:	9a 85       	ldd	r25, Y+10	; 0x0a
    764e:	20 e0       	ldi	r18, 0x00	; 0
    7650:	30 e0       	ldi	r19, 0x00	; 0
    7652:	40 e8       	ldi	r20, 0x80	; 128
    7654:	5f e3       	ldi	r21, 0x3F	; 63
    7656:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    765a:	88 23       	and	r24, r24
    765c:	2c f4       	brge	.+10     	; 0x7668 <LCD_inenuLatch+0x396>
		__ticks = 1;
    765e:	81 e0       	ldi	r24, 0x01	; 1
    7660:	90 e0       	ldi	r25, 0x00	; 0
    7662:	9e 83       	std	Y+6, r25	; 0x06
    7664:	8d 83       	std	Y+5, r24	; 0x05
    7666:	3f c0       	rjmp	.+126    	; 0x76e6 <LCD_inenuLatch+0x414>
	else if (__tmp > 65535)
    7668:	6f 81       	ldd	r22, Y+7	; 0x07
    766a:	78 85       	ldd	r23, Y+8	; 0x08
    766c:	89 85       	ldd	r24, Y+9	; 0x09
    766e:	9a 85       	ldd	r25, Y+10	; 0x0a
    7670:	20 e0       	ldi	r18, 0x00	; 0
    7672:	3f ef       	ldi	r19, 0xFF	; 255
    7674:	4f e7       	ldi	r20, 0x7F	; 127
    7676:	57 e4       	ldi	r21, 0x47	; 71
    7678:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    767c:	18 16       	cp	r1, r24
    767e:	4c f5       	brge	.+82     	; 0x76d2 <LCD_inenuLatch+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7680:	6b 85       	ldd	r22, Y+11	; 0x0b
    7682:	7c 85       	ldd	r23, Y+12	; 0x0c
    7684:	8d 85       	ldd	r24, Y+13	; 0x0d
    7686:	9e 85       	ldd	r25, Y+14	; 0x0e
    7688:	20 e0       	ldi	r18, 0x00	; 0
    768a:	30 e0       	ldi	r19, 0x00	; 0
    768c:	40 e2       	ldi	r20, 0x20	; 32
    768e:	51 e4       	ldi	r21, 0x41	; 65
    7690:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    7694:	dc 01       	movw	r26, r24
    7696:	cb 01       	movw	r24, r22
    7698:	bc 01       	movw	r22, r24
    769a:	cd 01       	movw	r24, r26
    769c:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    76a0:	dc 01       	movw	r26, r24
    76a2:	cb 01       	movw	r24, r22
    76a4:	9e 83       	std	Y+6, r25	; 0x06
    76a6:	8d 83       	std	Y+5, r24	; 0x05
    76a8:	0f c0       	rjmp	.+30     	; 0x76c8 <LCD_inenuLatch+0x3f6>
    76aa:	89 e1       	ldi	r24, 0x19	; 25
    76ac:	90 e0       	ldi	r25, 0x00	; 0
    76ae:	9c 83       	std	Y+4, r25	; 0x04
    76b0:	8b 83       	std	Y+3, r24	; 0x03
    76b2:	8b 81       	ldd	r24, Y+3	; 0x03
    76b4:	9c 81       	ldd	r25, Y+4	; 0x04
    76b6:	01 97       	sbiw	r24, 0x01	; 1
    76b8:	f1 f7       	brne	.-4      	; 0x76b6 <LCD_inenuLatch+0x3e4>
    76ba:	9c 83       	std	Y+4, r25	; 0x04
    76bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    76be:	8d 81       	ldd	r24, Y+5	; 0x05
    76c0:	9e 81       	ldd	r25, Y+6	; 0x06
    76c2:	01 97       	sbiw	r24, 0x01	; 1
    76c4:	9e 83       	std	Y+6, r25	; 0x06
    76c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    76c8:	8d 81       	ldd	r24, Y+5	; 0x05
    76ca:	9e 81       	ldd	r25, Y+6	; 0x06
    76cc:	00 97       	sbiw	r24, 0x00	; 0
    76ce:	69 f7       	brne	.-38     	; 0x76aa <LCD_inenuLatch+0x3d8>
    76d0:	14 c0       	rjmp	.+40     	; 0x76fa <LCD_inenuLatch+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    76d2:	6f 81       	ldd	r22, Y+7	; 0x07
    76d4:	78 85       	ldd	r23, Y+8	; 0x08
    76d6:	89 85       	ldd	r24, Y+9	; 0x09
    76d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    76da:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    76de:	dc 01       	movw	r26, r24
    76e0:	cb 01       	movw	r24, r22
    76e2:	9e 83       	std	Y+6, r25	; 0x06
    76e4:	8d 83       	std	Y+5, r24	; 0x05
    76e6:	8d 81       	ldd	r24, Y+5	; 0x05
    76e8:	9e 81       	ldd	r25, Y+6	; 0x06
    76ea:	9a 83       	std	Y+2, r25	; 0x02
    76ec:	89 83       	std	Y+1, r24	; 0x01
    76ee:	89 81       	ldd	r24, Y+1	; 0x01
    76f0:	9a 81       	ldd	r25, Y+2	; 0x02
    76f2:	01 97       	sbiw	r24, 0x01	; 1
    76f4:	f1 f7       	brne	.-4      	; 0x76f2 <LCD_inenuLatch+0x420>
    76f6:	9a 83       	std	Y+2, r25	; 0x02
    76f8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_enuSetPinVal(EN_PORT, EN_PIN, DIO_u8LOW);
    76fa:	83 e0       	ldi	r24, 0x03	; 3
    76fc:	63 e0       	ldi	r22, 0x03	; 3
    76fe:	40 e0       	ldi	r20, 0x00	; 0
    7700:	0e 94 37 2c 	call	0x586e	; 0x586e <DIO_enuSetPinVal>
	//_delay_ms(1);

	return Local_enuErrorState;
    7704:	8b 89       	ldd	r24, Y+19	; 0x13
    7706:	8d 8b       	std	Y+21, r24	; 0x15
    7708:	8d 89       	ldd	r24, Y+21	; 0x15
}
    770a:	65 96       	adiw	r28, 0x15	; 21
    770c:	0f b6       	in	r0, 0x3f	; 63
    770e:	f8 94       	cli
    7710:	de bf       	out	0x3e, r29	; 62
    7712:	0f be       	out	0x3f, r0	; 63
    7714:	cd bf       	out	0x3d, r28	; 61
    7716:	cf 91       	pop	r28
    7718:	df 91       	pop	r29
    771a:	08 95       	ret

0000771c <LCD_inenuSendCommand>:


static inline ES_t LCD_inenuSendCommand(u8 Copy_u8Command)
{
    771c:	df 93       	push	r29
    771e:	cf 93       	push	r28
    7720:	00 d0       	rcall	.+0      	; 0x7722 <LCD_inenuSendCommand+0x6>
    7722:	cd b7       	in	r28, 0x3d	; 61
    7724:	de b7       	in	r29, 0x3e	; 62
    7726:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    7728:	19 82       	std	Y+1, r1	; 0x01

	// select instruction register
	if(DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8LOW ) == ES_OK)
    772a:	80 e0       	ldi	r24, 0x00	; 0
    772c:	60 e0       	ldi	r22, 0x00	; 0
    772e:	40 e0       	ldi	r20, 0x00	; 0
    7730:	0e 94 37 2c 	call	0x586e	; 0x586e <DIO_enuSetPinVal>
    7734:	81 30       	cpi	r24, 0x01	; 1
    7736:	21 f4       	brne	.+8      	; 0x7740 <LCD_inenuSendCommand+0x24>
	{
		Local_enuErrorState = LCD_inenuLatch(Copy_u8Command);
    7738:	8a 81       	ldd	r24, Y+2	; 0x02
    773a:	0e 94 69 39 	call	0x72d2	; 0x72d2 <LCD_inenuLatch>
    773e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    7740:	89 81       	ldd	r24, Y+1	; 0x01
}
    7742:	0f 90       	pop	r0
    7744:	0f 90       	pop	r0
    7746:	cf 91       	pop	r28
    7748:	df 91       	pop	r29
    774a:	08 95       	ret

0000774c <__udivmodhi4>:
    774c:	aa 1b       	sub	r26, r26
    774e:	bb 1b       	sub	r27, r27
    7750:	51 e1       	ldi	r21, 0x11	; 17
    7752:	07 c0       	rjmp	.+14     	; 0x7762 <__udivmodhi4_ep>

00007754 <__udivmodhi4_loop>:
    7754:	aa 1f       	adc	r26, r26
    7756:	bb 1f       	adc	r27, r27
    7758:	a6 17       	cp	r26, r22
    775a:	b7 07       	cpc	r27, r23
    775c:	10 f0       	brcs	.+4      	; 0x7762 <__udivmodhi4_ep>
    775e:	a6 1b       	sub	r26, r22
    7760:	b7 0b       	sbc	r27, r23

00007762 <__udivmodhi4_ep>:
    7762:	88 1f       	adc	r24, r24
    7764:	99 1f       	adc	r25, r25
    7766:	5a 95       	dec	r21
    7768:	a9 f7       	brne	.-22     	; 0x7754 <__udivmodhi4_loop>
    776a:	80 95       	com	r24
    776c:	90 95       	com	r25
    776e:	bc 01       	movw	r22, r24
    7770:	cd 01       	movw	r24, r26
    7772:	08 95       	ret

00007774 <__divmodsi4>:
    7774:	97 fb       	bst	r25, 7
    7776:	09 2e       	mov	r0, r25
    7778:	05 26       	eor	r0, r21
    777a:	0e d0       	rcall	.+28     	; 0x7798 <__divmodsi4_neg1>
    777c:	57 fd       	sbrc	r21, 7
    777e:	04 d0       	rcall	.+8      	; 0x7788 <__divmodsi4_neg2>
    7780:	14 d0       	rcall	.+40     	; 0x77aa <__udivmodsi4>
    7782:	0a d0       	rcall	.+20     	; 0x7798 <__divmodsi4_neg1>
    7784:	00 1c       	adc	r0, r0
    7786:	38 f4       	brcc	.+14     	; 0x7796 <__divmodsi4_exit>

00007788 <__divmodsi4_neg2>:
    7788:	50 95       	com	r21
    778a:	40 95       	com	r20
    778c:	30 95       	com	r19
    778e:	21 95       	neg	r18
    7790:	3f 4f       	sbci	r19, 0xFF	; 255
    7792:	4f 4f       	sbci	r20, 0xFF	; 255
    7794:	5f 4f       	sbci	r21, 0xFF	; 255

00007796 <__divmodsi4_exit>:
    7796:	08 95       	ret

00007798 <__divmodsi4_neg1>:
    7798:	f6 f7       	brtc	.-4      	; 0x7796 <__divmodsi4_exit>
    779a:	90 95       	com	r25
    779c:	80 95       	com	r24
    779e:	70 95       	com	r23
    77a0:	61 95       	neg	r22
    77a2:	7f 4f       	sbci	r23, 0xFF	; 255
    77a4:	8f 4f       	sbci	r24, 0xFF	; 255
    77a6:	9f 4f       	sbci	r25, 0xFF	; 255
    77a8:	08 95       	ret

000077aa <__udivmodsi4>:
    77aa:	a1 e2       	ldi	r26, 0x21	; 33
    77ac:	1a 2e       	mov	r1, r26
    77ae:	aa 1b       	sub	r26, r26
    77b0:	bb 1b       	sub	r27, r27
    77b2:	fd 01       	movw	r30, r26
    77b4:	0d c0       	rjmp	.+26     	; 0x77d0 <__udivmodsi4_ep>

000077b6 <__udivmodsi4_loop>:
    77b6:	aa 1f       	adc	r26, r26
    77b8:	bb 1f       	adc	r27, r27
    77ba:	ee 1f       	adc	r30, r30
    77bc:	ff 1f       	adc	r31, r31
    77be:	a2 17       	cp	r26, r18
    77c0:	b3 07       	cpc	r27, r19
    77c2:	e4 07       	cpc	r30, r20
    77c4:	f5 07       	cpc	r31, r21
    77c6:	20 f0       	brcs	.+8      	; 0x77d0 <__udivmodsi4_ep>
    77c8:	a2 1b       	sub	r26, r18
    77ca:	b3 0b       	sbc	r27, r19
    77cc:	e4 0b       	sbc	r30, r20
    77ce:	f5 0b       	sbc	r31, r21

000077d0 <__udivmodsi4_ep>:
    77d0:	66 1f       	adc	r22, r22
    77d2:	77 1f       	adc	r23, r23
    77d4:	88 1f       	adc	r24, r24
    77d6:	99 1f       	adc	r25, r25
    77d8:	1a 94       	dec	r1
    77da:	69 f7       	brne	.-38     	; 0x77b6 <__udivmodsi4_loop>
    77dc:	60 95       	com	r22
    77de:	70 95       	com	r23
    77e0:	80 95       	com	r24
    77e2:	90 95       	com	r25
    77e4:	9b 01       	movw	r18, r22
    77e6:	ac 01       	movw	r20, r24
    77e8:	bd 01       	movw	r22, r26
    77ea:	cf 01       	movw	r24, r30
    77ec:	08 95       	ret

000077ee <__prologue_saves__>:
    77ee:	2f 92       	push	r2
    77f0:	3f 92       	push	r3
    77f2:	4f 92       	push	r4
    77f4:	5f 92       	push	r5
    77f6:	6f 92       	push	r6
    77f8:	7f 92       	push	r7
    77fa:	8f 92       	push	r8
    77fc:	9f 92       	push	r9
    77fe:	af 92       	push	r10
    7800:	bf 92       	push	r11
    7802:	cf 92       	push	r12
    7804:	df 92       	push	r13
    7806:	ef 92       	push	r14
    7808:	ff 92       	push	r15
    780a:	0f 93       	push	r16
    780c:	1f 93       	push	r17
    780e:	cf 93       	push	r28
    7810:	df 93       	push	r29
    7812:	cd b7       	in	r28, 0x3d	; 61
    7814:	de b7       	in	r29, 0x3e	; 62
    7816:	ca 1b       	sub	r28, r26
    7818:	db 0b       	sbc	r29, r27
    781a:	0f b6       	in	r0, 0x3f	; 63
    781c:	f8 94       	cli
    781e:	de bf       	out	0x3e, r29	; 62
    7820:	0f be       	out	0x3f, r0	; 63
    7822:	cd bf       	out	0x3d, r28	; 61
    7824:	09 94       	ijmp

00007826 <__epilogue_restores__>:
    7826:	2a 88       	ldd	r2, Y+18	; 0x12
    7828:	39 88       	ldd	r3, Y+17	; 0x11
    782a:	48 88       	ldd	r4, Y+16	; 0x10
    782c:	5f 84       	ldd	r5, Y+15	; 0x0f
    782e:	6e 84       	ldd	r6, Y+14	; 0x0e
    7830:	7d 84       	ldd	r7, Y+13	; 0x0d
    7832:	8c 84       	ldd	r8, Y+12	; 0x0c
    7834:	9b 84       	ldd	r9, Y+11	; 0x0b
    7836:	aa 84       	ldd	r10, Y+10	; 0x0a
    7838:	b9 84       	ldd	r11, Y+9	; 0x09
    783a:	c8 84       	ldd	r12, Y+8	; 0x08
    783c:	df 80       	ldd	r13, Y+7	; 0x07
    783e:	ee 80       	ldd	r14, Y+6	; 0x06
    7840:	fd 80       	ldd	r15, Y+5	; 0x05
    7842:	0c 81       	ldd	r16, Y+4	; 0x04
    7844:	1b 81       	ldd	r17, Y+3	; 0x03
    7846:	aa 81       	ldd	r26, Y+2	; 0x02
    7848:	b9 81       	ldd	r27, Y+1	; 0x01
    784a:	ce 0f       	add	r28, r30
    784c:	d1 1d       	adc	r29, r1
    784e:	0f b6       	in	r0, 0x3f	; 63
    7850:	f8 94       	cli
    7852:	de bf       	out	0x3e, r29	; 62
    7854:	0f be       	out	0x3f, r0	; 63
    7856:	cd bf       	out	0x3d, r28	; 61
    7858:	ed 01       	movw	r28, r26
    785a:	08 95       	ret

0000785c <fma>:
    785c:	20 d0       	rcall	.+64     	; 0x789e <__mulsf3x>
    785e:	97 01       	movw	r18, r14
    7860:	a8 01       	movw	r20, r16
    7862:	aa 27       	eor	r26, r26
    7864:	c2 d0       	rcall	.+388    	; 0x79ea <__addsf3x>
    7866:	00 c0       	rjmp	.+0      	; 0x7868 <__fp_round>

00007868 <__fp_round>:
    7868:	09 2e       	mov	r0, r25
    786a:	03 94       	inc	r0
    786c:	00 0c       	add	r0, r0
    786e:	11 f4       	brne	.+4      	; 0x7874 <__fp_round+0xc>
    7870:	88 23       	and	r24, r24
    7872:	52 f0       	brmi	.+20     	; 0x7888 <__fp_round+0x20>
    7874:	bb 0f       	add	r27, r27
    7876:	40 f4       	brcc	.+16     	; 0x7888 <__fp_round+0x20>
    7878:	bf 2b       	or	r27, r31
    787a:	11 f4       	brne	.+4      	; 0x7880 <__fp_round+0x18>
    787c:	60 ff       	sbrs	r22, 0
    787e:	04 c0       	rjmp	.+8      	; 0x7888 <__fp_round+0x20>
    7880:	6f 5f       	subi	r22, 0xFF	; 255
    7882:	7f 4f       	sbci	r23, 0xFF	; 255
    7884:	8f 4f       	sbci	r24, 0xFF	; 255
    7886:	9f 4f       	sbci	r25, 0xFF	; 255
    7888:	08 95       	ret
    788a:	20 d1       	rcall	.+576    	; 0x7acc <__fp_pscA>
    788c:	28 f0       	brcs	.+10     	; 0x7898 <__fp_round+0x30>
    788e:	25 d1       	rcall	.+586    	; 0x7ada <__fp_pscB>
    7890:	18 f0       	brcs	.+6      	; 0x7898 <__fp_round+0x30>
    7892:	95 23       	and	r25, r21
    7894:	09 f0       	breq	.+2      	; 0x7898 <__fp_round+0x30>
    7896:	fc c0       	rjmp	.+504    	; 0x7a90 <__fp_inf>
    7898:	0f c1       	rjmp	.+542    	; 0x7ab8 <__fp_nan>
    789a:	11 24       	eor	r1, r1
    789c:	48 c1       	rjmp	.+656    	; 0x7b2e <__fp_szero>

0000789e <__mulsf3x>:
    789e:	24 d1       	rcall	.+584    	; 0x7ae8 <__fp_split3>
    78a0:	a0 f3       	brcs	.-24     	; 0x788a <__fp_round+0x22>

000078a2 <__mulsf3_pse>:
    78a2:	95 9f       	mul	r25, r21
    78a4:	d1 f3       	breq	.-12     	; 0x789a <__fp_round+0x32>
    78a6:	95 0f       	add	r25, r21
    78a8:	50 e0       	ldi	r21, 0x00	; 0
    78aa:	55 1f       	adc	r21, r21
    78ac:	62 9f       	mul	r22, r18
    78ae:	f0 01       	movw	r30, r0
    78b0:	72 9f       	mul	r23, r18
    78b2:	bb 27       	eor	r27, r27
    78b4:	f0 0d       	add	r31, r0
    78b6:	b1 1d       	adc	r27, r1
    78b8:	63 9f       	mul	r22, r19
    78ba:	aa 27       	eor	r26, r26
    78bc:	f0 0d       	add	r31, r0
    78be:	b1 1d       	adc	r27, r1
    78c0:	aa 1f       	adc	r26, r26
    78c2:	64 9f       	mul	r22, r20
    78c4:	66 27       	eor	r22, r22
    78c6:	b0 0d       	add	r27, r0
    78c8:	a1 1d       	adc	r26, r1
    78ca:	66 1f       	adc	r22, r22
    78cc:	82 9f       	mul	r24, r18
    78ce:	22 27       	eor	r18, r18
    78d0:	b0 0d       	add	r27, r0
    78d2:	a1 1d       	adc	r26, r1
    78d4:	62 1f       	adc	r22, r18
    78d6:	73 9f       	mul	r23, r19
    78d8:	b0 0d       	add	r27, r0
    78da:	a1 1d       	adc	r26, r1
    78dc:	62 1f       	adc	r22, r18
    78de:	83 9f       	mul	r24, r19
    78e0:	a0 0d       	add	r26, r0
    78e2:	61 1d       	adc	r22, r1
    78e4:	22 1f       	adc	r18, r18
    78e6:	74 9f       	mul	r23, r20
    78e8:	33 27       	eor	r19, r19
    78ea:	a0 0d       	add	r26, r0
    78ec:	61 1d       	adc	r22, r1
    78ee:	23 1f       	adc	r18, r19
    78f0:	84 9f       	mul	r24, r20
    78f2:	60 0d       	add	r22, r0
    78f4:	21 1d       	adc	r18, r1
    78f6:	82 2f       	mov	r24, r18
    78f8:	76 2f       	mov	r23, r22
    78fa:	6a 2f       	mov	r22, r26
    78fc:	11 24       	eor	r1, r1
    78fe:	9f 57       	subi	r25, 0x7F	; 127
    7900:	50 40       	sbci	r21, 0x00	; 0
    7902:	8a f0       	brmi	.+34     	; 0x7926 <__mulsf3_pse+0x84>
    7904:	e1 f0       	breq	.+56     	; 0x793e <__mulsf3_pse+0x9c>
    7906:	88 23       	and	r24, r24
    7908:	4a f0       	brmi	.+18     	; 0x791c <__mulsf3_pse+0x7a>
    790a:	ee 0f       	add	r30, r30
    790c:	ff 1f       	adc	r31, r31
    790e:	bb 1f       	adc	r27, r27
    7910:	66 1f       	adc	r22, r22
    7912:	77 1f       	adc	r23, r23
    7914:	88 1f       	adc	r24, r24
    7916:	91 50       	subi	r25, 0x01	; 1
    7918:	50 40       	sbci	r21, 0x00	; 0
    791a:	a9 f7       	brne	.-22     	; 0x7906 <__mulsf3_pse+0x64>
    791c:	9e 3f       	cpi	r25, 0xFE	; 254
    791e:	51 05       	cpc	r21, r1
    7920:	70 f0       	brcs	.+28     	; 0x793e <__mulsf3_pse+0x9c>
    7922:	b6 c0       	rjmp	.+364    	; 0x7a90 <__fp_inf>
    7924:	04 c1       	rjmp	.+520    	; 0x7b2e <__fp_szero>
    7926:	5f 3f       	cpi	r21, 0xFF	; 255
    7928:	ec f3       	brlt	.-6      	; 0x7924 <__mulsf3_pse+0x82>
    792a:	98 3e       	cpi	r25, 0xE8	; 232
    792c:	dc f3       	brlt	.-10     	; 0x7924 <__mulsf3_pse+0x82>
    792e:	86 95       	lsr	r24
    7930:	77 95       	ror	r23
    7932:	67 95       	ror	r22
    7934:	b7 95       	ror	r27
    7936:	f7 95       	ror	r31
    7938:	e7 95       	ror	r30
    793a:	9f 5f       	subi	r25, 0xFF	; 255
    793c:	c1 f7       	brne	.-16     	; 0x792e <__mulsf3_pse+0x8c>
    793e:	fe 2b       	or	r31, r30
    7940:	88 0f       	add	r24, r24
    7942:	91 1d       	adc	r25, r1
    7944:	96 95       	lsr	r25
    7946:	87 95       	ror	r24
    7948:	97 f9       	bld	r25, 7
    794a:	08 95       	ret
    794c:	11 f4       	brne	.+4      	; 0x7952 <__mulsf3_pse+0xb0>
    794e:	0e f4       	brtc	.+2      	; 0x7952 <__mulsf3_pse+0xb0>
    7950:	b3 c0       	rjmp	.+358    	; 0x7ab8 <__fp_nan>
    7952:	a4 c0       	rjmp	.+328    	; 0x7a9c <__fp_mpack>

00007954 <sqrt>:
    7954:	d1 d0       	rcall	.+418    	; 0x7af8 <__fp_splitA>
    7956:	d0 f3       	brcs	.-12     	; 0x794c <__mulsf3_pse+0xaa>
    7958:	99 23       	and	r25, r25
    795a:	d9 f3       	breq	.-10     	; 0x7952 <__mulsf3_pse+0xb0>
    795c:	ce f3       	brts	.-14     	; 0x7950 <__mulsf3_pse+0xae>
    795e:	9f 57       	subi	r25, 0x7F	; 127
    7960:	55 0b       	sbc	r21, r21
    7962:	87 ff       	sbrs	r24, 7
    7964:	ac d0       	rcall	.+344    	; 0x7abe <__fp_norm2>
    7966:	00 24       	eor	r0, r0
    7968:	a0 e6       	ldi	r26, 0x60	; 96
    796a:	40 ea       	ldi	r20, 0xA0	; 160
    796c:	90 01       	movw	r18, r0
    796e:	80 58       	subi	r24, 0x80	; 128
    7970:	56 95       	lsr	r21
    7972:	97 95       	ror	r25
    7974:	28 f4       	brcc	.+10     	; 0x7980 <sqrt+0x2c>
    7976:	80 5c       	subi	r24, 0xC0	; 192
    7978:	66 0f       	add	r22, r22
    797a:	77 1f       	adc	r23, r23
    797c:	88 1f       	adc	r24, r24
    797e:	20 f0       	brcs	.+8      	; 0x7988 <sqrt+0x34>
    7980:	26 17       	cp	r18, r22
    7982:	37 07       	cpc	r19, r23
    7984:	48 07       	cpc	r20, r24
    7986:	30 f4       	brcc	.+12     	; 0x7994 <sqrt+0x40>
    7988:	62 1b       	sub	r22, r18
    798a:	73 0b       	sbc	r23, r19
    798c:	84 0b       	sbc	r24, r20
    798e:	20 29       	or	r18, r0
    7990:	31 29       	or	r19, r1
    7992:	4a 2b       	or	r20, r26
    7994:	a6 95       	lsr	r26
    7996:	17 94       	ror	r1
    7998:	07 94       	ror	r0
    799a:	20 25       	eor	r18, r0
    799c:	31 25       	eor	r19, r1
    799e:	4a 27       	eor	r20, r26
    79a0:	58 f7       	brcc	.-42     	; 0x7978 <sqrt+0x24>
    79a2:	66 0f       	add	r22, r22
    79a4:	77 1f       	adc	r23, r23
    79a6:	88 1f       	adc	r24, r24
    79a8:	20 f0       	brcs	.+8      	; 0x79b2 <sqrt+0x5e>
    79aa:	26 17       	cp	r18, r22
    79ac:	37 07       	cpc	r19, r23
    79ae:	48 07       	cpc	r20, r24
    79b0:	30 f4       	brcc	.+12     	; 0x79be <sqrt+0x6a>
    79b2:	62 0b       	sbc	r22, r18
    79b4:	73 0b       	sbc	r23, r19
    79b6:	84 0b       	sbc	r24, r20
    79b8:	20 0d       	add	r18, r0
    79ba:	31 1d       	adc	r19, r1
    79bc:	41 1d       	adc	r20, r1
    79be:	a0 95       	com	r26
    79c0:	81 f7       	brne	.-32     	; 0x79a2 <sqrt+0x4e>
    79c2:	b9 01       	movw	r22, r18
    79c4:	84 2f       	mov	r24, r20
    79c6:	91 58       	subi	r25, 0x81	; 129
    79c8:	88 0f       	add	r24, r24
    79ca:	96 95       	lsr	r25
    79cc:	87 95       	ror	r24
    79ce:	08 95       	ret
    79d0:	7d d0       	rcall	.+250    	; 0x7acc <__fp_pscA>
    79d2:	30 f0       	brcs	.+12     	; 0x79e0 <sqrt+0x8c>
    79d4:	82 d0       	rcall	.+260    	; 0x7ada <__fp_pscB>
    79d6:	20 f0       	brcs	.+8      	; 0x79e0 <sqrt+0x8c>
    79d8:	31 f4       	brne	.+12     	; 0x79e6 <sqrt+0x92>
    79da:	9f 3f       	cpi	r25, 0xFF	; 255
    79dc:	11 f4       	brne	.+4      	; 0x79e2 <sqrt+0x8e>
    79de:	1e f4       	brtc	.+6      	; 0x79e6 <sqrt+0x92>
    79e0:	6b c0       	rjmp	.+214    	; 0x7ab8 <__fp_nan>
    79e2:	0e f4       	brtc	.+2      	; 0x79e6 <sqrt+0x92>
    79e4:	e0 95       	com	r30
    79e6:	e7 fb       	bst	r30, 7
    79e8:	53 c0       	rjmp	.+166    	; 0x7a90 <__fp_inf>

000079ea <__addsf3x>:
    79ea:	e9 2f       	mov	r30, r25
    79ec:	7d d0       	rcall	.+250    	; 0x7ae8 <__fp_split3>
    79ee:	80 f3       	brcs	.-32     	; 0x79d0 <sqrt+0x7c>
    79f0:	ba 17       	cp	r27, r26
    79f2:	62 07       	cpc	r22, r18
    79f4:	73 07       	cpc	r23, r19
    79f6:	84 07       	cpc	r24, r20
    79f8:	95 07       	cpc	r25, r21
    79fa:	18 f0       	brcs	.+6      	; 0x7a02 <__addsf3x+0x18>
    79fc:	71 f4       	brne	.+28     	; 0x7a1a <__addsf3x+0x30>
    79fe:	9e f5       	brtc	.+102    	; 0x7a66 <__addsf3x+0x7c>
    7a00:	95 c0       	rjmp	.+298    	; 0x7b2c <__fp_zero>
    7a02:	0e f4       	brtc	.+2      	; 0x7a06 <__addsf3x+0x1c>
    7a04:	e0 95       	com	r30
    7a06:	0b 2e       	mov	r0, r27
    7a08:	ba 2f       	mov	r27, r26
    7a0a:	a0 2d       	mov	r26, r0
    7a0c:	0b 01       	movw	r0, r22
    7a0e:	b9 01       	movw	r22, r18
    7a10:	90 01       	movw	r18, r0
    7a12:	0c 01       	movw	r0, r24
    7a14:	ca 01       	movw	r24, r20
    7a16:	a0 01       	movw	r20, r0
    7a18:	11 24       	eor	r1, r1
    7a1a:	ff 27       	eor	r31, r31
    7a1c:	59 1b       	sub	r21, r25
    7a1e:	99 f0       	breq	.+38     	; 0x7a46 <__addsf3x+0x5c>
    7a20:	59 3f       	cpi	r21, 0xF9	; 249
    7a22:	50 f4       	brcc	.+20     	; 0x7a38 <__addsf3x+0x4e>
    7a24:	50 3e       	cpi	r21, 0xE0	; 224
    7a26:	68 f1       	brcs	.+90     	; 0x7a82 <__addsf3x+0x98>
    7a28:	1a 16       	cp	r1, r26
    7a2a:	f0 40       	sbci	r31, 0x00	; 0
    7a2c:	a2 2f       	mov	r26, r18
    7a2e:	23 2f       	mov	r18, r19
    7a30:	34 2f       	mov	r19, r20
    7a32:	44 27       	eor	r20, r20
    7a34:	58 5f       	subi	r21, 0xF8	; 248
    7a36:	f3 cf       	rjmp	.-26     	; 0x7a1e <__addsf3x+0x34>
    7a38:	46 95       	lsr	r20
    7a3a:	37 95       	ror	r19
    7a3c:	27 95       	ror	r18
    7a3e:	a7 95       	ror	r26
    7a40:	f0 40       	sbci	r31, 0x00	; 0
    7a42:	53 95       	inc	r21
    7a44:	c9 f7       	brne	.-14     	; 0x7a38 <__addsf3x+0x4e>
    7a46:	7e f4       	brtc	.+30     	; 0x7a66 <__addsf3x+0x7c>
    7a48:	1f 16       	cp	r1, r31
    7a4a:	ba 0b       	sbc	r27, r26
    7a4c:	62 0b       	sbc	r22, r18
    7a4e:	73 0b       	sbc	r23, r19
    7a50:	84 0b       	sbc	r24, r20
    7a52:	ba f0       	brmi	.+46     	; 0x7a82 <__addsf3x+0x98>
    7a54:	91 50       	subi	r25, 0x01	; 1
    7a56:	a1 f0       	breq	.+40     	; 0x7a80 <__addsf3x+0x96>
    7a58:	ff 0f       	add	r31, r31
    7a5a:	bb 1f       	adc	r27, r27
    7a5c:	66 1f       	adc	r22, r22
    7a5e:	77 1f       	adc	r23, r23
    7a60:	88 1f       	adc	r24, r24
    7a62:	c2 f7       	brpl	.-16     	; 0x7a54 <__addsf3x+0x6a>
    7a64:	0e c0       	rjmp	.+28     	; 0x7a82 <__addsf3x+0x98>
    7a66:	ba 0f       	add	r27, r26
    7a68:	62 1f       	adc	r22, r18
    7a6a:	73 1f       	adc	r23, r19
    7a6c:	84 1f       	adc	r24, r20
    7a6e:	48 f4       	brcc	.+18     	; 0x7a82 <__addsf3x+0x98>
    7a70:	87 95       	ror	r24
    7a72:	77 95       	ror	r23
    7a74:	67 95       	ror	r22
    7a76:	b7 95       	ror	r27
    7a78:	f7 95       	ror	r31
    7a7a:	9e 3f       	cpi	r25, 0xFE	; 254
    7a7c:	08 f0       	brcs	.+2      	; 0x7a80 <__addsf3x+0x96>
    7a7e:	b3 cf       	rjmp	.-154    	; 0x79e6 <sqrt+0x92>
    7a80:	93 95       	inc	r25
    7a82:	88 0f       	add	r24, r24
    7a84:	08 f0       	brcs	.+2      	; 0x7a88 <__addsf3x+0x9e>
    7a86:	99 27       	eor	r25, r25
    7a88:	ee 0f       	add	r30, r30
    7a8a:	97 95       	ror	r25
    7a8c:	87 95       	ror	r24
    7a8e:	08 95       	ret

00007a90 <__fp_inf>:
    7a90:	97 f9       	bld	r25, 7
    7a92:	9f 67       	ori	r25, 0x7F	; 127
    7a94:	80 e8       	ldi	r24, 0x80	; 128
    7a96:	70 e0       	ldi	r23, 0x00	; 0
    7a98:	60 e0       	ldi	r22, 0x00	; 0
    7a9a:	08 95       	ret

00007a9c <__fp_mpack>:
    7a9c:	9f 3f       	cpi	r25, 0xFF	; 255
    7a9e:	31 f0       	breq	.+12     	; 0x7aac <__fp_mpack_finite+0xc>

00007aa0 <__fp_mpack_finite>:
    7aa0:	91 50       	subi	r25, 0x01	; 1
    7aa2:	20 f4       	brcc	.+8      	; 0x7aac <__fp_mpack_finite+0xc>
    7aa4:	87 95       	ror	r24
    7aa6:	77 95       	ror	r23
    7aa8:	67 95       	ror	r22
    7aaa:	b7 95       	ror	r27
    7aac:	88 0f       	add	r24, r24
    7aae:	91 1d       	adc	r25, r1
    7ab0:	96 95       	lsr	r25
    7ab2:	87 95       	ror	r24
    7ab4:	97 f9       	bld	r25, 7
    7ab6:	08 95       	ret

00007ab8 <__fp_nan>:
    7ab8:	9f ef       	ldi	r25, 0xFF	; 255
    7aba:	80 ec       	ldi	r24, 0xC0	; 192
    7abc:	08 95       	ret

00007abe <__fp_norm2>:
    7abe:	91 50       	subi	r25, 0x01	; 1
    7ac0:	50 40       	sbci	r21, 0x00	; 0
    7ac2:	66 0f       	add	r22, r22
    7ac4:	77 1f       	adc	r23, r23
    7ac6:	88 1f       	adc	r24, r24
    7ac8:	d2 f7       	brpl	.-12     	; 0x7abe <__fp_norm2>
    7aca:	08 95       	ret

00007acc <__fp_pscA>:
    7acc:	00 24       	eor	r0, r0
    7ace:	0a 94       	dec	r0
    7ad0:	16 16       	cp	r1, r22
    7ad2:	17 06       	cpc	r1, r23
    7ad4:	18 06       	cpc	r1, r24
    7ad6:	09 06       	cpc	r0, r25
    7ad8:	08 95       	ret

00007ada <__fp_pscB>:
    7ada:	00 24       	eor	r0, r0
    7adc:	0a 94       	dec	r0
    7ade:	12 16       	cp	r1, r18
    7ae0:	13 06       	cpc	r1, r19
    7ae2:	14 06       	cpc	r1, r20
    7ae4:	05 06       	cpc	r0, r21
    7ae6:	08 95       	ret

00007ae8 <__fp_split3>:
    7ae8:	57 fd       	sbrc	r21, 7
    7aea:	90 58       	subi	r25, 0x80	; 128
    7aec:	44 0f       	add	r20, r20
    7aee:	55 1f       	adc	r21, r21
    7af0:	59 f0       	breq	.+22     	; 0x7b08 <__fp_splitA+0x10>
    7af2:	5f 3f       	cpi	r21, 0xFF	; 255
    7af4:	71 f0       	breq	.+28     	; 0x7b12 <__fp_splitA+0x1a>
    7af6:	47 95       	ror	r20

00007af8 <__fp_splitA>:
    7af8:	88 0f       	add	r24, r24
    7afa:	97 fb       	bst	r25, 7
    7afc:	99 1f       	adc	r25, r25
    7afe:	61 f0       	breq	.+24     	; 0x7b18 <__fp_splitA+0x20>
    7b00:	9f 3f       	cpi	r25, 0xFF	; 255
    7b02:	79 f0       	breq	.+30     	; 0x7b22 <__fp_splitA+0x2a>
    7b04:	87 95       	ror	r24
    7b06:	08 95       	ret
    7b08:	12 16       	cp	r1, r18
    7b0a:	13 06       	cpc	r1, r19
    7b0c:	14 06       	cpc	r1, r20
    7b0e:	55 1f       	adc	r21, r21
    7b10:	f2 cf       	rjmp	.-28     	; 0x7af6 <__fp_split3+0xe>
    7b12:	46 95       	lsr	r20
    7b14:	f1 df       	rcall	.-30     	; 0x7af8 <__fp_splitA>
    7b16:	08 c0       	rjmp	.+16     	; 0x7b28 <__fp_splitA+0x30>
    7b18:	16 16       	cp	r1, r22
    7b1a:	17 06       	cpc	r1, r23
    7b1c:	18 06       	cpc	r1, r24
    7b1e:	99 1f       	adc	r25, r25
    7b20:	f1 cf       	rjmp	.-30     	; 0x7b04 <__fp_splitA+0xc>
    7b22:	86 95       	lsr	r24
    7b24:	71 05       	cpc	r23, r1
    7b26:	61 05       	cpc	r22, r1
    7b28:	08 94       	sec
    7b2a:	08 95       	ret

00007b2c <__fp_zero>:
    7b2c:	e8 94       	clt

00007b2e <__fp_szero>:
    7b2e:	bb 27       	eor	r27, r27
    7b30:	66 27       	eor	r22, r22
    7b32:	77 27       	eor	r23, r23
    7b34:	cb 01       	movw	r24, r22
    7b36:	97 f9       	bld	r25, 7
    7b38:	08 95       	ret

00007b3a <_exit>:
    7b3a:	f8 94       	cli

00007b3c <__stop_program>:
    7b3c:	ff cf       	rjmp	.-2      	; 0x7b3c <__stop_program>
